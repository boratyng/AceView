#!/bin/tcsh -f
#$ -S /bin/tcsh
#$ -P unified
#$ -j y
#$ -m e
#$ -v SGE_SUMMARY="stderr"
#$ -v SGE_NOMAIL

echo "hello world 1 P1=$1   P2=$2 SGE=$3 P4=$4"
############################################################################################
# Monday, Jan 2025 , adapted from  ~/gall/bin/BLY  August 14, 2000
#  fBLY Aceview Public Web Site construction pipeline, version 2
#  based upon the alignment and synthesis of the MAGIC deep sequencing RNA-seq pipeline
#  Author: mieg@ncbi.nlm.nih.gov

############################################################################################
## Purpose:
#  Construct in several phase one acedb database per chromosome called
#      ZH1 ZH2 ZH3 ...
#  renme all genes, merge ina single database, and adapt it for the Web

#  The calculation s are performed in several phases
#  fBLY d1 d2 ... "$chromSetAll"

# to start a new project see: ~/ace/waligners/scripts/MAGIC init RNA
#   document the MetaDB database (possibly using SRA runs callated in SRX_DB using scripts/SRX_import.tcsh)
#   align alll the read using : MAGIC a... c... 
#   construct the genes using : MAGIC f1 f2 f3 f4 f5
# the present scripts start from the genes recosntructed in the directories 'tmp/X.$MAGIC/$chrom'
# and creates a web enabled database in ZH
goto plusBas33
exit 1  
# exit is a protection, if goto is not interpreted because /bin/tcsh is not found

# Create the ZH databases in parallel
fBBLY 'd1'  all wait
fBBLY zero all wait ; 

# Then 2 linear phase, do not use BBLY
# add in the table Donna* to rename more genes via geneid
fBLY 'd11a d11b d11c d11d d11e d11f d11g d11h d11h31 d11i d11j d11k' all

fBBLY 'd12 d13 d14 d15 d16 q1b' all nowait // finish the annotations


fBBLY 'q2b' Y wait ;  # imports all the annots on the farm
fBBLY 'q2c' Y wait ;  # import the bibio, kills the long cloud genes etc.
fBBLY 'q2d' Y wait ;  # preindex in 64 parallel threads
fBBLY 'q2e' Y wait ;  # read the preindexing in a single thread
fBBLY 'q2f' Y wait ;  # precomputes the fiche in parallel
fBBLY 'q2g' Y wait ;  # reads the fiche in a single thread

#### later, export
fBBLY x1 all wait     # ftp site exports including gff.tar.gz
fBBLY x2 Y wait       # creates the Result dir 
fBBLY x3 all wait     # donna refeqmaker exports

############################################################################################
plusBas33:
setenv ici `pwd`

# setenv BSUB to allow multiple submission on the farm
# comment out that line to run single thread on a normal machine

#### ATTENTION i define BLYJOBNAME in fBLY and also in fBBLY 
#if (! $?BLYJOBNAME) setenv  BLYJOBNAME '-J Test_2'
if (! $?BLYJOBNAME) setenv  BLYJOBNAME ' '
####

set isLocal=local
set BSUB=1
if ($?BSUB) set isLocal=" "

setenv linux linux64
setenv project unified

## Command Line parsing
setenv phaseSet "$1"
if ("$phaseSet" == "") goto usage
  setenv chromSet "$2"
  if (! $?queue) then 
     setenv queue unified # low # unified
  endif

echo "hello world 2 $ici  chrom=$chromSet"

#setenv chromSet '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y Un'
#setenv chromSet 'Un Y X 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1'

############################################################################################
## global environment 
if (! $?ici) setenv ici `pwd`
echo ici: $ici

if (! -e $ici/Species) then
  echo 'missing file ici/Species'
  exit 1
endif

source $ici/Species
source $ici/scripts/Bglobal
echo $BglobalSuccess

############################################################################################

echo "hello world 3"
if ("$chromSet" == "") goto usage
echo "hello world 4"
if ("$chromSet" == all) setenv allChrom
if ("$chromSet" == all) setenv chromSet "$chromSetAll"

if ("$chromSet" == A) setenv chromSet "$chromSetA"
if ("$chromSet" == B) setenv chromSet "$chromSetB"
if ("$chromSet" == C) setenv chromSet "$chromSetC"
if ("$chromSet" == D) setenv chromSet "$chromSetD"
if ("$chromSet" == E) setenv chromSet "$chromSetE"
if ("$chromSet" == F) setenv chromSet "$chromSetF"

echo "hello world 5"

echo chromSet="$chromSet"
echo phaseSet="$phaseSet"

# The input data is extracted from the ./BUID directory
# localy linked as (for example) 
# ln -s /net/fridge/vol/vol1/genome/"$species"_build_winf_jul17 BUILD
# cf the documentation by Jang Wonhee

############################################################################################
## global environment 

#umask g+w

# ln -s /net/fridge/vol/vol1/genome/"$species"_build_winf_jul17 BUILD
setenv BUILD $ici/BUILD

setenv ServerHost `uname -a | awk '{print $2}' `
#setenv ServerHost annie
echo ServerHost :: $ServerHost

setenv GifServerHost localhost
setenv PERL5LIB $ici/bin/AcePerl.$MACHINE/blib/lib:$ici/bin/AcePerl.$MACHINE/blib/arch

############################################################################################
## Strategy

if (-e strategy.R.ace) goto afterStrategy

cat <<EOF >! strategy.R.ace # duplicated in phase 5

Clone R
Main_Clone
Name_by_section
-D MaxIntronSize // 70000
-D MinTranscriptSize 
-D Kill_non_best_mRNA
IgnoreWalls
useLeucine
MinIntronSize $MinIntronSize
MaxGapSize $MaxGapSize
NoKantorInfo
MultipleORF  // look for several orfs 
MarkDoubleFuzzy
MaskFrequentWords $wordFrequency
AcceptNegativeIntron
Sequencing_Vector        "Ara1"
Sequencing_Vector        "Ara1_F"
Sequencing_Vector        "Ara1_R"
Sequencing_Vector        "AF"
Sequencing_Vector        "AK"
Sequencing_Vector        "AL1"
Sequencing_Vector        "AL2"
Sequencing_Vector        "AL3"
Sequencing_Vector        "AL4"
Sequencing_Vector        "AL5"
Sequencing_Vector        "AL6"
Sequencing_Vector        "BC1"
Sequencing_Vector        "BC2"
Sequencing_Vector        "BC3"
Sequencing_Vector        "BC4"
Sequencing_Vector        "BC5"
Sequencing_Vector        "BC6"
Sequencing_Vector        "BC7"
Sequencing_Vector        "BC8"
Sequencing_Vector        "BC9"
Sequencing_Vector        "BC10"
Sequencing_Vector        "BC11"
Sequencing_Vector        "BX1"
Sequencing_Vector        "BX2"
Sequencing_Vector        "BX3"
Sequencing_Vector        "BX4"
Sequencing_Vector        "BX5"
Sequencing_Vector        "BX6"
Sequencing_Vector        "aaaaa"
Sequencing_Vector        "ttttt"
Sequencing_Vector        "tttttt"
Sequencing_Vector        "incyte"
Sequencing_Vector        "UIACBCB"

EOF

\cp $ici/strategy.R.ace $ici/strategy.R11b.ace

if (-e $ici/EstData) then
cat <<EOF >! $ici/strategy.R11b.ace # duplicated in phase 5

Clone R
Main_Clone
Name_by_section
-D MaxIntronSize // 70000
-D MinTranscriptSize 
Kill_non_best_mRNA
IgnoreWalls
useLeucine
MinIntronSize $MinIntronSize
MaxGapSize $MaxGapSize
NoKantorInfo
MarkDoubleFuzzy
MaskFrequentWords $wordFrequency
MultipleORF  // look for several orfs 
AcceptNegativeIntron
Sequencing_Vector        "Ara1"
Sequencing_Vector        "AF"
Sequencing_Vector        "AK"
Sequencing_Vector        "AL1"
Sequencing_Vector        "AL2"
Sequencing_Vector        "AL3"
Sequencing_Vector        "AL4"
Sequencing_Vector        "AL5"
Sequencing_Vector        "AL6"
Sequencing_Vector        "BC1"
Sequencing_Vector        "BC2"
Sequencing_Vector        "BC3"
Sequencing_Vector        "BC4"
Sequencing_Vector        "BC5"
Sequencing_Vector        "BC6"
Sequencing_Vector        "BC7"
Sequencing_Vector        "BC8"
Sequencing_Vector        "BC9"
Sequencing_Vector        "BC10"
Sequencing_Vector        "BC11"
Sequencing_Vector        "BX1"
Sequencing_Vector        "BX2"
Sequencing_Vector        "BX3"
Sequencing_Vector        "BX4"
Sequencing_Vector        "BX5"
Sequencing_Vector        "BX6"
Sequencing_Vector        "aaaaa"
Sequencing_Vector        "ttttt"
Sequencing_Vector        "tttttt"
Sequencing_Vector        "incyte"
Sequencing_Vector        "UIACBCB"

EOF
else
cat <<EOF >! $ici/strategy.R11b.ace # duplicated in phase 5

Clone R
Main_Clone
Name_by_section
-D MaxIntronSize // 70000
-D MinTranscriptSize 
-D Kill_non_best_mRNA
IgnoreWalls
useLeucine
MinIntronSize $MinIntronSize
MaxGapSize $MaxGapSize
MultipleORF  // look for several orfs 
NoKantorInfo
MarkDoubleFuzzy
MaskFrequentWords $wordFrequency
AcceptNegativeIntron
Sequencing_Vector        "Ara1"
Sequencing_Vector        "AF"
Sequencing_Vector        "AK"
Sequencing_Vector        "AL1"
Sequencing_Vector        "AL2"
Sequencing_Vector        "AL3"
Sequencing_Vector        "AL4"
Sequencing_Vector        "AL5"
Sequencing_Vector        "AL6"
Sequencing_Vector        "BC1"
Sequencing_Vector        "BC2"
Sequencing_Vector        "BC3"
Sequencing_Vector        "BC4"
Sequencing_Vector        "BC5"
Sequencing_Vector        "BC6"
Sequencing_Vector        "BC7"
Sequencing_Vector        "BC8"
Sequencing_Vector        "BC9"
Sequencing_Vector        "BC10"
Sequencing_Vector        "BC11"
Sequencing_Vector        "BX1"
Sequencing_Vector        "BX2"
Sequencing_Vector        "BX3"
Sequencing_Vector        "BX4"
Sequencing_Vector        "BX5"
Sequencing_Vector        "BX6"
Sequencing_Vector        "aaaaa"
Sequencing_Vector        "ttttt"
Sequencing_Vector        "tttttt"
Sequencing_Vector        "incyte"
Sequencing_Vector        "UIACBCB"

EOF

endif

\cp $ici/strategy.R11b.ace  $ici/strategy.RZH.ace 

chgrp worm $ici/strategy.R*.ace
chmod 664 $ici/strategy.R*.ace

afterStrategy:

setenv wordFrequency wordFrequency.$species.15
if (! -e $wordFrequency) then
  bin/clipalign -t TARGET/Targets/$species.genome.fasta.gz -wordFrequencyConstructTable $wordFrequency -wfSize 15
endif

############################################################################################
## Loop on all phases
foreach  phase ($phaseSet)

cd $ici

if ($phase == d1) goto phased1
if ($phase == d11a) goto phased11a
if ($phase == d11b) goto phased11b
if ($phase == d11c) goto phased11c
if ($phase == d11d) goto phased11d
if ($phase == d11e) goto phased11e
if ($phase == d11f) goto phased11f
if ($phase == d11g) goto phased11g
if ($phase == d11h) goto phased11h
if ($phase == d11h31) goto phased11h31
if ($phase == d11i) goto phased11i
if ($phase == d11j) goto phased11j
if ($phase == d11k) goto phased11k
if ($phase == d12) goto phased12
if ($phase == d13) goto phased13
if ($phase == d14) goto phased14
if ($phase == d14t) goto phased14truquee
if ($phase == d15) goto phased15
if ($phase == d16) goto phased16
if ($phase == x1) goto phasex1
if ($phase == x2) goto phasex2
if ($phase == x3) goto phasex3
if ($phase == x5) goto phasex5
if ($phase == x8) goto phasex8
if ($phase == c1) goto phasec1
if ($phase == c3) goto phasec3
if ($phase == clean) goto phaseclean
if ($phase == q1a) goto phaseq1a
if ($phase == q1b) goto phaseq1b
if ($phase == q2a) goto phaseq2a
if ($phase == q2b) goto phaseq2b
if ($phase == q2c) goto phaseq2c
if ($phase == q2d) goto phaseq2d
if ($phase == q2e) goto phaseq2e
if ($phase == q2f) goto phaseq2f
if ($phase == q2g) goto phaseq2g
if ($phase == j1) goto phasej1
if ($phase == r1) goto phaser1
if ($phase == r2) goto phaser2
if ($phase == r3) goto phaser3

# other value of $phase : fall through, print usage and die
echo "Sorry unknown phase=#$phase# in phaseSet=#$phaseSet#"
############################################################################################
## Usage 
## BBLY '1 2 3 4a 5a 6 8' all nowait
usage:

echo 'Usage fBLY phase_set chromosome_set'
echo "  example ./fBLY 'd1 d2' '20 21' "
echo '    d1: Create a ZH database, copied from tmp/X.$MAGIC/$chroms 
echo '    d11a: linear, get newname off the predicted gene'
echo '    d11b: linear, get newname off the cdna->locuslink'
echo '    d11c: linear, shop for previous names in PREVIOUS'
echo '    d11d: linear, import previous names in covering mrnas'
echo '    d11e: linear, recover justified previous pfam name'
echo '    d11f: linear, reserve all old pfam names'
echo '    d11g: linear, create new pfam names'
echo '    d11h: linear, recover justified previous pseudo name'
echo '    d11h31: linear, recover justified previous pseudo name 31'
echo '    d11i: linear, reserve all old pseudo names'
echo '    d11j: linear, create new pseudo names'
echo '    d11k: linear, double locuslink names'
echo '    d12: parallel, actually rename the gene and recompute it'
echo '    d13: parallel, read additional locuslink info'
echo '    d14: parallel, transfer the recovered locuslink biology and pfam XREF in the genes'
echo '    d15: parallel, pmid papers'
echo '    d16: parallel, change newnames to positional names'
echo '    r1: parallel recover very old gene names'
echo '    x1: parallel kill badddies then gffdump x1.*fasta, gff, pfam, support'
echo '    x2: linear tar and mv to ftp site'
echo '    x3: export x3.refmaker data'
echo '    x5: export mRNAs as AX model'
echo '    x8: parallel intron dump'
echo '    c1: consolidate: export real5prime etc'
echo '    c3: consolidate: export chrom2est (ZZ)'
echo '    clean: dumpdir and remove S*/database'
echo '    q1a: parallel export the genomic dna from CH'
echo '    q1b: parallel export from ZH the genes validates in phase 10'
echo '    q2a Y: linearized read in ZZ the genomic dna exported in phase q1a'
echo '    q2b Y: linearized read in ZZ the genes exported in q1b'
echo '    q2c: linear read in ZZ1 the standard refseq'
echo '    q2d Y: linearized launches in parallel the preindexation'
echo '    q2e Y: linear reads the results of the preindexation'
echo '    q2f Y: launches in parallel the fiche precompute on ZZ'
echo '    q2g Y: linear reads the ficheview'
echo '    j1: japan dump database and tar.gz'

echo ' In case of problem, call mieg@ncbi.nlm.nih.gov'
exit 1


############################################################
## seqfetch the recent NM mRNA ESTs 
## 
## Please check the date
##  seqfetch -  (to get the options)
##  seqfetch  -d n -t 5 -c 1 -q 'biomol_mrna[prop] AND human[orgn] NOT est' 
##           -t 5:: fasta output, -c 1:: just the atgc, not the translation

## to recover missed accessions, use:
## seqfetch -d n -t 3 -c 1 -G file_of_missed_accession_names >! mrna.gb

## Sugano and co, capped clones -> SL0
##  seqfetch, human mrna, keyword 'oligo capping' : 31536 mrna (attention aux ref seq)
##      256 (AND sugano [au] AND human mrna) non flaggue
##  est 
##    pme18sfl3 [vector] -> 1.427.933 and 5?->1.320.000  

## 2007_05_02
## import des mRNA, CF cahier human build L21 de Danielle, page 304
## query RNA gives all RNA minus the 2 bad classes 
##   other = syntethic + endogeneous retro-viruses
##   other_genetic = rearrangements
## de facto le micro rna trop courts s'alignent mal

## 2007_08_28
## GSS also has mRNA (core-nucleotide gss ou est)
## GSS RNA   ou mRNA pour avoir les gene-trap

\rm GenbankInfo/Gb*/mrna.ace GenbankInfo/Gb*/mrna.gb

phasea1a:

echo -n 'Start of phase a1a '
date

cd $ici
if (! -d GenbankInfo) mkdir GenbankInfo

cd GenbankInfo
if (! -d GbEst) then
  echo cvs checkout IMPORT_DATA/GENBANK
  cvs checkout IMPORT_DATA/GENBANK
  mv IMPORT_DATA/GENBANK GbNm
  cvs checkout IMPORT_DATA/GENBANK
  mv IMPORT_DATA/GENBANK GbMrna
  cvs checkout IMPORT_DATA/GENBANK
  mv IMPORT_DATA/GENBANK GbEst
  cvs checkout IMPORT_DATA/BIBLIO/PmImport
  mv IMPORT_DATA/BIBLIO .
endif

if (-d analysis) \rm -rf analysis

echo "a1a: $chromSet"
echo 'ATTENTION at NCBI june 2018 idfetch is replaced by seqfetch'
ls -ls allnm.$nm_today_date.ace
foreach  chrom ($chromSet)
if ($chrom == "1" && ! -e allnm.$nm_today_date.ace) then
  cd $ici/GenbankInfo/GbNm
  echo hello from $ici/GenbankInfo/GbNm
  ls -ls mrna.*
  if (! -e mrna.gb)   sh ./download $species_kantor'_nm'  $nm_start_date
  if (-e mrna.gb) then
    sh ./import
    mv allmrna.ok.ace $ici/GenbankInfo/allnm.$nm_today_date.ace
  endif
  cd $ici/GenbankInfo
  # ln -s allnm.feb2004.gb.ace mrnaMark.NM.ace
endif

pwd
ls -ls   /GenbankInfo/allmrna.$mrna_span_date.ace
if ($chrom == "2"  && ! -e allmrna.$mrna_span_date.ace) then 
  cd $ici/GenbankInfo/GbMrna
  pwd
  if (! -e mrna.gb)   sh ./download $species_kantor'_mrna'  $mrna_start_date 
  if (-e mrna.gb) then
    sh ./import
    mv allmrna.ok.ace ../allmrna.$mrna_span_date.ace 
  endif
  cd $ici/GenbankInfo
endif

ls -ls  allest.$est_span_date.ace
if ($chrom == "3" && ! -e allest.$est_span_date.ace) then
  cd $ici/GenbankInfo/GbEst
  if (! -e mrna.gb)   sh ./download $species_kantor'_est'  $est_start_date 
  if (-e mrna.gb) then 
    sh ./import
    cp allmrna.ok.ace ../allest.$est_span_date.ace
    # i need then to transfer the est in EstMarkInfo in phase a1c
  endif
  cd $ici/GenbankInfo
endif
end # $chrom

cd $ici
goto phaseLoop

############################################################
## Import long mrna data
##
## Correct genbank query is
##  idetch -  (to get the options)
##  seqfetch  -d n -t 5 -c 1 -q 'biomol_mrna[prop] AND human[orgn] NOT est' 
##           -t 5:: fasta output, -c 1:: just the atgc, not the translation
phasea1b:

echo -n 'Start of phase a1b '
date
cd $ici
if (! -d TraceInfo) then
    echo 'construct TraceInfo database'
    mkdir TraceInfo
    pushd TraceInfo
    ln -s ../bin/a1a.README_tracedb README_tracedb
    popd
endif

if (! -d MrnaInfo) then
    echo 'construct MrnaInfo database'
    mkdir MrnaInfo
    pushd MrnaInfo
    mkdir database
    ln -s ../acedata/wspec
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . <<EOF
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
    popd
endif

# Read the mRNA contamination file

if (0 && ! -e $ici/MrnaInfo/mrna_contaminant.done) then
 if (-e $BUILD/hit/"$species"_mrna_gcontam.hit) then
  if (! -e $ici/MrnaInfo/mrna_contaminant.ace) then
    echo -n "Perling MrnaInfo/mrna_contaminant "
    date
    perl $ici/bin/contaminant.pl < BUILD/hit/"$species"_mrna_gcontam.hit >! $ici/MrnaInfo/mrna_contaminant.preace
    mv  $ici/MrnaInfo/mrna_contaminant.preace  $ici/MrnaInfo/mrna_contaminant.ace
  endif
  date
  echo "pparse $ici/MrnaInfo/mrna_contaminant.ace"   | $tacembly $ici/MrnaInfo
  date
  touch  $ici/MrnaInfo/mrna_contaminant.done
 else
  echo "ERROR: MISSING FILE BUILD/hit/"$species"_mrna_gcontam.hit"
 endif
endif


# Export the refseqs and ref_mrna 

cd $ici
if (! -e MrnaInfo/a1.parse.done) then
  pushd GenbankInfo
  $tacembly ../MrnaInfo <<EOF
    query find sequence Ref_seq
    spush
    follow dna
    sor
    undo
    follow cdna_clone
    sor
    spop
    kill
    pparse allnm.$nm_today_date.ace
    pparse allmrna.$mrna_span_date.ace
    save
    quit
EOF
  popd
  pushd MrnaInfo 
  touch  a1.parse.done 
  \rm est.list est.dna allRefSeq.ace mrna.ncbi.ace
  popd
endif

cd $ici
if ( -e acedata/$species.hinv4.csh && ! -e MrnaInfo/a1b.hinv4.done) then
  pushd acedata
  $species.hinv4.csh $ici/MrnaInfo
  popd
  touch  MrnaInfo/a1b.hinv4.done
endif

if (! -e  MrnaInfo/allRefSeq.ace) then 
  echo 'Exporting MrnaInfo/allRefSeq.preace'
  pushd MrnaInfo
  \rm est.list est.dna
  $tacembly . <<EOF
      query find sequence IS X?_* 
      spush
      follow dna
      sor
      spop
      kill      
      query find sequence ( IS N?_*  )
      kstore rs
      query ! Ref_seq
      edit Ref_seq
      kget rs
      query ! Ref_mrna
      edit Ref_mrna
      kget rs
      query ! cdna_clone
       acem
        cdna_80
        quit
      query find cDNA_clone Double_fuzzy
      edit -D Double_fuzzy
      query  find Est Ref_seq && ! Real_5prime
      edit Real_5prime
      query  find Est Ref_seq && ! Real_3prime
      edit Real_3prime
      Query  find Est Ref_seq && ! mreverse && ! mforward
      edit mforward
      query find Est Ref_seq && ! mreverse && ! forward
      edit forward
      query find Est Ref_seq &&  mreverse && ! reverse
      edit reverse
      save
      query find Sequence Ref_seq  AND DNA AND Is_read // 35183 35865 34235 31928 28540 24375 24399 // 23973 take ALL refseqs into account
      spush
      follow cdna_clone
      sor
      follow Read // just to see if we have 2 reads off same clone
      sor
      follow dna
      sor
      spop
      show -a -f allRefSeq.preace
      query find Sequence  Ref_seq  AND DNA AND Is_read // 48147 NM + 5680 NR_ (2019) // 35173 NM + 10 NR // 29246 NM + 3776 XM // 20489 // 23973 take ALL refseqs into account
      list -a -f allRefSeq.test
      quit
EOF
  echo 'done Exporting MrnaInfo/allRefSeq.preace'
  if (-e allRefSeq.test) then
    \rm allRefSeq.test
    mv  allRefSeq.preace  allRefSeq.ace
  else
    echo crashed creating MrnaInfo/allRefSeq.ace
  endif
  popd
endif


if ( ! -e  MrnaInfo/allRefMrna.done) then
  pushd  MrnaInfo 
  echo 'exporting allRefMrna.ace '
  $tacembly . <<EOF
      query find Sequence DNA && NOT Ref_seq  && ! ref_mrna && ! IS bv*  && ! IS X?_* && dna:2 > 100
      edit ref_mrna
      query find Sequence ref_mrna && ! cdna_clone
      acem
        cdna_80
        quit
      query find sequence  bv* AND ! Is_est
      edit Is_est
      query find sequence Ref_mrna &&  mreverse && ! reverse
      edit reverse
      query find sequence  Ref_mrna &&  mforward && ! forward
      edit forward
      query find sequence  Ref_mrna &&  ! strand
      edit forward  
      query find sequence  ref_mrna && ! ref_seq
      spush
      query IS m2014* || dna:2 > 100
      sminus
      spop
      edit -D ref_mrna // forget the 145821 short sequences
      save
      query find sequence ref_mrna && ! ref_seq // 78475 (2019) // 78668 // 253955 // 251482 // 455515 // 455282// 229614 // 443872 // 215493 // 261798 (we now read rna) // 229097

      find model
      list -a -f allRefMrna.test
      quit
EOF
  if (-e allRefMrna.test) then
    mv  allRefMrna.test allRefMrna.done
  else
    echo missing file MrnaInfo/allRefMrna.test
  endif
  popd
endif

pushd MrnaInfo
  if ( ! -e est.dna) then
    $tacembly  . <<EOF
      query find sequence ref_mrna && Is_read &&  dna
      list -a -f est.list
      dna  est.dna
      query find sequence ! ref_mrna && dna:2 < 100 && dna:2 > 30
      dna shortMrna.dna
      query find sequence NCBI
      show -a -f mrna.ncbi.ace NCBI
      quit
EOF
    if (-e split.done) \rm  split.done
    cat est.dna | gawk '/^>/{n=0;s=substr($1,2);next;}{n+=length($1);if(n>mx){ms=s;mx=n;}}END{printf("%d\t%s\n",mx,s);}' > est.maxLn
    cat est.maxLn
  endif
popd

if (! -e $ici/EstMarkInfoY) ln -s MrnaInfo EstMarkInfoY
echo -n 'End of phasea1b '
date

goto phaseLoop

# TARGET
# a hack to create EstMarkInfoA and push there the previous AceView transcripts as if they were Est
if  (! -d EstmarkInfoA) then
  mkdir EstMarkInfoA
  pushd EstMarkInfoA
    ln -s ../acedata/wspec
    mkdir database
    tace . <<EOF
y
      save
      quit
EOF
  popd
endif
if  (! -e EstmarkInfoA/AceViewEst.done) then
  pushd EstMarkInfoA
    ln -s  ~/SEQC2_2020/TARGET/Targets/$species.av.fasta.gz AceViewEst.fasta.gz
    zcat AceViewEst.fasta.gz | gawk '/^>/{s=substr($1,2);printf("Sequence %s\nIs_read\ncDNA\nIs_mRNA\ncDNA_clone %s\nForward\n\n",s,s);}' | gzip > AceViewEst.ace.gz
    tace . <<EOF
      //pparse AceViewEst.fasta.gz
      pparse AceViewEst.ace.gz
      save
      query find sequence is_read && dna
      list -a -f est.list
      dna est.dna
      quit
EOF
  popd
endif
# a hack for mouse and rat jan 2017, because in oct 2016 i did not clean out the XM_ XR_ in MrnaInfo before parsing GenbankInfo/allNm.xxx.ace

foreach dd (`ls -d GeneInfo.*`)
 echo $dd
  tbly $dd <<EOF
    key s2kill.list
    kill
    save
    quit
EOF
end

foreach dd (`ls -d ZHchr*`)
  echo $dd
  tbly $dd <<EOF
    key s2kill.list
    spush
    follow dna
    sor
    undo
    follow cdna_clone
    sor
    spop
    kstore kk
    follow from_gene
    kstore tg
    kget kk
    kill
    kget tg
    cdna_73
    save
    quit
EOF
end

############################################################
## analyse the interesting data in Mark est download
## in fact all is good but for build 31 we use it as an
## afterthought

phasea1c:
echo -n 'Start of phase a1c '
date

foreach EM (1 X)
 if (! -d $ici/EstMarkInfo$EM || ! -d $ici/EstMarkInfo$EM/database) then
    echo 'construct EstMarkInfo$EM database'
    if (! -d $ici/EstMarkInfo$EM) mkdir $ici/EstMarkInfo$EM
    cd $ici/EstMarkInfo$EM
    mkdir database
    ln -s ../acedata/wspec.geneinfo wspec
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . <<EOF
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
     cd $ici
 endif
end

foreach EM (1 X)
  if (! -d EstMarkInfo$EM ) continue
  pushd EstMarkInfo$EM
  if (! -e a1c.est_$est_span_date.done && -e $ici/GenbankInfo/allest.$est_span_date.ace) then
    echo -n  "parsing est_$est_span_date "
    \rm est.list est.dna dna.split*
    tacembly . <<EOF
      pparse $ici/GenbankInfo/allest.$est_span_date.ace
      save
      quit
EOF
    if (-e split.done) \rm  split.done
    touch a1c.est_$est_span_date.done
  popd
 endif
end

foreach EM (1 2 3 4 5 6 7 8 9 X)
  if (! -d EstMarkInfo$EM ) continue
  pushd EstMarkInfo$EM
  if (! -e est.dna) then
    tacembly . <<EOF
      query find sequence is_read && dna
      query ! cdna_clone
      acem 
        cdna_80
        quit
      save
      query find sequence is_read && dna && cdna_clone
      list -a -f est.list
      dna est.dna
      quit
EOF
  endif
 popd
end

echo -n 'End of phase a1c '
date

goto phaseLoop

set run=Nano.R3.2
foreach lane (`seq 1 100`)
  if (! -e $run/f2.$lane.fastc.gz) continue
  mkdir $run.$lane
  pushd $run.$lane
    mkdir database
    ln -s ../acedata/wspec
  popd
  scripts/submit $run.$lane/parse "scripts/bly.markInfoFromLane.tcsh $run $lane"
end

############################################################
## Read the  est_info and contaminant files in EstData

phasea2c:

echo -n 'Start of phase a2c '
date

cd $ici
if (! -d $ici/EstData) then
  mkdir $ici/EstData
    pushd EstData
    mkdir database
    ln -s ../acedata/wspec
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . <<EOF
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
  popd
endif

# Read the est contamination file

if (! -e $ici/EstData/est_contaminant.done) then
  if (-e $BUILD/hit/"$species"_est_gcontam.hit) then 
    if (! -e $ici/EstData/est_contaminant.ace) then   
      echo -n "Perling EstData/est_contaminant "
      date
      perl $ici/bin/contaminant.pl < $BUILD/hit/"$species"_est_gcontam.hit >! $ici/EstData/est_contaminant.preace
      mv $ici/EstData/est_contaminant.preace $ici/EstData/est_contaminant.ace 
    endif
    date
    echo "pparse $ici/EstData/est_contaminant.ace"   | $tacembly $ici/EstData
    date
    touch  $ici/EstData/est_contaminant.done
  else
    echo "ERROR: MISSING FILE BUILD/hit/"$species"_est_gcontam.hit"
  endif
endif

echo -n 'End of phasea2c '
date

goto phaseLoop

############################################################
## Read the Yellow Brick Road
## see also  /am/ftp-genomes/$species_ncbi_ftp/README_CURRENT_RELEASE
# 2013 we want
#Assembly-unit id       Assembly-unit name
GCF_000001305.13        Primary_Assembly
GCF_000001315.1 ALT_REF_LOCI_1
GCF_000001325.2 ALT_REF_LOCI_2
GCF_000001335.1 ALT_REF_LOCI_3
GCF_000001345.1 ALT_REF_LOCI_4
GCF_000001355.1 ALT_REF_LOCI_5
GCF_000001365.2 ALT_REF_LOCI_6
GCF_000001375.1 ALT_REF_LOCI_7
GCF_000001385.1 ALT_REF_LOCI_8
GCF_000001395.1 ALT_REF_LOCI_9
GCF_000005045.9 PATCHES
GCF_000006015.1  non-nuclear

example of a patch chromo 18: 1-78Mb, the hole  12M 15M has been patched

phasea4a:

if (-d BUILD && -d $ici/GP_data && ! -d  $BUILD/ctg_agp) then
  cd $ici/GP_data
  mkdir agp_random
  mkdir agp
  mv ch*_random.agp agp_random
  mv ch*.agp agp
  cd $ici/BUILD
  ln -s  $ici/GP_data/agp ctg_agp
  cd $ici
endif



phasea4:

echo -n 'Start of phase a4 BacInfo obsolete'
date
goto phaseLoop
if (1 && ! -d $ici/BacInfo) then
    echo "Creating bacInfo database"
    mkdir $ici/BacInfo
    cd $ici/BacInfo
    mkdir database
    ln -s ../acedata/wspec
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . <<EOF
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
    cd $ici
endif  

if (! -d $ici/TARGET) mkdir $ici/TARGET
if (! -d $ici/TARGET/CHROMS) mkdir $ici/TARGET/CHROMS

## 2016_09_25
## ATTENTION l'importation a partir de /am/ftp-genomes/$refS/Assembled_chromosomes/seq
## est faite dans ~/ace/waligner/scripts/MAGIC TARGET_CONSTRUCTION
## Attention, the NM_ NR_ XM_ XR_ from the gff is not identical (10,000 cases) to what i found by the GenBank query
## also for mouse we found in the gff the exact number of NM_ XM_ announced in the web page, but 500 NR_ XR_ more than announced
## in the annotation report, in addition we have in the gff a couple of hundred tRNA, lncRNA and so on that have no transcript_id, i.e. no NR_ XR_
dna2dna -gff3 TARGET/GTF/$species_kantor.RefSeq.gff.gz -gtfRemap KT_RefSeq  -maxLineLn 60 -gzo -o BacInfo/RefSeq -gtfGenome TARGET/Targets/$species_kantor.genome.fasta.gz
cat BacInfo/RefSeq.fasta| gawk '/^>/{print "Sequence " substr($1,2);}' > BacInfo/RefSeq.list
cat BacInfo/RefSeq.list | gawk '{split ($0,aa,"|");print aa[1];}' > BacInfo/RefSeq.list2

tbly BacInfo <<EOF
    read-models
  pparse TARGET/Targets/$species_kantor.genome.fasta.gz
  pparse BacInfo/RefSeq.transcripts.ace.gz
  save
  quit
EOF

goto phaseLoop


# worm case, we need to use ace9 to actually dump the chromosomes
if (0) then
  ~/ace9/bin/tace ~/worm <<EOF 
    find sequence chromo*
    dna chromos.fa
    show -a -f chromos2dna.preace dna
    quit
EOF
  gawk '/^DNA/{gsub(/\"/,"",$2);;printf("Sequence %s\nIntMap %s %s %s\n\n",$2,$2,1,$3);} ' chromos2dna.preace >! chromos2dna.ace
  $tacembly . <<EOF
    pparse chromos.fa
    pparse chromos2dna.ace
    save
    quit
EOF
  cd $ici
  mkdir BUILD BUILD/ctg_fa
  foreach ii (I II III IV V X)
    $tacembly BacInfo <<EOF
      find sequence chrom*_$ii
      dna BUILD/ctg_fa/chr$ii.fa
      quit
EOF
  end
endif # worm case

echo -n 'End of phase a4: '
date

goto phaseLoop

############################################################
## Import locus link info method 2008
##
## Use the new GeneID and related files
##    CF: /am/ftp-gene/README

## SNP database Steve Sherry see:/am/ftp-snp/organisms/human_9606/rs_fasta

phasea5:

####### 2020_11_22  il semble que ASN.1 est deprecie
# ncbi/Gene/README
# wget "ftp://anonymous:mieg@ftp.ncbi.nlm.nih.gov/gene/DATA/gene2pubmed.gz"
# gene_history : dayly geneid
# gene_info : principal  all_data.gene_info.gz  tax, geneid dbxref hugo map descriptor type feature-type
# gene_neighbours : gene refeq uniprot
# mim2gene_medgen :  gene and disorder   genereviews  medgen_cui (vocabulaire CUI) QTL[12]
# DATA/GENE_INFO
# gene_rif
# interactions
# gene_reviews



##
setenv GI /am/ftp-gene/DATA
set GFTP=ftp://anonymous:mieg@ftp.ncbi.nlm.nih.gov/gene/DATA

echo -n 'Start of phase a5 '
date
if (! -d $ici/LocusLinkInfo || ! -d $ici/LocusLinkInfo/database) then
    echo 'construct LocusLinkInfo database'
    if (! -d $ici/LocusLinkInfo) mkdir $ici/LocusLinkInfo
    cd $ici/LocusLinkInfo
    mkdir database
    ln -s ../acedata/wspec
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . <<EOF
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
     cd $ici
endif
echo $tacembly

cd $ici/LocusLinkInfo
# Read PFAM to be able to be able to upgrade the GO to the proper categories
# To update PFAM seethe Kantor system

if (! -e $ici/acedata/pFamilyDesc.ace) then
  echo 'Missing ici/acedata/pFamilyDesc.ace'
else
  if (! -e a5.pFamilyDesc.ace) then
    echo 'parsing a5.pFamilyDesc.ace'
    cp $ici/acedata/pFamilyDesc.ace a5.pFamilyDesc.ace
    cat $ici/acedata/go.obo.ace | gzip > a5.ontology.ace.gz
    $tacembly . <<EOF
      pparse $ici/acedata/pFamilyDesc.ace
      pparse $ici/acedata/go.obo.ace
      save
      quit
EOF
  endif
endif

# Import the full list of relevant GeneId from gene2refseq
#   1       2     3     4  5  6   7    8       9     10 11  12
# tax_id GeneID status NM gi NP gi_np chrom chrom_gi g1 g2 gstrand

# NB 2006/03/28 Gene now supports    'AND alive'

if (! -e a5.gene2refseq.done) then
  if (-e gene2refseq.gz) then
    wget "$GFTP/gene2refseq.gz"
  endif
  if (-e gene2refseq.gz) then
    zcat gene2refseq.gz | gawk -F '\t' '{if($1==taxon)print;}' taxon=$taxon > a5.gene2refseq.txt
    cat a5.gene2refseq.txt | gawk -F '\t' '{if ($4 != "-") printf("%s\t%s\n",$2,$4);}'  | sort -k 1,1n | sort -u > a5.geneid2refseq.txt
    cat  a5.geneid2refseq.txt | gawk '{ if(NF == 2) printf("GeneId %s\nNM_id %s\n\n",$1,$2);}' > a5.geneid2nm_id.ace
    echo 'pparse a5.geneid2nm_id.ace'  | $tacembly .   
    echo 'awking a5.gene2refseq.txt'
    # a5.geneidList.ace: current list of all human GeneId
    gawk -F '\t' '{printf ("GeneId %s\n\n",$2);}' a5.gene2refseq.txt   >! a5.geneidList.ace  
    # gawk -F '\t' "/$ref_pmd/"'{printf ("GeneId %s\nNM_id %s\nNP_id %s\n\n",$2,$4,$6);}' a5.gene2refseq.txt   >! a5.geneid2nm2np.ace
    # echo 'pparse a5.geneid2nm2np.ace'  | $tacembly .   

    # parse
    echo 'pparse a5.geneidList.ace'  | $tacembly .  
    # a5.geneid2intmap.ace: GeneId genebox position, in NT coords, needs post processing
    gawk -F '\t' "/$ref_pmd/"'{if(substr($8,1,3)!="NC_")next;printf ("GeneId %s\n",$2);if($12 == "+")printf("IntMap %s %s %s\n",$8,$10,$11) ; if($12 == "-")printf("IntMap %s %s %s\n",$8,$11,$10) ; printf("\n");}' a5.gene2refseq.txt  >! a5.geneid2intmap.ace   

     # parse (this file seems useless)
    echo 'pparse a5.geneid2intmap.ace'  | $tacembly .   
    
    # a5.geneid2nm.ace: Supporting NM XM and NP and their status
    gawk -F '\t' '{if(substr($4,2,2) == "M_" && $3 != "NA") { s = $4 ; i = index (s, ".") ; if (i>0) s=substr(s,1,i-1) ; printf("Sequence \"%s\"\nGeneId %s\n%s_ref_seq\n\n", s, $2, $3);}}' a5.gene2refseq.txt >! a5.geneid2nm.ace    
    gawk -F '\t' '{if(substr($4,2,2) == "R_" && $3 != "NA") { s = $4 ; i = index (s, ".") ; if (i>0) s=substr(s,1,i-1) ; printf("Sequence \"%s\"\nGeneId %s\n%s_ref_seq\n\n", s, $2, $3);}}' a5.gene2refseq.txt >! a5.geneid2nmr.ace    
    gawk -F '\t' '{if(substr($6,1,3) == "NP_" && $3 != "NA") { s = $6 ; i = index (s, ".") ; if (i>0) s=substr(s,1,i-1) ; printf("GeneId \"%s\"\nProduct \"%s\"\n\n", $2, s);}}' a5.gene2refseq.txt >! a5.geneid2product.ace    
    # parse 
    echo 'pparse a5.geneid2nm.ace'  | $tacembly . 
    echo 'pparse a5.geneid2nr.ace'  | $tacembly . 
    echo 'pparse a5.geneid2product.ace'  | $tacembly . 
    touch a5.gene2refseq.done
  endif  # gene2refseq.gz
else
  echo "missing file $GFTP/gene2refseq.gz"
endif

# Import the list of pubmed ids, kill pubmed acccessing over 30 genes
# missing    1     2 
# tax_id   GeneID pmid

if (! -e a5.gene2pubmed.done) then
  if (! -e  gene2pubmed.gz) then
    wget "$GFTP/gene2pubmed.gz"
  endif
  echo ZZZZZ > ZZZZZ
  if (-e  gene2pubmed.gz) then
    zcat gene2pubmed.gz | gawk -F '\t' '{if($1==taxon) printf ("%s\t%s\n",$3,$2);}' taxon=$taxon  | sort > _x
    cat _x ZZZZZ _x | gawk '/^ZZZZZ/{zz++;next;}{if(zz<1){n[$1]++;next;}if(n[$1]<30)printf("%s\t%s\n",$2,$1);}' | sort | gawk '{if ( $1!=old ) printf ( "\nGeneId %s\n",$1 ) ; old=$1 ; printf ( "Reference pm%s\n",$2 ) ; }' | gzip  > a5.gene2pubmed.ace.gz
    echo 'pparse  a5.gene2pubmed.ace.gz'  | $tacembly .  
    touch a5.gene2pubmed.done
  endif
else
  echo "missing file $GFTP/gene2pubmed.gz"
endif

# Import the GeneId Ensembl correspondence
#   1        2     3           4     
# tax_id   GeneID Ensembl_gene Ensembl_transcript

if (! -e a5.gene2ensembl.done) then
  if (! -e  gene2ensembl.gz) then
    wget "$GFTP/gene2ensembl.gz"
  endif
  if (-e  gene2ensembl.gz) then
    zcat gene2ensembl.gz | gawk -F '\t' '/N[MR]_/{if($1==taxon) printf("GeneId %s\nEnsembl %s\n\n",$2,$3); }' taxon=$taxon | gzip > a5.gene2ensembl.ace.gz
    echo 'pparse  a5.gene2ensembl.ace.gz'  | $tacembly .  
    touch a5.gene2ensembl.done
  endif
else
  echo "missing file $GFTP/gene2ensembl.gz"
endif

# Import the gene_RIFs
#   1        2     3     4     5
# tax_id   GeneID pmid  date  geneRif

if (! -e a5.geneRifs.done) then
  if (! -e generifs_basic.gz) then
    # wget "ftp://anonymous:mieg@ftp.ncbi.nlm.nih.gov/gene/GeneRIF/generifs_basic.gz"
    wget "$GFTP/../GeneRIF/generifs_basic.gz"
  endif
  if (-e generifs_basic.gz) then
    zcat generifs_basic.gz  | gawk -F '\t' '{if ($1==taxon) print}' taxon=$taxon  -  | sed 's/\"//g' | gawk -F '\t' '{printf ("Paper pm%s\nGeneId %s\nGene_RIF \"%s\"\n\n",$3, $2, $5);}' | gzip  >! a5.geneRifs.ace.gz
    echo 'pparse  a5.geneRifs.ace.gz'  | $tacembly .  
    touch a5.geneRifs.done
  endif
else
  echo "missing file $GFTP/../GeneRIF/generifs_basic.gz"
endif

# new file ftp://ftp.ncbi.nlm.nih.gov/gene/GeneRIF/interactions.gz
# this files give sinteraction between NP proteins
if (! -e a5.interactions.done) then
  if (! -e interactions.gz) then
    # wget "ftp://anonymous:mieg@ftp.ncbi.nlm.nih.gov/gene/GeneRIF/interactions.gz"
    wget "$GFTP/../GeneRIF/interactions.gz"
  endif
  if (-e interactions.gz) then
    gunzip -c interactions.gz | gawk -F '\t' '{if ($1==taxon && $6==taxon) print}' taxon=$taxon | sed 's/\"//g' >! a5.geneRifsInteractions.txt

    gawk -F '\t' '{if($2 != "-" && $7 != "-") printf ("GeneId %s\nwith_geneid %s  \"pm%s\" \"%s:%s\"\n\n", $2, $7, $14, $18, $17);}'  a5.geneRifsInteractions.txt > ! a5.geneRifsInteractions.ace
    gawk -F '\t' '{if($2 != "-" && $7 != "-") printf ("GeneId %s\nwith_geneid %s  \"pm%s\" \"%s:%s\"\n\n", $7, $2, $14, $18, $17);}'  a5.geneRifsInteractions.txt >> a5.geneRifsInteractions.ace

    echo 'pparse   a5.geneRifsInteractions.ace'  | $tacembly .  
    touch a5.interactions.done
  endif
else
  echo "missing file $GTFP/../GeneRIF/interactions.gz"
endif

# Import the gene_info
#   1        2     3        4       5        6      7    8    9
# tax_id   GeneID symbol locustag synonyms dbXref chrom map title
# Hugo name may now be in col 6  # 2006/03/28

if (! -e a5.gene_info.done) then
  cat <<EOF >!  a5.gene_info.awk
{ if (\$1 != taxon) next;
  printf ("GeneId %s\n", \$2) ;
  if (\$3 != "-") printf ("LocusLink \"%s\"\n",\$3);
  if (\$4 != "-") printf ("Locus  \"%s\"\n",\$4);
  if (\$5 != "-") {
    s = \$5;
    for (;;)
      {
        i=index(s,"|");
        if(i>0)
           { printf ("Synonym \"%s\"\n",substr(s,1,i-1)); s=substr(s,i+1); } 
        else
           {break;}
      } 
     printf ("Synonym \"%s\"\n", s);
  }
  if (\$6 != "-") {
    s = \$6;
    for (;s;)
      {
        i=index(s,"|");
        if(i>0)
          { t = substr(s,1,i-1) ; s=substr(s,i+1); } 
        else
          { t = s ; s = 0 ;}
        if (substr(t,1,8)=="LocusID:")
          continue ;
        if (substr(t,1,7)=="GeneID:")
          continue ;
        if (substr(t,1,4)=="MIM:") 
          printf ("Extern \"OMIM_%s\"\n", substr (t,5)) ;
        else if (substr(t,1,5)=="TAIR:") 
          printf ("Extern \"%s\"\n", t) ;
        else
          printf ("! dbXref %s\n", t) ;
      } 
  }
  if (\$7 != "-") if (index(\$7,"|") < 1) printf ("Map \"%s\"\n",\$7);
  if (\$8 != "-") printf ("Cytogenetic \"%s\"\n",\$8);
  if (\$9 != "-") printf ("Title \"%s\"\n",\$9);
  printf ("\n") ;
}
EOF

  if (! -e  gene_info.gz) then
    wget "$GFTP/gene_info.gz"
  endif
  if (-e  gene_info.gz) then
    gunzip -c gene_info.gz | gawk -F '\t' -f a5.gene_info.awk taxon=$taxon  | gzip >! a5.gene_info.ace.gz
    echo 'pparse  a5.gene_info.ace.gz'  | $tacembly .  
    touch a5.gene_info.done
  endif # a5.gene_info.done
else
  echo "missing file $GFTP/gene_info.gz"
endif

# ATTENTION
# in ~/AW/Human_DATA we were sent by EBI, after Danielle sent an email, a list of 
# obsolete GO that we need to parse

if (! -e a5.gene2go.done) then
  if (! -e  gene2go.gz) then
    wget "$GFTP/gene2go.gz"
  endif
  if (-e  gene_info.gz) then
    gunzip -c gene2go.gz |  gawk -F '\t' '{if($1 != taxon)next;tag="";if($8=="Component")tag="Go_c_iea"; if($8=="Process")tag="Go_b_iea";if($8=="Function")tag="Go_m_iea";if($7 != "-") gsub(/_iea/,"_ace",tag); if(tag!=""){printf("geneId %s\n%s \"%s\" %s", $2, tag, $6,$4);if($7 != "-")printf(" \"%s\"",$7);printf("\n\n") ;}}' taxon=$taxon | gzip  >! a5.gene2go.ace.gz
    echo 'pparse  a5.gene2go.ace.gz'  | $tacembly .  
    touch a5.gene2go.done
  endif

  cat /home/mieg/AW/Human_DATA/20231109_obsolete_go_terms.txt | gawk '/obsolete/{printf ("GO \"%s\"\n",$1);}' > GO.obsolete.list
  $tacembly <<EOF
    key GO.obsolete.list
    edit Obsolete
    save
    quit
EOF

else
  echo "missing file $GFTP/gene2go.gz"
endif

if (! -e a5.gene_history.done) then
  if (! -e  gene_history.gz) then
    wget "$GFTP/gene_history.gz"
  endif
  if (-e  gene_history.gz) then
    zcat gene_history.gz | gawk '/^9606/{print $3}' | sort -u | gawk '{printf("Geneid %s\n",$1);}' > a5.geneid.DISCONTINUED.list 
    touch a5.gene_history.done
  endif
endif

# gene2accession.gz -> les NP lies aux geneid, on les a deja

##################
#ASN_BINARY/  README             gene2refseq.gz  
#ASN_OLD/     gene2accession.gz  
# read the new complete gene database asn dump, using xml format
# gene2xml is an ncbi tool, genexml2ace is part of ace/wacext

# 2012_06: there is a new dayly file: /am/ftp-gene/DATA/ASN_BINARY/Mammalia/Rattus_norvegicus.ags.gz
if (! -e $species.ags.gz) then
  wget "$GFTP/ASN_BINARY/Mammalia/Homo_sapiens.ags.gz"
  ln -s Homo_sapiens.ags.gz hs.ags.gz
endif
if (! -e $species.ags.gz) then
  echo "missing file hs.ags.gz"
  goto phaseLoop
endif

if (-e  $species.ags.gz && ! -e a5.$species.ace) then
 gene2xml -b -c  -i $species.ags.gz  >! a5.$species.xml
 genexml2ace <  a5.$species.xml >!  a5.$species.preace
 sed -e "s/&apos\\;/\'/g" -e 's/&quot\\;/\\\"/g' -e 's/&lt\\;/</g'  -e 's/&gt\\;/>/g' -e 's/&amp\\;/and/g' < a5.$species.preace | grep -v '""' >!  a5.$species.ace

 $tacembly . <<EOF
   pparse  a5.$species.ace | $tacembly .  
   find geneid toto // to be sure that the active list is empty
   key a5.geneid.DISCONTINUED.list 
   kill
   save
   quit
EOF
 
endif

#######################
###### OMIM
# the 
# Download omim from the ftp site and analyze
# omim2gid
# omim.txt.Z

if ($species != hs) touch  a5.omim.done


# Read OMIM from the web 
# current address http://www.omim.org/entry/100070

if (! -e a5.omim.done)  then

  #wget 'ftp://anonymous:mieg%40ncbi.nlm.nih.gov@ftp.omim.org/OMIM/omim.txt.Z'
  wget 'https://omim.org/static/omim/data/mim2gene.txt'
  wget "$GFTP/mim2gene_medgen'
  \mv mim2gene.txt  a5.mim2gene.txt
  \mv mim2gene_medgen a5.mim2gene_medgen
  cat a5.mim2gene.txt | gawk -F '\t' '/^#/{next;}{if (index($2,"moved")>0)next; omim=$1 ; gid=$3;if (gid+0 < 1) next ; if ($2=="gene" || index($2,"pheno") > 0) type = "OMIM_molecular" ; else type = "OMIM_disease"; printf ("Extern OMIM_%s\n%s\nGeneId %s\n\n",omim,type,gid);}' > a5.mim2gene.ace
  cat a5.mim2gene_medgen | gawk -F '\t' '/^#/{next;}/phenotype/{next;}{omim=$1 ; gid=$2;if (gid+0 < 1) next ; printf ("GeneId %s\nExtern OMIM_%s\n\n",gid,omim);}' > a5.mim2gene_medgen.ace
  cat a5.mim2gene_medgen | gawk -F '\t' '/^#/{next;}/phenotype/{omim=$1 ; gid=$2;if (gid+0 < 1) next ; printf ("GeneId %s\nExtern OMIM_disease_%s\n\n",gid,omim);}' > a5.mim2gene_medgen.ace
  cat a5.mim2gene_medgen | gawk -F '\t' '/^#/{next;}/phenotype/{gid=$2;if (gid+0 < 1) next ; if($5=="-")next; printf ("GeneId %s\nExtern MEDGEN_%s\n\n",gid,$5);}' >> a5.mim2gene_medgen.ace

  echo " Read OMIM from the web"
  if (! -e a5.omim.list) then 
    $tacembly . <<EOF
      pparse  a5.mim2gene.ace
      pparse  a5.mim2gene_medgen.ace
      save
      quit
EOF
  endif
  if (0) then
    # It is forbidden to download in a loop from omim.org, this prevents any further NLM access to OMIM
    #    $omim2ace -list a5.omim.list >! a5.omim.preace
    # cat a5.omim.preace | gawk '/^Extern/{isD=0;}/OMIM_unkown/{i=index($0,"font>><font class=");k=substr($0,i+24,1);if(k==2 || k==3 || k==5){isD=1;printf("OMIM_disease\n");} else printf("OMIM_molecular\n");next}{s = $0 "<>" ; s1="";if(isD==1)gsub(/^Properties/,"OMIM_alias",s);while (1) {i=index(s,"<");if(i>0)j=index(s,">");if(i<1){print s1 ;next;} if (i>1){s1= s1 substr(s,1,i-1);} s=substr(s,j+1);}}'  > a5.omim.ace

    $tacembly . <<EOF
      pparse a5.omim.ace
      save
      quit
EOF
    touch a5.omim.done
  endif
endif

if (-e a5.gene2refseq.done && ! -e a5.sequence2gid.done) then
  echo "a5:sequence2gid"
  $tacembly . <<EOF
    query find locuslink NA
    kill
    query find sequence geneid
    list -a -f  a5.sequence2gid.list
    find extern
    show -a -f a5.extern.ace
    query find geneid intmap
    show -a -f a5.geneid2intmap2.ace IntMap
    edit -D IntMap
    save
    query find model
    list -a -f a5.sequence2gid.done
    quit
EOF
endif 

# 2023_11_09  Maybe we no longer need the details of the biblio
goto phaseLoop

## here we should play with the Biblio
## and run getpm and pm2ace as done in phase GenbankInfo
if (! -d BIBLIO) then
  cvs checkout IMPORT_DATA/BIBLIO/PmImport
  mv IMPORT_DATA/BIBLIO .
endif

### get paper from previous locuslink info

if (! -d $ici/PREVIOUS) then
  echo "please create a link to PREVIOUS"
  pwd
  exit 1
endif

if (-d $ici/PREVIOUS/LocusLinkInfo && ! -e a5.biblio.previous.done) then
  $tacembly $ici/PREVIOUS/LocusLinkInfo  <<EOF
    query find paper
    spush
    follow abstract
    sor
    spop
    show -a -f  a5.biblio.previous.ace
    quit
EOF
  touch a5.biblio.previous.done
endif
 # a5.biblio.previous.done

if (-e a5.biblio.previous.done && ! -e a5.pmnocit.done) then
  $tacembly . <<EOF
    pparse a5.biblio.previous.ace  
    pparse a5.pmnocit.ace.2014_10_29
    save
    query find paper IS pm* AND NOT citation
    list -a -f a5.pmnocit.list
    quit
EOF

split -l 6000  a5.pmnocit.list
setenv MAGIC a5.$species
foreach ff (`ls x*`)
  if (! -e a5.pmnocit.$ff.gb) then
    submit "a5.pmnocit.$ff" "perl BIBLIO/PmImport/medlineGet.pl < $ff > a5.pmnocit.$ff.gb" 
  endif
end
qwait 10

foreach ff (`ls a5.pmnocit.x*.gb`)
  echo -n "$ff "
  date
  perl BIBLIO/PmImport/medline2ace.pl < $ff > $ff.ace
end
cat a5.pmnocit.x*.ace >  a5.pmnocit.ace

  $tacembly . <<EOF
    query find paper ! citation
    pparse  a5.pmnocit.ace
    query find paper ! citation
    save
    quit
EOF

  touch a5.pmnocit.done
endif # a5.pmnocit.done
exit 0

if (! -e a5.active_nx_mr.list) then
  $tacembly . <<EOF
    query find geneid sequence 
    list -a -f  a5.active_geneid.list
    follow sequence 
    list -a -f  a5.active_nx_mr.list
    quit
EOF
endif

cd $ici

echo -n 'End of phase a5 '
date

goto phaseLoop

###########################################################
## Read the NCBI models
## completely modified august 2016
## we rely now on the gff3 file of NCBI as downloaded in the MAGIC script
## and export the data in the XmInfo directory by chromosome

phasea6:

echo -n 'Start of phase a6 XmInfo obsolete '
date
goto phaseLoop
cd $ici

# 2019_03 i think we want to rely enterely on the MAGIC  TARGET and keep the NC names
goto phaseLoop


if (! -d XmInfo) then
  mkdir XmInfo

  zcat TARGET/GTF/$species.RefSeq.gff.gz | gawk -F '\t' '{out= "XmInfo/" $1 ".gff" ; print > out}' 
  pushd XmInfo
  echo 'mv mito.gff chrMT' > _m
  foreach chrom ($chromSetAll)
    if (! -d $chrom) mkdir $chrom
    ls *.gff | gawk '{z=$1 ; gsub ( ".gff","",z ) ; k=length(chrom);x=substr($1,k+1,1);if (substr($1,1,k)==chrom && (z == chrom || x == "." || x == "_" || x == "U")) printf("mv %s %s\n",$1,chrom);}' chrom=$chrom >> _m
  end

  source _m

  foreach chrom ($chromSetAll)
    pushd $chrom
    cat *.gff > toto
    dna2dna -gff3 toto  -o $species.RefSeq.$chrom -O fasta -gzo -gtfGenome $ici/TARGET/CHROMS/$species.chrom_$chrom.fasta.gz -gtfRemap KT_RefSeq
    popd
  end
  popd
endif

echo -n 'End of phase a6: '
date

goto phaseLoop


### mito, does not work, do it by hand :: NC_012920
seqfetch   -g 251831106 -t 5 | gawk '/^>/{n++;if(n==2)exit;printf(">mito %s\n",substr($1,2));next;}{gsub(/N/,"A",$1);print}' > mito.fasta.clean

seqfetch   -g 251831106 -t 4 > mito.gb
seqfetch   -g 251831106 -t 3 > mito.gb
perl ../GenbankInfo/GbNm/genbank_import.pl mito.gb > mito.preace  

echo 'Sequence mito\nGenetic_code \"Vertebrate Mitochondrial\"\nGenomic\nSource c_mito' > mito.ace
cat mito.gb | gawk  '/^LOCUS/{printf("IntMap mito 1 %d\n",$3);}' >> mito.ace
cat mito.preace   | gawk  '/^Imported/{print}/^Title/{print}/^Database/{print}/^Species/{print}/^Reference pm/{print}/^Tissue/{print;print "\n"; exit;}' >> mito.ace

# D-loop by hand
cat mito.gb | grep 'D-loop'

echo "Sequence mito" >>  mito.ace
echo "Subsequence D-loop.A 1 576\nSubsequence D-loop.2 16024 16569" >> mito.ace

cat mito.gb | gawk -F '\t' '/gene|tRNA|note/{print}' > mito2gene.txt
cat mito2gene.txt | gawk '{type=0;if($1=="gene" || $1=="tRNA" || $1=="rRNA"){z=$2;isUp=0;if(substr(z,1,4)=="comp")isUp=1;gsub(/complement\(/,"",z);gsub(/\)/,"",z);i=index(z,"..");a1=0+substr(z,1,i-1);a2=0+substr(z,i+2);da=a2-a1+1;if(isUp>0){a0=a1;a1=a2;a2=a0;}printf("XX\t%d\t%d\t%d\n", a1,a2,da);next;}}/\/gene=/{i=index($1,"=");printf("Gene\t%s\n",substr($1,i+1));next;}/\/product=/{i=index($1,"=");printf("tRNA\t%s\n",substr($1,i+1));next;}/Provided/{gsub(/\"/,"",$0);i=index($0,"| Provided");z=substr($0,1,i-1);printf("Title\t%s\n",z);}' >  mito2gene.txt2
cat mito2gene.txt2 | gawk '/^XX/{a1=$2;a2=$3;next;}/^Gene/{gsub(/\"/,"",$0);printf("Subsequence _%s %d %d\n",$2,a1,a2);}' >>   mito.ace
cat mito2gene.txt2 | gawk '/^XX/{a1=$2;a2=$3;da=$4;}/^Gene/{gsub(/\"/,"",$0);printf("\nSequence _%s\nIs_predicted_gene\nSource_exons 1 %d\nIntMap mito %d %d\nMethod genefinder\nCDS\n", $2,da,a1,a2);if(index($2,"RNR")>0)printf("-D CDS\nMethod rRNA\n");}/tRNA/{printf("-D CDS\ntRNA\nMethod tRNA\n");gsub(/\"/,"",$0);printf("Title \"%s\"\n",substr($0,6));}' >> mito.ace


cat mito2gene.txt  | gawk -F '\t' '/tRNA/{n++;printf("%d\t%s\n",n, $1}'

cat mito.gb | grep 'D-loop'
echo 'Subsequence _D-loop'


goto phaseLoop

#### Analyse the EBI gtf file
#### see MAGIC script (2016_08)
## shadow of the ns genes on the genome
# /panfs/pan1.be-md.ncbi.nlm.nih.gov/aceview03/zoo/human/SEQC_2013/TARGET/MRNAS/human.Ensembl_encode.2013_01.Homo_sapiens.GRCh37.70.gtf.gz
set ff=human.Ensembl_encode.2013_01.Homo_sapiens.GRCh37.70.gtf.gz 
set ff=/home/mieg/ftp-SEQC/SEQC_Reference_Targets/human.AceView.2010.selected.v3.gtf.gz

zcat $ff  ZZZZZ.gz | gawk -F '\t'  '/^GL/{next}/^H/{next;}/exon/{printf("%s\t%09d\t%09d\n",$1,$4,$5);}' | sort | gawk -F '\t' '{ch=$1;a1=$2;a2=$3;if(a1>b2+1 || ch != old){if(old)printf("%s\t%09d\t%09d\n",old,b1,b2);b1=a1;b2=a2;old=ch;}if(b2<a2)b2=a2;if(b1==0)b1=a1;}' > toto.ns_exons 
cat toto.ns_exons | gawk -F '\t' '{n++;n1+=$3-$2+1;}END{print n,n1}'

set ff=~/37_5/TARGET/MRNAS/RefSeq.pg_mapview.jan2013.pgfeet.txt
cat $ff | gawk -F '\t' '{ch=$2;a1=$4;a2=$5;x1=$6;x2=$7;if(a1<a2){b1=a1+x1-1;b2=a1+x2-1;}else{b2=a1-x1+1;b1=a1-x2+1;}printf("%s\t%09d\t%09d\n",ch,b1,b2);}' | sort | gawk -F '\t' '{ch=$1;a1=$2;a2=$3;if(a1>b2+1 || ch != old){if(old)printf("%s\t%09d\t%09d\n",old,b1,b2);b1=a1;b2=a2;old=ch;}if(b2<a2)b2=a2;if(b1==0)b1=a1;}' > toto.ns_exons 
cat toto.ns_exons | gawk -F '\t' '{n++;n1+=$3-$2+1;}END{print n,n1}'


############################################################
## Prepare the data from Kent
phasea8a:
mkdir KentInfo
cd KentInfo
ftp -n hgdownload.cse.ucsc.edu  <<EOF
  anonymous 
  mieg@ncbi.nlm.nih.gov
  cd goldenPath/$UCSC_GENOME/database/    # hg18==ncbi_36   mm6
  bin
  get all_mrna.txt.gz
  get all_est.txt.gz
  get refGene.txt.gz  #  may be not in this directory
  cd ../../../bigZips/...
  get chromFa.tar.gz  #  may be not in this directory
  quit
EOF
exit
phasea8b:
echo -n 'Start of phase a8b '
date

if (! -d $ici/KentInfo) then
    echo 'construct KentInfo database'
    mkdir $ici/KentInfo
endif

cd $ici/KentInfo

foreach  chrom ($chromSet)
  if ($chrom == "Y" && ! -e a8.kent.done) then
    if (-e all_mrna.txt.gz ) gunzip all_mrna.txt.gz
    if (-e all_est.txt.gz ) gunzip all_est.txt.gz
    gawk '{printf("Sequence \"%s\"\nIs_read\nKentHit\n\n", $11);}' all_mrna.txt > ! a8.all_mrna.kenthit.ace
    touch a8.kent.done
  endif
  if (! -e a8.kent.$chrom.txt && -e a8.kent.done) then
    echo -n "Phase a8: chromosome $chrom "
    date
    gawk -f $ici/bin/a8.kent2ace.awk chr=$chrom all_mrna.txt  >!  a8.kent.$chrom.txt
    gawk -f $ici/bin/a8.kent2ace.awk chr=$chrom all_est.txt  >>  a8.kent.$chrom.txt
  endif # a8.kent.$chrom.txt
end

if (-e FLOCUS.gz) then
  if (! -e  hinv.est2cluster.ace) then
    gunzip -c FLOCUS.gz | gawk '/^CLUSTER_CLUSTER-ID:/ {g=$2;next}/^CLUSTER_REP-ACCESSION-NO/{printf("Sequence %s\nHINV_cluster_id %s\n\n",$2,g);}'  >! hinv.est2cluster.ace
  endif
else
  echo 'download HINV clusters http://www.h-invitational.jp/hinv/dataset/download.cgi'
  echo 'in "annotation data sets" as flat-file '
  echo 'file SET of all H-Inv clusters (Flat File) -> FLOCUS.gz (34 Mb oct 2007)'
endif


####
## RefSeq vu par UCSC 
  gunzip -c chromFa.tar.gz | tar xf -
  foreach chrom (`ls -d ? ??`)
    cat $chrom/*.fa > toto
    dna2dna -refGene refGene.txt.gz -i toto -O fasta -maxLineLn 50 > refGene.$chrom.fasta
  end



cd $ici

echo -n 'End of phase a8 '
date

goto phaseLoop


############################################################
############################################################
############################################################
# i create a db with the global sequence of each chromosome

if ($species == banana && ! -d BacInfo) then
  mkdir BacInfo
  pushd BacInfo
  foreach chrom ($chromSetAll)
    # ln -s ../TARGET/CHROMS/Bn.chrom_$chrom.fasta.gz a4.NT.$chrom.fasta.gz
    # ln -s ../TARGET/CHROMS/chr$chrom.fasta.gz
  end
  popd
endif

phase1:
echo -n 'Start of phase 1 '
date
echo -n "pwd="
pwd

if (! -d tmp)   mkdir tmp
if (! -e tmp/acedata) then
  cd tmp
  ln -s ../acedata
  cd ..
endif
# a stupid hack for machine which do not have tcsh on the farm
pushd bin
  if (! -e tcsh) ln -s /bin/tcsh
  if (! -e time) cp /usr/bin/time .
popd

foreach  chrom ($chromSet)
echo -n "Phase 1: chromosome $chrom "
date

set species_chrom=$species
if (-e TARGET/CHROMS/$species_kantor.chrom_$chrom.fasta.gz) set species_chrom=$species_kantor
if (! -e TARGET/CHROMS/$species_chrom.chrom_$chrom.fasta.gz) then 
 echo Missing file TARGET/CHROMS/$species_chrom.chrom_$chrom.fasta.gz
 exit 1
endif

if ! (-d  $ici/tmp/CH$chrom) then
 mkdir $ici/tmp/CH$chrom
 cd  $ici/tmp/CH$chrom
 mkdir database
 ln -s ../acedata/wspec 
 ln -s ../acedata/wgf
 ln -s ../acedata/whelp
 $tacembly . <<EOF
y
   pparse ../acedata/methods.ace
   save
   quit
EOF

 cd $ici
endif


if (! -e $ici/tmp/CH$chrom/p1.done) then 
  cd $ici/tmp/CH$chrom
  $tacembly . <<EOF
    pparse $ici/TARGET/CHROMS/$species_chrom.chrom_$chrom.fasta.gz
    find sequence 
    edit YBR_contig
    list -a -f p1.ref_assembly.list
    show -a -f p1.dnalength.ace DNA
    // pparse BacInfo/a4.NT.$chrom.ace  // scaffold of NT contigs into full chromosomes
    save
    quit
EOF

  gawk -f $ici/bin/c_length.awk p1.dnalength.ace >  p1.c_length.ace
  touch p1.done
  cd $ici
  endif 
end

if (! -e  tmp/CH$chrom/p1.genetic_code.ace) then
  set genetic_code=Standard

  # plants use the  standard genetic code even for mito and chloroplast
  if ($chrom == chrMT || $chrom == chrM || $chrom == mito) then
    if ($species_kantor == droso || $species_kantor == worm) set genetic_code="Invertebrate Mitochondrial"
    else if ($species_kantor == ara) set genetic_code=Standard
    else set genetic_code="Vertebrate Mitochondrial"
  endif
  echo echo "Sequence $chrom\ngenetic_code "'"'$genetic_code'"'"\n\n" > tmp/CH$chrom/p1.genetic_code.ace
endif

echo -n 'End of phase 1 '
date

goto phaseLoop

############################################################
# i create a regular tilings, t_
# and i transfer the dna into the t tiling
# the contigs themselves are now called c_*

phase2:

echo -n 'Start of phase 2 '
date


foreach  chrom ($chromSet)

echo -n "Phase 2: chromosome $chrom "
date

if (-e tmp/CH$chrom/p1.done && ! -e tmp/CH$chrom/p2.done) then
  pushd tmp/CH$chrom

  $tacembly . << EOF
    query find sequence DNA
    kstore ss
    acem
      make_subseq -dna c t$chrom 600000 10000 // this breaks my 6 contigs into tiles
      quit                    // oct 15 2001, i changed from 400 kb to 600 kb
    kget ss
    Follow DNA
    kill 
    query find sequence YBR_contig  AND ! IS chr* // c_NT_sequences 
    kill
    query find sequence genomic
    edit Is_Cosmid
    follow source
    edit  YBR_contig  // c_NT_sequences 
    show -a -f p2.walls.ace
    save
    quit
EOF
  touch p2.done
  popd
  endif
end
echo -n 'End of phase 2 '
date

goto phaseLoop


############################################################
# create a gs tiling 

phase3:

echo -n 'Start of phase 3 '
date

foreach  chrom ($chromSet)

  if (-e tmp/CH$chrom/p2.done && ! -e tmp/CH$chrom/p3.done) then
    # create a gs tiling respecting walls
    pushd tmp/CH$chrom
    perl $ici/bin/gstile.pl -c $chrom -w p2.walls.ace -l 600000 -o 10000 >! p3.gstiling.ace
    $tacembly . << END
      pparse p3.gstiling.ace
      query find sequence YBR_contig AND Bad_quality
      show -a -f bad.contigs.ace
      query find sequence gs_tiling
      edit genomic
      save
      quit
END
    $gene2chrom -any -gs -i . >! p3.g2c.gsi.ace
    $tacembly . << EOF
      pparse p3.g2c.gsi.ace
      query find sequence gs_*
      edit GS_tiling
      save
      quit
EOF

    touch p3.done
    popd
  endif # -e p3.done

end
echo -n 'End of phase 3 '
date

goto phaseLoop

############################################################
## Phase4: export the genome

phase4:
echo -n 'Start of phase 4 '
date

cd $ici
if (! -d CHROMS) mkdir CHROMS
foreach  chrom ($chromSet)
  if (-e tmp/CH$chrom/p3.done && ! -e tmp/CH$chrom/p4.done) then
  echo -n "Phase 4: chromosome $chrom "
  date
  pushd tmp/CH$chrom
    $tacembly . <<EOF
      query find sequence ybr_contig
      follow source
      dna $species.chrom_$chrom.fasta 
      query find sequence YBR_contig
      spush
      follow subsequence
      sor
      spop
      show -a -f dumpgenomic.ace
      query find sequence gs_tiling
      dna  dumpgenomicdna.ace
    quit
EOF
  touch p4.done
  popd
  endif
end
echo -n 'End of phase 4 '
date

goto phaseLoop

phase5:
goto phaseLoop

############################################################
## Prepare acembly S_ database, read the genome data

phase6:
echo -n 'Start of phase 6 '
date

# variables used by clipalign
setenv minAli 50
setenv minEntropy 20
setenv minFastqQuality 0
setenv overhangLength 8
setenv markInfos `ls -d EstMarkInfo* | gawk '{printf(" %s ", substr($1,12));}'`

# at the end of bin/6a.*.tcsh we could possibly work genome wide, and move directly to phase 9 2012_06_24 (not yet written)
if (0) then
  foreach mark ($markInfos)
    clipalign -t   gs.genome.dna -i $ici/EstMarkInfo$mark/est.dna -minEntropy $minEntropy -minAli $minAli -splice -clipPolyA -seedOffset 1 -seedShift 5 -overhangLength $overhangLength -o PHITS/est.$mark  -gzo
  end
endif

foreach  chrom ($chromSet)
  echo -n "Phase 6a: chromosome $chrom "
  date
  cd $ici
  if (! -d tmp/CH$chrom/ACE) mkdir tmp/CH$chrom/ACE

  if (! -e tmp/CH$chrom/6a.section.list) then
    $tacembly tmp/CH$chrom <<EOF > /dev/null
      Find section
      List -a -f tmp/CH$chrom/6a.section.prelist
      Quit
EOF
    gawk -f bin/6a.section.list.awk tmp/CH$chrom/6a.section.prelist >! tmp/CH$chrom/6a.section.list
   endif
    
  foreach mark ($markInfos)
    if (! -e EstMarkInfo$mark/split.done) then
      if (-e EstMarkInfo$mark/est.dna && ! -e EstMarkInfo$mark/est.dna.gz) gzip  EstMarkInfo$mark/est.dna
      dna2dna -I fasta -O fasta -i  EstMarkInfo$mark/est.dna.gz  -gzo -o EstMarkInfo$mark/dna.split  -count -split 1000000  -splitMb 200
      touch  EstMarkInfo$mark/split.done
    endif
  end

  foreach gs (`cat tmp/CH$chrom/6a.section.list`)
    #echo "$MyHost$ici/tmp/CH$chrom/ACE/$gs/bac.liste###" ; exit 1
    if (! -d  tmp/CH$chrom/ACE/$gs)   mkdir tmp/CH$chrom/ACE/$gs
    scripts/submit  tmp/CH$chrom/ACE/$gs/6a "bin/p6a.construct_sections.tcsh $chrom $gs"
  end      # loop on fragments
  cd $ici
end      # loop on chromosomes

echo -n 'End of phase 6 '
date

goto phaseLoop

############################################################
## Set global chromosome coordinates
phase6b:
goto phaseLoop
# 6b is now integrated in bin/6a.construct_sections.tcsh

phase7:
goto phaseLoop
# integrated in bin/6a*.tcsh

phase8a:
goto phaseLoop
# integrated in bin/6a*.tcsh

phase8c:
goto phaseLoop
# integrated in bin/6a*.tcsh

phase8d:
goto phaseLoop
# integrated in bin/6a*.tcsh

############################################################
## run acembly
# some jobs seem to fail simply because they compete on the farm for the memory
# the following command can be used to relaunch just the failed jobs
# grep FATAL CH*/ACE/S_*/9d.bly.log | gawk '{tt=$1; gsub(/\.log:\/\//,"*",tt) ; printf ("\\rm %s\n",tt);}' >! _relaunch
# source _relaunch
# BBLY 9 all

phase9a:
set justAlign=1
echo -n 'Start of phase 9a: just align ests '
goto phase9ad
phase9d:
set justAlign=0
echo -n 'Start of phase 9d: construct genes '
phase9ad:

date


# bin/clipalign -t TARGET/Targets/$species.mito.fasta.gz -wordFrequencyConstructTable $wordFrequency -wfSize 15

foreach  chrom ($chromSet)
  echo -n "Phase 9: chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom
  foreach gs (`cat 6a.section.list`)
    cd $ici/tmp/CH$chrom/ACE/$gs
# echo hello $gs  justAlign=$justAlign
# ls -ls  8d.g2cgsi.done database/lock.wrm 9d.bly.log
    if ((-e 8a.phits2ace.done || -e 8d.g2cgsi.done) && -d database  && ! -e database/lock.wrm  && ( ($justAlign == 0 && ! -e 9d.bly.log) || ($justAlign == 1 && ! -e 9a.blyalign.log))) then
# echo hello2 $gs
      if (-e d2.dump.ace) \rm d2.dump.ace
      if ($justAlign == 1 && -e r10c.collect.0.done) \rm r10c.collect.*.done
      if ($justAlign == 1 && -e 9ba.est2gene.txt) \rm 9ba.est2gene.*
      if ($justAlign == 1 && -e 9c.est.ali.0.gz) \rm 9c.est.ali.*.gz 9c.est.bestali.ace.gz
      if ($justAlign == 1 && -e r10c.recollect.log) \rm r10c.recollect.*
      if ($justAlign == 1 && -e 10.reverse.log) \rm 10.reverse.*
	if (-e 10.reverse.log) \rm  10.reverse.log
        if ($justAlign == 0) then
         if  (! -e 9d.bly.submit && -e 9c.recollect.done) then
           set BSUB=2
           set toto="bin/BrunAcembly $ici $tacembly1 $chrom $gs 0"
           echo "$toto" > 9d.bly.submit
           pushd $ici
             set out=tmp/CH$chrom/ACE/$gs/9d.bly.$$
             scripts/submit $out "$toto" $isLocal
           popd
         endif
        else   #($justAlign == 1)
         ls -ls  8a.phits2ace.done 
         if  (! -e 9a.blyalign.submit && (-e 8a.phits2ace.done || -e 8d.g2cgsi.done)) then
           set BSUB=2
           touch 9a.blyalign.submit
	   pushd $ici
             set toto="bin/BrunAcembly $ici $tacembly1 $chrom $gs $justAlign"
             set out = tmp/CH$chrom/ACE/$gs/9a.blyalign.$justAlign
             echo "scripts/submit $out "$toto" $isLocal"
             scripts/submit $out "$toto" $isLocal
           popd
         endif
        endif
    endif   # est.ace
  end 
  cd $ici
end      #  chrom

echo -n 'End of phase 9 '
date

goto phaseLoop

############################################################
## 9ac clean up the disk

phase9ac:

echo -n 'Start of phase 9ac '
date
goto phaseLoop


foreach  chrom ($chromSet)
  echo -n "Phase 9ac: remove unneeded ESTs "
  date
  cd $ici/tmp/CH$chrom/ACE
  foreach gs (`ls -d S_*`)
    pushd $gs
    if (-e 9a.blyalign.log && ! -e 9ac.done) then
      mkdir dumpdir
      $tacembly . <<EOF
        query find est from_cosmid
        spush
        follow cdna_clone
        sor
        find est
        spush
        find cdna_clone
        sor
        spop
        swap
        sminus
        spop
        spush
        follow dna
        sor
        spop
        kill
        dump -s dumpdir
        quit // no save   
EOF
      \rm -rf database
      cd dumpdir
      mkdir database
      ln -s ../wspec
      echo 'y' | $tacembly .
      echo >! _r
      foreach ff (`ls *.ace`)
        echo "pparse $ff" >> _r
      end
      echo 'save' >> _r
      echo 'quit' >> _r
      $tacembly . < _r
      mv database ..
      cd ..
      \rm -rf dumpdir
    endif
    touch 9ac.done
    popd
  end      # foreach gs
  cd $ici
end      # foreach  chrom

echo -n 'End of phase 9ac '
date

goto phaseLoop

############################################################
## consolidate, export prealignment quality

phase9ba:

echo -n 'Start of phase 9ba '
date


foreach  chrom ($chromSet)
  echo -n "Phase 9b: gene quality $chrom "
  date

  foreach dd (`ls -d tmp/CH$chrom/ACE/S*`)
    set section=`echo $dd | gawk '{split ($1,aa,"/ACE/");print aa[2];}'`
    if ( -e $dd/9a.blyalign.log && ! -e $dd/9ba.est2gene.txt) then 
      foreach ii (0 1 2 3 4 5 6 7 8 9)
        if (-e $dd/9ba.est2gene.$ii.ace) \rm $dd/9ba.est2gene.$ii.ace 
        if (-e $dd/collect.$ii.done) \rm $dd/collect.$ii.done
      end  
      if (-e $dd/collect.done) \rm $dd/collect.done
      $tacembly $dd <<EOF
        query find sequence cdna_clone && dna && ! is_read && ! is_buried_under
        edit is_read
        table -o $dd/9ba.est2gene.pretxt -f $ici/tables/9ba.est2gene.def
        quit
EOF
      mv  $dd/9ba.est2gene.pretxt  $dd/9ba.est2gene.txt
    endif # est2gene.txt
    foreach ii2 (0 1 2 3 4 5 6 7 8 9 10)

      # old method, prealign with tacembly  -e1
        if (-e $dd/9a.blyalign.log && ! -e $dd/9ba.est2gene.$ii2.ace) then 
          cat  $dd/9ba.est2gene.txt | gawk '/^\"/{jj=length(db1); db2 =substr(db, jj+1) ; est=$1; k=length(est) ; cc=substr(est,k-1,1) ; cc1=0+index("0123456789",cc) ; if ((ii == 10 && cc1 > 0) || (ii != 10 && ii != cc)) next ; if ($3 > 0) printf("Sequence %s\nFrom_cosmid %s %d %d %d %d %d %d %d %d %d %s \n\n", $1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, db2);}' db1=tmp/CH$chrom/ACE/ db=$dd ii=$ii2 >! $dd/9ba.est2gene.$ii2.preace
          mv $dd/9ba.est2gene.$ii2.preace $dd/9ba.est2gene.$ii2.ace
        endif


     # new method prealign with clipalign
     
        # ls -ls $dd/PHITS/est.1.hits.gz  $dd/9ba.est2gene.$ii2.ace
        if (1 && -e $dd/PHITS/est.1.hits.gz && ! -e $dd/9ba.est2gene.$ii2.ace) then 
           gunzip -c  $dd/PHITS/est.*.hits.gz | gawk -F '\t' '/^#/{next}{est=$1;n=length(est);if(n<2)next;est=substr(est,1,n-1);cc=substr(est,n-1,1) ; cc1=0+index("0123456789",cc) ; if ((ii == 10 && cc1 > 0) || (ii != 10 && ii != cc)) next ; score=$2;gs=substr($11,1);ali=$5;x1=$6;x2=$7;a1=$12;a2=$13;printf ("Sequence \"%s\"\nFrom_cosmid \"%s\" %d %d %d %d %d %d %d %d %d %s\n\n", est,gs,a1,a2,x1,x2,ali,toAli,3,3,score,section);}' ii=$ii2 section=$section >  $dd/9ba.est2gene.$ii2.preace
           mv $dd/9ba.est2gene.$ii2.preace $dd/9ba.est2gene.$ii2.ace
        endif

        if ( -e $dd/9ba.est2gene.$ii2.ace && ! -e  $dd/9baN.est2gene.$ii2.ace) then 
          cat  $dd/9ba.est2gene.$ii2.ace | gawk '/^Sequence/{printf("%s\t",$2);}/^From_cosmid/{for(i=2;i<=NF;i++)printf("\t%s",$i);printf("\n");}' >  $dd/9baN.est2gene.$ii2.txt
        endif
    end  # foreach ii2
  end # foreach dd
end # foreach  chrom

echo -n 'End of phase 9ba '
date

goto phaseLoop

############################################################
## read the est2gene files into GeneInfo.ii database

phase9bb:

echo -n 'Start of phase 9bb $chromSet'
date

foreach  chrom ($chromSet)
 set ii = -1
 if ($chrom == "X") set ii=0
 if ($chrom == "Y") set ii=10
 if ($chrom == "1") set ii=1
 if ($chrom == "2") set ii=2
 if ($chrom == "3") set ii=3
 if ($chrom == "4") set ii=4
 if ($chrom == "5") set ii=5
 if ($chrom == "6") set ii=6
 if ($chrom == "7") set ii=7
 if ($chrom == "8") set ii=8
 if ($chrom == "9") set ii=9

 if ($ii != -1) then
   echo -n "Phase 9bb ii=$ii"
   date
   if (! -d $ici/GeneInfo.$ii ) then
     mkdir  $ici/GeneInfo.$ii
     cd   $ici/GeneInfo.$ii
     mkdir database
     ln -s ../acedata/wspec.geneinfo wspec
     ln -s ../acedata/wgf
     ln -s ../acedata/whelp
     $tacembly . << EOF > /dev/null
y
       save
       quit
EOF
     cd $ici
   endif

   if (-e $ici/GeneInfo.$ii/mrna.ncbi.done) continue
   if (-e $ici/GeneInfo.$ii/_readall) \rm $ici/GeneInfo.$ii/_readall

   foreach dch (`ls -d $ici/tmp/CH*`)
     foreach dd (`ls -d $dch/ACE/S*`)
       if (-e $dd/9ba.est2gene.$ii.ace  & ! -e $dd/9bb.collect.$ii.done) then 
         touch  $ici/GeneInfo.$ii/_readall
         echo "pparse  -NOXREF $dd/9ba.est2gene.$ii.ace" >> $ici/GeneInfo.$ii/_readall
         touch $dd/9bb.collect.$ii
       endif
     end
   end 

   if (! -e $ici/GeneInfo.$ii/bbN) then
     foreach dch (`ls -d $ici/tmp/CH*`)
       foreach dd (`ls -d $dch/ACE/S*`)
         if (-e $dd/9baN.est2gene.$ii.txt  & ! -e $dd/9bbN.collect.$ii.done) then 
           cat  $dd/9baN.est2gene.$ii.txt | scripts/tab_sort -k 1,1 -k 10,10n >> $ici/GeneInfo.$ii/bbN
           touch $dd/9bbN.collect.$ii
         endif
       end
     end
   endif

   cat $ici/GeneInfo.$ii/bbN | scripts/tab_sort -k 1,1 -k 12,12nr  -k 13,13  | gawk -F '\t' '{if($1 != old)score = $12;if($12>=score || $12 > 100 || ($12 > 60 && 2*$12 > score)) print;old=$1;}' >  $ici/GeneInfo.$ii/bbNSF
   cat $ici/GeneInfo.$ii/bbNSF | gawk '{printf("Sequence %s\nFrom_cosmid ",$1);for(i=2;i<=NF;i++)printf(" %s ",$i);printf("\n\n");}' >  $ici/GeneInfo.$ii/bbNSF.ace
   echo "pparse  -NOXREF  $ici/GeneInfo.$ii/bbNSF.ace" > $ici/GeneInfo.$ii/_readall

   if (-e $ici/GeneInfo.$ii/_readall) then 
     touch $ici/GeneInfo.$ii/read.log 
     $tacembly  $ici/GeneInfo.$ii <  $ici/GeneInfo.$ii/_readall >> $ici/GeneInfo.$ii/read.log 
     foreach dch (`ls -d $ici/tmp/CH*`)
       foreach ff (`ls $dch/ACE/S*/9bb.collect.$ii`)
         mv $ff $ff.done
       end
     end
   endif

   if (-e  $ici/MrnaInfo/mrna.ncbi.ace && ! -e $ici/GeneInfo.$ii/mrna.ncbi.done) then
     touch GeneInfo.$ii/mrna.ncbi.log
     echo "pparse $ici/MrnaInfo/mrna.ncbi.ace" | $tacembly GeneInfo.$ii >> GeneInfo.$ii/mrna.ncbi.log
     touch $ici/GeneInfo.$ii/mrna.ncbi.done
   endif
 endif   # ii != -1
end # $chrom 

echo -n 'End of phase 9bb '
date

goto phaseLoop

############################################################
## reexport the quality of the mrna for centralization and checks

phase9bc:

echo -n 'Start of phase 9bc '
date
 
foreach  chrom ($chromSet)
 if ($chrom != "Y") goto phaseLoop
end

if ! (-d  $ici/GeneInfoMrna) then
 mkdir $ici/GeneInfoMrna
 cd  $ici/GeneInfoMrna
 mkdir database
 ln -s ../acedata/wspec 
 ln -s ../acedata/wgf
 ln -s ../acedata/whelp
 $tacembly . <<EOF
y
   pparse ../acedata/methods.ace
   save
   quit
EOF
endif

cd $ici/GeneInfoMrna
if (-e _r) \rm _r
touch _r

foreach  ii (0 1 2 3 4 5 6 7 8 9 10)
  echo -n "Phase 9bc ii=$ii "
  date
  if (-d $ici/GeneInfo.$ii ) then
    if (! -e 9bc.qual.$ii.ace) then
      $tacembly $ici/GeneInfo.$ii <<EOF
        query find sequence (IS nm* ||  ref_mrna || is_mrna) && from_cosmid
        show -a -f 9bc.qual.$ii.ace
        quit
EOF
      echo "pparse 9bc.qual.$ii.ace" >> _r
      touch  9bc.qual.$ii.ace
    endif
  else
    echo cannot find dir $ici/GeneInfo.$ii
  endif
end

cd $ici/GeneInfoMrna

if (! -e 9bc.done) then 
        #print "####$u3\n####$a\n####" ;
  echo "// pparse $ici/MrnaInfo/mrna.ncbi.ace" >> _r
  echo 'save' >> _r
  echo 'quit' >> _r
  $tacembly . < _r
  touch 9bc.done
endif # 9bc.done

cd $ici
echo -n 'End of phase 9bc '
date

goto phaseLoop

############################################################
## Collect the best alignments

phase9c:

echo -n 'Start of phase 9c: recollect best aligments '
date
 
foreach  chrom ($chromSet)
  echo -n "Phase 9c: recollect best alignments chromosome $chrom "
  date

  foreach gs (`cat tmp/CH$chrom/6a.section.list`)
    set ss=tmp/CH$chrom/ACE/$gs
    if (! -e $ss/9c.recollect.done && ! -e $ss/database/lock.wrm  && -e $ss/9bb.collect.9.done) then
      set out=$ss/9c
      set toto="bin/B9c.recollect.tcsh $chrom $gs $ss"
      touch $ss/9c.recollect.submit
      scripts/submit $out "$toto" $isLocal

    endif   # ! -e recollect.done
  end

end      # foreach  chrom

echo -n 'End of phase 9c '
date

goto phaseLoop

############################################################
## Collect the refseqmaker from $ici/labc

phase9cjap:

echo -n 'Start of phase 9cjap: Collect the refseqmaker from $ici/laba'
date

foreach  chrom ($chromSet)
  echo -n "Phase 9cjap: recollect best alignments chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom/ACE
  foreach gs (`ls -d S_*`)
    cd $ici/tmp/CH$chrom/ACE/$gs
    if (! -e jap.log && ! -e jap.prelog && -d $ici/laba/tmp/CH$chrom/ACE/$gs) then
      $tacembly $ici/laba/tmp/CH$chrom/ACE/$gs << EOF > jap.prelog
        query find sequence IS_read && NOT IS am_* // IS_am && dna
        show -a -f jap.seq.preace
        follow dna
        show -a -f jap.dna.preace
      quit
EOF
      gawk -f $ici/bin/jap2.dna.awk jap.dna.preace >!  jap.dna.ace
      gawk -f $ici/bin/jap2.seq.awk jap.seq.preace >!  jap.seq.ace
      $tacembly . << EOF >> jap.prelog
        find sequence AM_*
        spush
        follow dna
        sor
        find cdna_clone AM_*
        sor
        spop
        kill
        read-models
        pparse jap.dna.ace
        pparse jap.seq.ace
        save
        quit
EOF
      mv jap.prelog jap.log
    endif   # ! -e jap.prelog
  end      # foreach gs
  cd $ici
end      # foreach  chrom

echo -n 'End of phase 9cjap '
date

goto phaseLoop

############################################################
## Change strand, clean suspect polyA

phase10:

echo -n 'Start of phase 10 '
date

cd $ici
foreach  chrom ($chromSet)
  echo -n "Phase 10: chromosome $chrom "
  date

  if (-d $ici/tmp/CH$chrom ) then
    cd $ici/tmp/CH$chrom/ACE
    foreach gs (`ls -d S_*`)
      cd $gs
      if (! -e 10.est.ali.list) then
        $tacembly . <<EOF
          query find sequence from_gene || is_buried_under
          list -a -f 10.est.ali.list
EOF
      endif
      if (-d database  && ! -e database/lock.wrm  && -e 9d.bly.log && ! -e 10.reverse.log && ! -e 10.reverse.submit) then
        echo "Phase 10: change strand in $ici/tmp/CH$chrom/ACE/$gs" 

          set BSUB=2
          touch 10.reverse.submit
          pushd $ici
            set toto="bin/BrunAcembly $ici $tacembly1 $chrom $gs 10"
            set out = tmp/CH$chrom/ACE/$gs/10.reverse.$$
            scripts/submit $out "$toto" $isLocal
          popd
      endif # ! -e reverse.log
      cd $ici/tmp/CH$chrom/ACE
    end      # loop on fragments
    cd $ici
  endif  # -d $ici/tmp/CH$chrom
end      # loop on chromosomes

echo -n 'End of phase 10 '
date

goto phaseLoop

############################################################
## gene quality, export alignment quality 

phase10ba:

echo -n 'Start of phase 10ba '
date


foreach  chrom ($chromSet)
  echo -n "Phase 10ba: gene quality, export alignment quality $chrom "
  date

  foreach dd (`ls -d $ici/tmp/CH$chrom/ACE/S*`)
    if ( ! -e $dd/r10ba.est2gene.txt) then 
      foreach ii (0 1 2 3 4 5 6 7 8 9 10)
        if (-e $dd/r10ba.est2gene.$ii.ace) \rm $dd/r10ba.est2gene.$ii.ace 
        if (-e $dd/r10ba.collect.$ii.done) \rm $dd/r10ba.collect.$ii.done
      end  
      if (-e $dd/r10ba.collect.done) \rm $dd/r10ba.collect.done
      $tacembly $dd <<EOF
        Query Find Sequence ! Is_read && Hit
        edit -D Hit
        save
        table -o $dd/r10ba.est2gene.pretxt -f $ici/tables/r10ba.est2gene.def
        quit
EOF
      mv  $dd/r10ba.est2gene.pretxt  $dd/r10ba.est2gene.txt
    endif # est2gene.txt
    \rm GeneInfo.*/r10bb.*
    foreach ii (0 1 2 3 4 5 6 7 8 9 10)
        if (-e $dd/9d.bly.log && ! -e $dd/r10ba.est2gene.$ii.ace) then 
          gawk '/^\"/{jj=length(db1); db2 =substr(db, jj+1) ; est=$1; k=length(est) ; cc=substr(est,k-1,1) ; cc1=index("0123456789",cc) ; if ((ii == 10 && cc1 > 0) || (ii != 10 && ii != cc)) next ; if ($3 > 0) printf("Sequence %s\nFrom_gene %s %d %d %d %d %d %d %s\n\n", $1, $2, $3, $4, $5, $6, $7, $8,  db2);}' db1=$ici/tmp/CH$chrom/ACE/ db=$dd ii=$ii $dd/r10ba.est2gene.txt >! $dd/r10ba.est2gene.$ii.preace
          mv $dd/r10ba.est2gene.$ii.preace $dd/r10ba.est2gene.$ii.ace
        endif
        if ( -e $dd/r10ba.est2gene.$ii.ace && ! -e  $dd/r10baN.est2gene.$ii.ace) then 
          cat  $dd/r10ba.est2gene.$ii.ace | gawk '/^Sequence/{printf("%s\t",$2);}/^From_gene/{for(i=2;i<=NF;i++)printf("\t%s",$i);printf("\n");}' >  $dd/r10baN.est2gene.$ii.ace
        endif
     end  # foreach ii
  end # foreach dd
end # foreach  chrom

echo -n 'End of phase 10ba '
date

goto phaseLoop

############################################################
## gene quality, export alignment quality 

phase10ba.agilent:

echo -n 'Start of phase 10ba '
date

foreach  chrom ($chromSet)
  echo -n "Phase 10ba: gene quality, export alignment quality $chrom "
  date

  foreach dd (`ls -d $ici/tmp/CH$chrom/ACE/S*`)
    if ( ! -e $dd/r10ba.est2gene.txt.agilent) then 
      foreach ii (0 1 2 3 4 5 6 7 8 9 10)
        if (-e $dd/r10ba.est2gene.$ii.ace.agilent) \rm $dd/r10ba.est2gene.$ii.ace.agilent 
        if (-e $dd/r10ba.collect.$ii.done.agilent) \rm $dd/r10ba.collect.$ii.done.agilent
      end  
      if (-e $dd/r10ba.collect.done.agilent) \rm $dd/r10ba.collect.done.agilent
      $tacembly $dd <<EOF
        query find est agilent_* from_gene
        table -active -o $dd/r10ba.est2gene.pretxt.agilent -f $ici/tables/r10ba.est2gene.def
        quit
EOF
      mv  $dd/r10ba.est2gene.pretxt.agilent  $dd/r10ba.est2gene.txt.agilent
    endif # est2gene.txt
    \rm GeneInfo.*/r10bb.*.agilent
    foreach ii (0 1 2 3 4 5 6 7 8 9 10)
        if (-e $dd/9d.bly.log && ! -e $dd/r10ba.est2gene.$ii.ace.agilent) then 
          gawk '/^\"/{jj=length(db1); db2 =substr(db, jj+1) ; est=$1; k=length(est) ;  cc=substr(est,k-1,1) ; cc1=index("0123456789",cc) ; if ((ii == 10 && cc1 > 0) || (ii != 10 && ii != cc)) next ; if ($3 > 0) printf("Sequence %s\nFrom_gene %s %d %d %d %d %d %d %s\n\n", $1, $2, $3, $4, $5, $6, $7, $8, db2);}' db1=$ici/tmp/CH$chrom/ACE/ db=$dd ii=$ii $dd/r10ba.est2gene.txt.agilent >! $dd/r10ba.est2gene.$ii.preace.agilent
          mv $dd/r10ba.est2gene.$ii.preace.agilent $dd/r10ba.est2gene.$ii.ace.agilent
        endif
    end  # foreach ii
  end # foreach dd
end # foreach  chrom

echo -n 'End of phase 10ba.agilent '
date

goto phaseLoop

############################################################
## read the est2gene files into GeneInfo.ii database

phase10bb:

echo -n 'Start of phase 10bb '
date
 
foreach  chrom ($chromSet)
 set ii = -1
 if ($chrom == "X") set ii=0
 if ($chrom == "Y") set ii=10
 if ($chrom == "1") set ii=1
 if ($chrom == "2") set ii=2
 if ($chrom == "3") set ii=3
 if ($chrom == "4") set ii=4
 if ($chrom == "5") set ii=5
 if ($chrom == "6") set ii=6
 if ($chrom == "7") set ii=7
 if ($chrom == "8") set ii=8
 if ($chrom == "9") set ii=9

 if ($ii != -1) then
   echo -n "Phase 10bb ii=$ii"
   date
   if (! -d $ici/GeneInfo.$ii ) then
     mkdir  $ici/GeneInfo.$ii
     cd   $ici/GeneInfo.$ii
     mkdir database
     ln -s ../acedata/wspec.geneinfo wspec
     ln -s ../acedata/wgf
     ln -s ../acedata/whelp
     $tacembly . << EOF > /dev/null
y
       save
       quit
EOF
     cd $ici
   endif
 
  cd $ici/GeneInfo.$ii
  if (0 && ! -e r10bb.cleanup.done) then
    $tacembly . <<EOF
      query find sequence From_gene
      edit -D from_gene
      save
      quit
EOF
    touch r10bb.cleanup.done
  endif
  cd $ici

   if (-e $ici/GeneInfo.$ii/r10bb.readall) \rm $ici/GeneInfo.$ii/r10bb.readall
echo aaaa
   foreach dch (`ls -d tmp/CH*`)
     foreach dd (`ls -d $dch/ACE/S*`)
       if (-e $dd/r10ba.est2gene.$ii.ace && ! -e $dd/r10bb.collect.$ii.done) then 
         if (! -e $ici/GeneInfo.$ii/r10bb.readall) then
           echo "find sequence" >!  $ici/GeneInfo.$ii/r10bb.readall
           cat $ici/GeneInfo.$ii/r10bb.readall
         endif
         echo "pparse -NOXREF $dd/r10ba.est2gene.$ii.ace" >> $ici/GeneInfo.$ii/r10bb.readall
         #echo $dd
         touch $dd/r10bb.collect.$ii
       endif
     end
   end # foreach dd
echo bbbb
   if (! -e $ici/GeneInfo.$ii/r10bbN) then
     foreach dch (`ls -d tmp/CH*`)
       foreach dd (`ls -d $dch/ACE/S*`)
         if (-e $dd/r10baN.est2gene.$ii.ace && ! -e $dd/10bbN) then 
           cat  $dd/r10baN.est2gene.$ii.ace | scripts/tab_sort -k 1,1 -k 8,8n >> $ici/GeneInfo.$ii/r10bbN
           touch $dd/r10bb.collect.$ii
         endif
       end
     end # foreach dd
   endif

   cat $ici/GeneInfo.$ii/r10bbN | scripts/tab_sort -k 1,1 -k 8,8n   > $ici/GeneInfo.$ii/r10bbNS
   cat $ici/GeneInfo.$ii/r10bbNS | gawk -F '\t' '{if($1 != old)score = 1000;if($8<=score)print;score=$8;old=$1;}' >  $ici/GeneInfo.$ii/r10bbNSF
   cat $ici/GeneInfo.$ii/r10bbNSF | gawk '{printf("Sequence %s\nFrom_gene ",$1);for(i=2;i<=NF;i++)printf(" %s ",$i);printf("\n\n");}' >  $ici/GeneInfo.$ii/r10bbNSF.ace
   echo "pparse  -NOXREF  $ici/GeneInfo.$ii/r10bbNSF.ace" > $ici/GeneInfo.$ii/r10bb.readall

   if (-e GeneInfo.$ii/r10bb.readall) then 
     touch GeneInfo.$ii/r10bb.read.log 
     $tacembly  GeneInfo.$ii <  GeneInfo.$ii/r10bb.readall >> GeneInfo.$ii/r10bb.read.log 
     foreach dch (`ls -d tmp/CH*`)
       foreach ff (`ls $dch/ACE/S*/r10bb.collect.$ii`)
         mv $ff $ff.done
       end
     end
   endif

 endif   # ii != -1
end # $chrom 

echo -n 'End of phase 10bb '
date

goto phaseLoop

############################################################
## Collect the best alignments

phase10c:

echo -n 'Start of phase 10c: recollect best aligments '
date

foreach  chrom ($chromSet)
  echo -n "Phase 10c: recollect best alignments chromosome $chrom "
  date

  pushd tmp/CH$chrom/ACE
  foreach gs (`ls -d S_*`) 
    #if (! -e estncbiNotGp.log) then
    #  echo "pparse MrnaInfo/est.ncbiNotGp.ace" |  $tacembly . >! estncbiNotGp.log
    #endif
ls -ls  $gs/r10bb.collect.9.done
ls -ls  $gs/database/lock.wrm 
ls -ls   $gs/r10c.recollect.submit 
     if (! -e $gs/r10c.recollect.done && ! -e $gs/database/lock.wrm  && -e $gs/r10bb.collect.9.done) then
      touch $gs/r10c.recollect.submit
      pushd $ici
        set out=$ici/tmp/CH$chrom/ACE/$gs/10c
        set toto="bin/B10c.recollect.tcsh $chrom $gs"
        scripts/submit $out "$toto" $isLocal
      popd
    endif   # ! -e recollect.done
  end
  popd

end      # foreach  chrom

echo -n 'End of phase 10c '
date

goto phaseLoop

############################################################
## Collect the best alignments

phase10c.agilent:

echo -n 'Start of phase 10c: recollect best aligments '
date

foreach  chrom ($chromSet)
  echo -n "Phase 10c: recollect best alignments chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom/ACE
    ls -d S_*
  foreach gs (`ls -d S_*`)
    cd $ici/tmp/CH$chrom/ACE/$gs 
      #foreach ii (0 1 2 3 4 5 6 7 8 9)
      #  gawk -F '\t' -f $ici/bin/r10c.est.bestali.awk section='"'$gs'"' r10c.est.ali.$ii >> r10c.est.bestali.ace2 
      #end  # each ii
    #if (! -e estncbiNotGp.log) then
    #  echo "pparse $ici/MrnaInfo/est.ncbiNotGp.ace" |  $tacembly . >! estncbiNotGp.log
    #endif
    if (! -e r10c.recollect.done.agilent  && -d database  && ! -e database/lock.wrm  &&  -e 9d.bly.log) then
      $tacembly . << EOF > /dev/null
        read-models
        Query Find est From_gene && IS agilent*
        list -a -f r10c.est.list.agilent
        save
      quit
EOF
      if (-e r10c.est.bestali.ace.agilent) \rm r10c.est.bestali.ace.agilent 
      touch r10c.est.bestali.ace.agilent
      foreach ii (0 1 2 3 4 5 6 7 8 9)
        if (-e $ici/GeneInfo.$ii) then
          $tacembly  $ici/GeneInfo.$ii <<EOF > /dev/null
            keyset-read r10c.est.list.agilent
            query From_gene
	    table -active -o r10c.est.ali.$ii.agilent -f $ici/tables/r10c.est.ali.def $gs
EOF
        gawk -F '\t' -f $ici/bin/r10c.est.bestali.awk section='"'$gs'"' r10c.est.ali.$ii.agilent >> r10c.est.bestali.ace.agilent
        endif  # -e geneInfo.$ii
      end  # each ii
      $tacembly . << EOF >! r10c.recollect.log
        read-models
        query find sequence Best_gene_alignment && IS agilent*
        edit -D Best_gene_alignment 
        pparse r10c.est.bestali.ace.agilent
        Query Find Sequence Is_read && !Best_gene_alignment && IS agilent*
        edit -D Is_read
        Query Find Sequence DNA && cDNA_clone && Best_gene_alignment && ! Is_read && IS agilent*
        query NOT is_buried_under
        edit Is_read
        query find sequence IS agilent*
        follow from_gene
        query to_be_fused_with
        edit -D to_be_fused_with
        query find sequence IS agilent*
        follow from_gene
        acembly
          cdna_73 -locally 
          quit
        save
        quit
EOF
      touch r10c.recollect.done.agilent
    endif   # ! -e recollect.done
  end      # foreach gs
  cd $ici
end      # foreach  chrom

echo -n 'End of phase 10c '
date

goto phaseLoop

############################################################
## Recalculate with effective clean up (minTranscriptSize = -100 in BrunAcembly)

phase11:

echo -n 'Start of phase 11 '
date
foreach  chrom ($chromSet)
  echo -n "Phase 11: chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom/ACE
    ls -d S_*
  foreach gs (`ls -d S_*`)
    cd $ici/tmp/CH$chrom/ACE/$gs
    if (-d database && ! -e database/lock.wrm  && -e 9d.bly.log  && -e 10.reverse.log && ! -e 11.rebly.log) then
      if (-e d0.dump.ace) \rm d0.*

         if  (! -e 11.rebly.submit) then
           set BSUB=2
           touch 11.rebly.submit
           pushd $ici
             set toto="bin/BrunAcembly $ici $tacembly1 $chrom $gs 11"
             set out = "-o $ici/tmp/CH$chrom/ACE/$gs/11.rebly.$$.out -e  $ici/tmp/CH$chrom/ACE/$gs/11.rebly.$$.err"
             scripts/submit $out "$toto" $isLocal
           popd
         endif
    endif   # est.ace
  end      # foreach gs
  cd $ici
end      # foreach  chrom

echo -n 'End of phase 11 '
date

goto phaseLoop

############################################################
## Recalculate en place with repeats

phase11b:

echo -n 'Start of phase 11b '
date
foreach  chrom ($chromSet)
  echo -n "Phase 11b: chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom/ACE
    ls -d S_*
  foreach gs (`ls -d S_*`)
    cd $ici/tmp/CH$chrom/ACE/$gs
    if (-d database && ! -e database/lock.wrm  && ! -e r11bb2.log  && (-e 10.reverse.log || -e 10.reverse.0.log) && -e r10c.recollect.done) then
      echo "hello from 11b $gs"
      if (-e d0.dump.ace) \rm d0.*

         if  (! -e r11bb2.log) then
           set BSUB=2
           touch r11bb.submit
           pushd $ici
             set toto="bin/BrunAcembly $ici $tacembly1 $chrom $gs 11b"
             set out = $ici/tmp/CH$chrom/ACE/$gs/r11bb.$$
             scripts/submit $out "$toto" $isLocal
           popd
         endif

    endif   # est.ace
  end      # foreach gs
  cd $ici
end      # foreach  chrom

echo -n 'End of phase 11b '
date

goto phaseLoop

############################################################
## Export genes with 2 pfam

phase11c:

echo -n 'Start of phase 11c '
date
foreach  chrom ($chromSet)
  echo -n "Phase 11c: chromosome $chrom "
  date

  if (-d $ici/ZH$chrom && ! -e  $ici/ZH$chrom/r11c.2pfam.txt) then
    cd $ici/ZH$chrom
    $tacembly . <<EOF
      table -o r11c.multiPfamGenes.txt -f $ici/tables/multiPfamGenes.def
EOF
  endif   # ! -e  $ici/ZH$chrom/r11c.2pfam.txt

  cd $ici
end      # foreach  chrom

if (-e  multiPfamGenes.all.txt) \rm  multiPfamGenes.all.txt
touch  multiPfamGenes.all.txt
foreach ff (`ls ZH*/r11c.multiPfamGenes.txt`)
  gawk '/^\"/{print;}' $ff >> multiPfamGenes.all.txt
end

echo -n "number of exported doublets "
wc multiPfamGenes.all.txt

echo -n 'End of phase 11c '
date

goto phaseLoop

############################################################
## Maggie alignment of the Agilent primers

phase12:

echo -n 'Start of phase 12 '
date

foreach  chrom ($chromSet)
  echo -n "Phase m12: chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom/ACE
    ls -d S_*
  foreach gs (`ls -d S_*`)
    cd $ici/tmp/CH$chrom/ACE/$gs
    if (-d database && ! -e database/lock.wrm  && ! -e m12.done) then

         if  (! -e m12.submit) then
           set BSUB=2
           touch m12.submit
           pushd $ici
             set toto="bin/BrunMaggie $ici $tacembly1 $chrom $gs 12"
             set out = $ici/tmp/CH$chrom/ACE/$gs/m12.$$
             scripts/submit $out "$toto" $isLocal
           popd
         endif

    endif   # est.ace
  end      # foreach gs
  cd $ici
end      # foreach  chrom

echo -n 'End of phase 12 '
date

goto phaseLoop

############################################################
## little fix

phase14:

echo -n 'Start of phase 14 '
date

foreach  chrom ($chromSet)
  echo -n "Phase 14: chromosome $chrom "
  date

  $tacembly tmp/CH$chrom <<EOF
    query find sequence start_not_found
    peptide tmp/CH$chrom/nostart.$chrom.pep
    query find sequence pseudogene
    peptide tmp/CH$chrom/pseudogene.$chrom.pep
    quit
EOF
  cd $ici
end

echo -n 'End of phase 14 '
date

goto phaseLoop

############################################################
## Little fix, reexport

phase16:


echo -n 'phase 16 '
date

foreach  chrom ($chromSet)
  echo -n "Phase 16: chromosome $chrom "
  date

  cd $ici/tmp/CH$chrom/ACE
  foreach gs (`ls -d S_*`)
    cd $ici/tmp/CH$chrom/ACE/$gs
       
    if (! -e d16.dumpgoodreads.ace) then
      echo "phase 16: dumpgoodreads tmp/CH$chrom/ACE/$gs"
      $tacembly . << EOF
        find read
        list -a -f d16.dumpgoodreads.liste
        quit
EOF

      $tacembly $ici/MrnaInfo << EOF
        keyset-read $ici/tmp/CH$chrom/ACE/$gs/d16.dumpgoodreads.liste
        spush
        follow dna
        sor
        undo
        follow cdna_clone
        sor
        spop
	show -a -f $ici/tmp/CH$chrom/ACE/$gs/d16.dumpgoodreads.preace
EOF
      mv d16.dumpgoodreads.preace d16.dumpgoodreads.ace

      $tacembly $ici/../GP_oct_est/tmp/CH$chrom/ACE/$gs <<EOF
        pparse  $ici/tmp/CH$chrom/ACE/$gs/d16.dumpgoodreads.ace
        save
        quit
EOF

    endif # ! -e d16.dumpgoodreads.ace

    cd $ici/tmp/CH$chrom/ACE
  end

  cd $ici
end #chromSet

echo -n 'End of phase 16 '
date

goto phaseLoop

############################################################
## create a chromodatabase

phased1:

echo -n 'Start of phase d1 :'
date

cd $ici
if (! -l acedata) ln -s ~/gall/acedata
if (! -l webtables) ln -s ~/gall/tables webtables
foreach  chrom ($chromSet)
    echo -n "Phase d1: chromosome $chrom "
  date

  if (! -d tmp/X.$MAGIC/chrom) continue
  if (-e ZH$chrom/d1.done) continue
  if (! -d ZH$chrom )
    mkdir ZH$chrom
    \cp tmp/X.$MAGIC/$chrom/database ZH$chrom
    pushd ZH$chrom
      ln -s ../metaData/wspec.aceview_web_site wspec
      ln -s ../acedata/wgf
      ln -s ../acedata/whelp
      ln -s ../webtables tables
      $tacembly . << EOF > /dev/null
y
EOF
    popd
  endif
# check that we are not missing dump data
   set nerr=0

   echo " pparse  acedata/methods.ace" > ZH$chrom/d1._r
   echo " pparse  acedata/webtables.ace" >> ZH$chrom/d1._r
   echo " pparse  acedata/webviews.ace" >> ZH$chrom/d1._r
   echo " pparse  acedata/genetic_code.ace" >> ZH$chrom/d1._r
   echo " pparse  acedata/pFamilyDesc.ace" >> ZH$chrom/d1._r
   echo " pparse  acedata/go.obo.ace" >> ZH$chrom/d1._r
   echo " query find go obsolete" >> ZH$chrom/d1._r
   echo " kill" >> ZH$chrom/d1._r
   echo " pparse  acedata/psort_domain_list.ace" >> ZH$chrom/d1._r
   echo " pparse main_clone_ncbi.ace" >> ZH$chrom/d1._r

   echo "save" >> ZH$chrom/d1._r
   echo "quit" >> ZH$chrom/d1._r
   tace ZH$chrom < ZH$chrom/d1._r

   if ($nerr == 1) exit 1

   $tacembly ZH$chrom < ZH$chrom/d1._r
   touch ZH$chrom/d1.done
end

echo -n 'End of phase d1 '
date

goto phaseLoop

# do we need this ?


   $tacembly ZH$chrom <<EOF >! ZH$chrom/d1.read.genomic.log  
      query find sequence Junction  || GS_tiling
      spush 
      follow dna
      kill
      spop
      edit -D DNA  // remove the dna from the junction double sections  
      save
      quit
EOF

    # $gene2chrom  -any -gs -i $ici/ZH$chrom >!  $ici/ZH$chrom/d1.g2c.gsi.ace
    # cat BUILD/ftp/Assembled_chromosomes/chr_NC_gi | gawk "/$ref_pmd_protected/"'{printf ("Sequence \"%s\"\nDatabase Genbank \"%s\"\n\n", $1, $2);}' >! chrom2gid.ace


    $tacembly ZH$chrom <<EOF  >> ZH$chrom/d1.read.genomic.log  
      # pparse ZH$chrom/d1.g2c.gsi.ace
      pparse tmp/CH$chrom/p1.c_length.ace
      pparse tmp/CH$chrom/p1.genetic_code.ace
      # parse chrom2gid.ace
      query find clone strategy
      kill
      pparse strategy.RZH.ace
      save
      quit
EOF

goto phaseLoop

############################################################
## Read the genes in ZH

phased2:

echo -n 'Start of phase d2 '
date

foreach  chrom ($chromSet)
  echo -n "Phase d2: chromosome $chrom "
  date


  # FORWARD: import manual from ZH* into sections, needed after manual annot by danielle of build 35e
  if (0 && -d  $ici/ZH$chrom  && ! -e $ici/ZH$chrom/database/lock.wrm && ! -e  $ici/ZH$chrom/d2m.read.manuals.done) then 
    if (-e $ici/ZH$chrom/d2m.read.genes.do) \rm $ici/ZH$chrom/d2m.read.genes.do 
  
    if (-d $ici/tmp/CH$chrom) then
      cd $ici/tmp/CH$chrom/ACE
      foreach gs (`ls -d S_*`)
        cd $ici/tmp/CH$chrom/ACE/$gs
        if (! -e d2m.manualdump.ace) then
          echo "phase d2m: prepare tmp/CH$chrom/ACE/$gs/d2m.manualdump.ace"

          # d2m.manual
          $tacembly . << EOF  > /dev/null
            query find est manualStrand
            spush
            show -a -f d2m.manualstrand.ace manualStrand
            show -a -f d2m.manualstrand2.ace strand
            query find est Real_5prime
            sor
            show -a -f d2m.real_5prime.ace Real_5prime
            query find est Real_3prime
            sor
            show -a -f d2m.real_3prime.ace Real_3prime
            query find est vector_clipping:3 = manual
            sor
            show -a -f d2m.manual_clip.ace vector_clipping            
            spop
            follow cdna_clone
            spush
            query find cdna_clone comment
            sor
            show -a -f d2m.clone_comment.ace comment
            query find cdna_clone manual_internal_deletion
            sor
            show -a -f d2m.manual_internal_deletion.ace manual_internal_deletion
            query find cdna_clone suspected_internal_deletion
            show -a -f d2m.suspected_internal_deletion.preace suspected_internal_deletion
            spop
            list -a -f d2m.manual_clone.list
            quit
EOF
        endif   # -e d2m.manualdump.ace
        touch   $ici/ZH$chrom/d2m.read.genes.do 
        cat d2m.*.ace >! d2m_all ; mv d2m_all d2m.manual_all.ace
        touch   $ici/ZH$chrom/d2m.manual.list
        grep cdna_clone d2m.manual_clone.list >>  $ici/ZH$chrom/d2m.manual.list
        echo  "pparse $ici/tmp/CH$chrom/ACE/$gs/d2m.manual_all.ace" >>  $ici/ZH$chrom/d2m.read.genes.do
        cd $ici
      end # foreach gs
    endif
  
    cd $ici/ZH$chrom
    
    if (-e d2m.read.genes.do) then
      echo "pparse d2m.read.genes.do"
      #echo  "pparse MrnaInfo/nm_type_LLid.ace"  >>  d2.read.genes
      echo 'save' >>  d2m.read.genes.do
      echo 'quit' >>  d2m.read.genes.do
      $tacembly . < d2m.read.genes.do >! d2m.read.genes.log 
    endif # d2m.read.genes.do
    touch d2m.read.manuals.done

    cd $ici


  # BACKWARDS: import manual from ZH* into sections, needed after manual annot by jean of build 35
  echo helloBack
  if (0 && -d  $ici/ZH$chrom  && ! -e $ici/ZH$chrom/database/lock.wrm && ! -e  $ici/ZH$chrom/d2x.export.manuals.done) then 
    cd $ici/ZH$chrom

          # d2x.manual exports
          $tacembly . << EOF  > /dev/null
            query find est manualStrand
            spush
            show -a -f d2x.manualstrand.ace manualStrand
            show -a -f d2x.manualstrand2.ace strand
            query find est Real_5prime
            sor
            show -a -f d2x.real_5prime.ace Real_5prime
            query find est Real_3prime
            sor
            show -a -f d2x.real_3prime.ace Real_3prime
            query find est vector_clipping:3 = manual
            sor
            show -a -f d2x.manual_clip.ace vector_clipping            
            spop
            follow cdna_clone
            spush
            query find cdna_clone comment
            sor
            show -a -f d2x.clone_comment.ace comment
            query find cdna_clone manual_internal_deletion
            sor
            show -a -f d2x.manual_internal_deletion.ace manual_internal_deletion
            query find cdna_clone suspected_internal_deletion
            show -a -f d2x.suspected_internal_deletion.preace suspected_internal_deletion
            spop
            list -a -f d2x.manual_clone.list
            quit
EOF
        endif   # -e d2x.manualdump.ace
    
        cat d2x.*.ace >! dd2x.manual_all.ace
        mv dd2x.manual_all.ace d2x.manual_all.ace
        grep Sequence  d2x.manual_all.ace >! d2x.read.list
        grep cDNA_clone  d2x.manual_all.ace >! d2x.clone.list
  
    if (0 && -e d2x.manual_all.ace) then
      cd $ici/tmp/CH$chrom/ACE
      foreach gs (`ls -d S_*`)
        # i should parse d2x.manual_all.ace but only for the est that i know of
        # otherwise i am going to have duplicated manual annots possibly obsolete
        # what i could do i cetralize then all and then fish in from each section
      end
    endif
      
    touch d2x.export.manuals.done
    cd $ici

  endif # d2x.export.manuals.done

 
  cd $ici

  if (! -e ZH$chrom/d2.fixgenomicdna.done) then
    $tacembly  ZH$chrom << EOF >! ZH$chrom/d2.fixgenomicdna.log
      query find clone Buried_est
      show -a -f $ici/ZH$chrom/d2.buried.ace 
      save
      quit
EOF
    touch  ZH$chrom/d2.fixgenomicdna.done
  endif

  $tacembly  ZH$chrom << EOF >! ZH$chrom/d2.c_fix.log
    query find clone Buried_est
    show -a -f $ici/ZH$chrom/d2.buried.ace 
    query find sequence c_* 
    spush
    find map c_*
    sor
    find dna c_*
    sor
    spop
    list -a -f ZH$chrom/d2.c_rename.list
    quit
EOF
  cat ZH$chrom/d2.c_rename.list | gawk '{s=$2;if(length(s)>2)printf("-R %s %s \"%s\n\n", $1,$2,substr($2,4));}' >  ZH$chrom/d2.c_rename.ace
  echo "pparse  ZH$chrom/d2.c_rename.ace" | $tacembly ZH$chrom -noprompt

  cd $ici
end # foreach chrom
echo -n 'End of phase d2 '
date

goto phaseLoop

############################################################
## Rattrapage, new from ZH* 
## read the genes in ROUND1/ZH
## recompute en place

phased2b:

echo -n 'Start of phase d2b '
date

foreach  chrom ($chromSet)
  echo -n "Phase d2b: chromosome $chrom "
  date

  if (! -d $ici/ROUND1 || ! -d $ici/ROUND1/ZH$chrom || ! -d $ici/ZH$chrom) then
    echo '2b needs ZH$chrom and ROUND1/ZH$chrom'
    exit 1
  endif

  if (! -e  $ici/ZH$chrom/d2b.export.done) then 
    cd $ici/ZH$chrom
    $tacembly . <<EOF
      query find sequence transcribed_gene
      show -a -f d2b.cosmid2tg.preace transcribed_gene
      find transcribed_gene
      show -a -f d2b.tg2clo.preace cdna_clone
      query find est from_gene
      show -a -f d2b.est.preace
      dna d2b.est.dna.ace
      query find cdna_clone from_gene && anomalous_clone
      show -a -f d2b.anomalous_clone.ace anomalous_clone
      quit
EOF


    sed -e 's/^From_gene/\!From_gene/' -e 's/^Best_gene_alignment/\!Best_gene_alignment/' -e 's/mRNA_tiling/\!mRNA_tiling/' -e 's/In_mRNA/\!In_mRNA/'  d2b.est.preace >! d2b.est.ace
    sed 's/^Transcribed_gene : \"/Transcribed_gene \"d2b_/' d2b.tg2clo.preace >! d2b.tg2clo.ace
    gawk '{if ($1=="Transcribed_gene") {printf("Transcribed_gene \"d2b_%s\n",substr($2,2)) ; next;};} {print;}' d2b.cosmid2tg.preace >! d2b.cosmid2tg.ace

    touch d2b.export.done
    cd $ici
  endif # d2b.export.done


  cd  $ici/ROUND1/ZH$chrom
  mkdir database.d2b
  cp database/* database.d2b 
  if ( ! -e database/lock.wrm && ! -e d2b.import.done) then 
    $tacembly . <<EOF >! d2b.fuse.log
      read-models
      parse $ici/ZH$chrom/d2b.cosmid2tg.ace
      parse $ici/ZH$chrom/d2b.tg2clo.ace
      parse $ici/ZH$chrom/d2b.est.ace
      parse $ici/ZH$chrom/d2b.est.dna.ace
      parse $ici/ZH$chrom/d2b.anomalous_clone.ace
      save
      query find tg cdna_clone && !details
      acem
        cdna_73 -locally
        quit
      save
      query find tg to_be_fused_with
      acem
        cdna_73 // -locally incompatible avec to_be_fused_with
        quit
      query find tg to_be_fused_with
      acem
        cdna_73 // -locally incompatible avec to_be_fused_with
        quit
      save
      query find mrna NOT from_gene
      spush
      follow refseqmaker
      sor
      undo
      follow product
      sor
      spop
      spush
      follow dna
      sor
      undo
      follow peptide
      sor
      spop    
      kill
      query find tg NOT mrna
      kill
      query find product NOT mrna
      spush
      follow peptide
      sor
      spop
      kill
      query find sequence IS_AM && NOT refseqmaker
      spush
      follow dna
      sor
      spop
      kill
      save
      quit
EOF
    touch d2b.import.done
  endif # d2b.import.done
  cd $ici
end # foreach chrom

echo -n 'End of phase d2b '
date

goto phaseLoop

############################################################
## Phase d3 : remap to global chromosome coordinates

phased3:

echo -n 'Start of phase d3  remap to global chromosome coordinates '
date

if (! -e main_clone_ncbi.ace) then
      echo 'missing title_defining file /main_clone_ncbi.ace'
      exit 1
endif
if (! -e TARGET/GTF/$species_annot.gff3.gz && ! -e METADATA/gtf.RefSeq.transcripts.ace.gz) then
      echo "missing RefSeq file METADATA/gtf.RefSeq.transcripts.ace.gz"
      exit 1
endif
echo hello1
  set gffTAIR=""
  if ($species_kantor == ara) set gffTAIR="-gffTAIR"
  # In arabidopsis, we prefer the usual  Chr chromosome names
  # which are used in the TAIR Araport gff file
  foreach chrom ($chromSet)
    if (! -e ZH$chrom/d3.chrRename.ace) then
      set NC=`cat  tmp/CH$chrom/p1.dnalength.ace | gawk '/^Sequence/{s=$2;gsub(/\"/,"",s);print s;last;}'`
      set ch=`echo $chrom | sed -e 's/chr/Chr/' -e 's/ChrMT/ChrM/' -e 's/ChrCL/ChrC/'`
      echo "$NC\t$ch" | gawk '{NC=$1;ch=$2;printf("-R Sequence %s %s\n\n-R Map %s %s\n\nSequence %s\nFull_name \"Chromosome %s, NCBI %s\"\n\n",NC,ch,NC,ch,ch,ch,NC);}' > ZH$chrom/d3.chrRename.ace
      echo "$chrom\t$ch\t$NC" >  ZH$chrom/d3.chrRename.txt
      echo "pparse ZH$chrom/d3.chrRename.ace" | $tacembly ZH$chrom 
    endif
  end
echo hello2 
   # extract the relevant part of the GFF

   foreach chrom ($chromSet)
     if ( -e TARGET/GTF/$species_annot.gff3.gz && ! -e ZH$chrom/d3.gff.transcripts.ace.gz) then
       set ch=`cat ZH$chrom/d3.chrRename.txt | gawk '{if($1 == chrom)print $3;}' chrom=$chrom`
           zcat TARGET/GTF/$species_annot.gff3.gz | gawk '{if($1 == ch) print;}' ch=$ch | sed -e "s/^$ch/$chrom/" > ZH$chrom/d3.$species_kantor.$ch.gff 
           dna2dna -gff3 ZH$chrom/d3.$species_kantor.$ch.gff $gffTAIR -gtfRemap KT_RefSeq -o ZH$chrom/d3.$ch.gff 
       cat ZH$chrom/d3.*.gff.transcripts.ace | gzip >  ZH$chrom/d3.gff.transcripts.ace.gz
       \rm ZH$chrom/d3.*.gff.*
     endif 
   end

echo hello3

foreach  chrom ($chromSet)
  ls -ls ZH$chrom/database/lock.wrm  ZH$chrom/d1.read.genes.done  ZH$chrom/d3.done
  if (! -e ZH$chrom/database/lock.wrm && -e ZH$chrom/d1.read.genes.done && ! -e ZH$chrom/d3.done) then
  echo "d3 $chrom"

    $tacembly ZH$chrom << EOF
        read-models
        pparse main_clone_ncbi.ace 
      // pparse $ici/XmInfo/a6.ncbi_models.$chrom.ace
      query find predicted_gene
      spush
        query find sequence ybr_contig
        follow subsequence
        query CLASS predicted_gene
        sminus
      spop
      spush
      follow model_of
      sor
      spop
      spush
      follow intmap 
      sor
      query find transcribed_gene ! cdna_clone
      sor
      spop
      kill
      
      pparse ZH$chrom/d3.gff.transcripts.ace.gz

      query find sequence IS x__* && Gene_model == NM_*
      edit CDS
      query find sequence YBR_contig
      list -a -f ZH$chrom/d3.ybr.list
      save 
      quit
EOF

    touch ZH$chrom/d3.done

  endif # d3.done
end
echo -n 'End of phase d3 '
date

goto phaseLoop

############################################################
## Recompute the genes if the code has changed

phased4:
goto phaseLoop

foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm) then
    echo "d4 $chrom recompute if code is modified"
    pushd ZH$chrom

        $tacembly . <<EOF | tee -a d4.recompute.log
	  find transcribed_gene
          acembly
            cdna_73 -locally
            quit
          save
	  find model
	  list -a -f d4.recompute.done
        quit
EOF
     popd
  endif
end

goto phaseLoop

phased4Xm_obsolete:
cd $ici
echo -n 'Parse XmInfo RefSeq models '
date
foreach chrom ($chromSet)
  if (! -e XmInfo/$chrom/hs.RefSeq.$chrom.transcripts.ace.gz || -e ZH$chrom/d4.RefSeq.done) continue

  $tacembly ZH$chrom <<EOF
    read-models
    parse  XmInfo/$chrom/hs.RefSeq.$chrom.transcripts.ace.gz
    save
    quit
EOF
end


phased4bizare:
echo -n 'Start of phase d4  recompute per chromo '
date

foreach chrom ($chromSet)
  pushd ZH$chrom 
  $tacembly . <<EOF > fix2.pep.err
    find tg
    // acem
      // cdna_73 -locally
    // quit
        // query find product  very_good_product || ( good_product && best_product)
        // peptide -title x2.good_proteins_peptide.fasta
        // query find product
        // peptide -title x2.all_peptides_for_mass_spec.fasta     
        // table -title -o x2.all_peptides_dna.txt -f $ici/tables/x1.gg2product2dna.def    
        // query find mrna best_in_gene
        // dna  -title x2.all_mrnas_dna.fasta
        query find gene NOT cloud_gene ; >transcribed_gene ;  >mrna best_in_gene
        dna x2.good_mrnas_dna.fasta
        // query find intron from_genefinder
        // list -a -f xx1.introns.pg.list
        // query find intron from_gene AND (gt_ag || gc_ag)
        // list -a -f xx1.introns.av.list
 
    save
    quit
EOF
  popd
end
goto phaseLoop 

echo -n 'Start of phase d4 tiling and quality: '
date

echo -n 'phase d4 recompute if code is modified '
date

goto phaseLoop
foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm) then
    echo "d4 $chrom recompute if code is modified"
    cd $ici/ZH$chrom
    
    if (-e $ici/nonBbest.ace && ! -e d4.nonBbest.done) then
      echo 'manual fixed of missed genes'
      $tacembly . <<EOF >! d4.nonBbest.log
          keyset-read $ici/acedata/nonBbest.ace
          edit difficult_to_align
          save
        quit
EOF
      touch d4.nonBbest.done
    endif # d4.nonBbest.log

    if (! -e d4.slide.log) then
      echo 'parsing again acedata/*.ace'
      cd $ici/acedata
      $ici/bin/rr $chrom
      #$tacembly $ici/ZH$chrom < _r$chrom
      cd $ici/ZH$chrom
      echo "sliding polyA and vector $chrom"
      $tacembly . <<EOF >! d4.slide.log
          read-models
	  find est
          acembly
            badquality
            // slidePolyA // done in 9d, do NOT redo after phase 10, since it creates again polyA
            // slideVector
            quit
          query find sequence source_exons && dna // error while reading ncbi models
          edit -D source
          edit -D source_exons
          find sequence toto // because keyset-read when failing does not zero @active
          keyset-read $ici/acedata/$species.super_long.list
          query is_read // because we must not re-impose is_read tag
          edit Super_long
          query find tg !cdna_clone
          kill
          save
        quit
EOF
      touch d4.slide.log
    endif # d4.slide.log

    # avoid this phase in GOLD mRNA only project
    if (-d $ici/EstData && ! -e d4.polyAsuspect.done) then
        echo 'polyAsuspect analysis'
        $tacembly . <<EOF | tee -a d4.reverse.prelog
          table -o d4.polyAsuspect1.txt  $ici/tables/10.polyAsuspect1.def
          table -o d4.polyAsuspect2.txt  $ici/tables/10.polyAsuspect2.def
          table -o d4.polyAsuspect4.txt  $ici/tables/10.polyAsuspect4.def
        quit
EOF

# suspect 1 finds reverse read starting inside the ORF
# suspect 2 finds forward polyA read endding inside the ORF
# suspect 4 removes polyA of forward read if a reverse read assembles further down


          gawk  -F '\t' '/\"/ {printf ("Sequence %s\nGene_wall\n\ncDNA_clone %s\nInternal_priming\n\n",$8, $9);}'  d4.polyAsuspect1.txt >!  d4.polyAsuspect1.ace
          gawk  -F '\t' '/\"/ {printf ("Sequence %s\nGene_wall\n\ncDNA_clone %s\nInternal_priming\n\n",$8, $9);}'  d4.polyAsuspect2.txt >!  d4.polyAsuspect2.ace
          gawk  -F '\t' '/\"/ {printf ("Sequence %s\nGene_wall\n-D polya_after_base\n-D Number_of_terminal_A\n\ncDNA_clone %s\nInternal_priming\n\n",$4,$8);}'  d4.polyAsuspect4.txt >!  d4.polyAsuspect4.ace


        $tacembly . <<EOF | tee -a d4.reverse.prelog
	  pparse d4.polyAsuspect1.ace
	  pparse d4.polyAsuspect2.ace
	  pparse d4.polyAsuspect4.ace
          query find est Gene_wall
          edit -D Gene_wall
	  follow from_gene
          acembly
            cdna_73 -locally
            quit
          save
	  find model
	  list -a -f d4.polyAsuspect.predone
        quit
EOF
      if (-e d4.polyAsuspect.predone)  mv d4.polyAsuspect.predone d4.polyAsuspect.done
    endif

    #touch d4.recompute.log
    if (! -e d4.hinv3data.log) then
        echo "parsing hinv3.hand.data"
        $tacembly . <<EOF >! d4.hinv3data.prelog
          // find gene
          // kill
          read-models
          query find sequence vector_clipping > 1
          // spush
          // edit -D vector_clipping
          pparse $ici/acedata/$species.hinv3.vector_clipping.ace
          pparse $ici/acedata/$species.hinv3.est_reverse.ace
          pparse $ici/acedata/$species.hinv3.initial_polyA.ace
          pparse $ici/acedata/$species.hinv3.initial_polyT.ace
          pparse $ici/acedata/$species.hinv3.manual_polya.ace
          pparse $ici/acedata/$species.hinv3.manualstrand.ace
          pparse $ici/acedata/$species.hinv3.polya_after_base.ace
          save
        quit
EOF
      mv d4.hinv3data.prelog d4.hinv3data.log
    endif  # d4.hinv3data.log

    if (-e $ici/HINV3 && ! -e d4.coords.done) then
      $tacembly . <<EOF 
        pparse $ici/ybr2intmap.ace
        pparse $ici/Is_assembly.ace
        save
        quit
EOF
      $gene2chrom  -any -gs -i . >! d4.g2c.gs1.ace
      echo "pparse d4.g2c.gs1.ace" | $tacembly .
      touch d4.coords.done
    endif

    #touch d4.recompute.log
    if (! -e d4.recompute.log) then
      echo "recomputing genes en place $chrom"
      $tacembly . <<EOF >! d4.recompute.log
         read-models
         find tg
          acembly
            cdna_73 -locally
            cdna_31
            quit
          query find tg to_be_fused_with
          acembly
            cdna_73 // -locally incompatible avec to_be_fused_with
            cdna_31
            quit
          query find tg to_be_fused_with
          acembly
            cdna_73 // -locally incompatible avec to_be_fused_with
            quit
          save
        quit
EOF
      touch d4.recompute.log
      if (-e d4.$chrom.ali) \rm d4.$chrom.ali
    endif  # d4.recompute.log

    touch d4.gintegra.done
    if (0 && -e $ici/HINV3/EST_DATA/est.hinv3.74106.list && ! -e d4.gintegra.done) then
      echo "exporting d4.hinv data $chrom"
      $tacembly . <<EOF 
        keyset-read $ici/HINV3/EST_DATA/est.hinv3.74106.list
        edit ABI // put this tag on all recognised mrna
        query find est Vector_clipping
        show -a -f d4.vector_clipping.ace Vector_clipping
	query find est polyA_after_base
        show -a -f d4.polya.ace polyA_after_base
	query find est Number_of_terminal_A
        show -a -f d4.Number_of_terminal_A.ace Number_of_terminal_A
	query find est Initial_polyA
        show -a -f d4.Initial_polyA.ace Initial_polyA
	query find est Initial_polyT
        show -a -f d4.Initial_polyT.ace Initial_polyT
	query find est reverse
        show -a -f d4.reverse.ace reverse
        query find cdna_clone Suspected_internal_deletion
        show -a -f d4.suspected_deletion.ace Suspected_internal_deletion
        save
        quit
EOF
      touch d4.gintegra.done
    endif # d4.gintegra.done


    if (-e $ici/HINV3 && ! -e d4.gintegra.$chrom.ali) then

      echo "export ali style $chrom"
      $gintegra . >! d4.gintegra.$chrom.ali
    endif # d4.gintegra.ali

    cd $ici
  endif
end


goto phaseLoop

############################################################
## clean up per chromosome

phased5:

echo -n 'Start of phase d5  clean up per chromosome '
date

foreach  chrom ($chromSet)
  echo -n "Phase d5: chromosome $chrom "
  date

  cd $ici
  if (-d ZH$chrom ) then
    cd $ici/ZH$chrom
    if (! -e  database/lock.wrm && -e d3.done && ! -e d5.virtual.log) then
      if (-e d5.cleanup.test) \rm d5.cleanup.test

        $tacembly . <<EOF >> d5.virtual.prelog
          read-models
          query find mrna found3p && found5p && ! complete
          edit complete
          query find clone strategy
          edit NoKantorInfo 
          query find est inverted
          spush
          query find est forward && areverse || reverse && aforward
          sminus
          query ! inverted
          edit inverted
          spop
          edit -D inverted  
          query find sequence from_gene && reverse
          list -a -f d5.reverse.prelist
          // Query find sequence sp_*  // 2019_04_26 would we do we do that ?
          // Edit -D cdna_clone
	  acembly
            cdna_virtual // assemble tg close to very long predicted models
            quit
          save
          find clone
          list -a -f  d5.virtual.test
          quit
EOF
      grep Sequence d5.reverse.prelist >! d5.reverse.list
      if (-e d5.virtual.test && -e d5.virtual.prelog) then
        mv d5.virtual.prelog  d5.virtual.log
        \rm d5.virtual.test
      endif
    endif
  endif

  cd $ici
end
echo -n 'End of phase d5 '
date

goto phaseLoop

############################################################
## chromo repeats
phased6:

echo -n 'Start of phase d6 '
date
echo 'phase d6: Internal_priming_on_A_rich'
echo 'Internal_priming_on_A_rich'

foreach  chrom ($chromSet)
  echo -n "Phase d6: chromosome $chrom "
  date
  if (-d ZH$chrom ) then
    pushd ZH$chrom
    if (! -e database/lock.wrm && ! -e d6.arich.done) then
      $tacembly  . << EOF 
        read-models
        query find cdna_clone Internal_priming_on_A_rich
        edit -D Internal_priming_on_A_rich
        find tg
        acem
          polyatag
          quit
        save
        quit
EOF
      touch d6.arich.done
    endif
    popd
  endif
end

goto phaseLoop

# chromoRepeats: le code tourne  vite sur Ara chr5, mais la sortie dans
# cosmid->oligRepeat n'a aucun sens, bizare
# j'ai sans doute edite le code pour une autre utilisation

foreach  chrom ($chromSet)
  echo -n "Phase d6: chromoRepeats $chrom "
  date
  if (-d $ici/ZH$chrom ) then
    cd $ici/ZH$chrom
    if (! -e database/lock.wrm && ! -e d6.chromorepeats.done) then
      $tacembly  . << EOF  >! d6.chromorepeats.log
        query find sequence ybr_contig
        acembly
          chromorepeats
          quit
        save
        list -a -f d6.chromorepeats.test
        quit
EOF
      if (-e  d6.chromorepeats.test) touch  d6.chromorepeats.done
    endif
    cd $ici 
  endif # ZH$chrom
end   # each  chrom

echo -n 'End of phase d6 '
date

goto phaseLoop

# 2019, i do not know what MGC covering means
foreach  chrom ($chromSet)
  echo -n "Phase d6: chromosome $chrom MGC covering "
  date
  if (-d $ici/ZH$chrom ) then
    cd $ici/ZH$chrom
    if (! -e database/lock.wrm && ! -e MGCcovering.$chrom.txt) then
      $tacembly  . << EOF  >! MGCcovering.log
        table -o MGCcovering.$chrom.pretxt -f $ici/tables/MGCcovering.def
        table -o MGCcovering0.$chrom.pretxt -f $ici/tables/MGCcovering0.def
        find clone
        list -a -f MGCcovering.test
        quit
EOF
      if (-e MGCcovering.test) then
        \rm MGCcovering.test
        mv MGCcovering.$chrom.pretxt MGCcovering.$chrom.txt
        mv MGCcovering0.$chrom.pretxt MGCcovering0.$chrom.txt
      endif
    endif
  endif
end
  

goto phaseLoop

############################################################
## Read and cluster the gnomons obsolete

phased7:

echo -n 'Start of phase d7, does nothing was for Read and cluster the gnomons '
date

foreach  chrom ($chromSet)
  echo -n "Phase d7: chromosome $chrom "
  date

  cd  $ici/ZH$chrom
  if (! -e d7.xm.done) then
    touch  d7.xm.log  
  endif

  cd $ici
end
echo -n 'End of phase d7 '
date

goto phaseLoop

############################################################
## Phase d8 : create the gene boxes

phased8a:
foreach  chrom ($chromSet)
  if (! -e $ici/ZH$chrom/d8.mrnas.fasta.gz) then
    pushd $ici/ZH$chrom
    $tacembly . <<EOF
      find mrna
      dna d8.mrnas.fasta
      quit
EOF
    gzip d8.mrnas.fasta
    popd
  endif
end
 
goto phaseLoop

phased8:

echo -n 'Start of phase d8 create the gene boxes '
date

cd $ici
foreach  chrom ($chromSet)
  if (! -e $ici/ZH$chrom/d8.gene2gene.done) then
    cd $ici/ZH$chrom

    $gene2chrom -any -gs -i . >! d8.g2c.gsi.ace
    $gene2chrom -any -pg -i . >! d8.g2c.pgi.ace
    $gene2chrom -any -tg -i . >! d8.g2c.tgi.ace
    $gene2chrom -any -mr -i . >! d8.g2c.mri.ace
    $gene2chrom -any -gg -i . >! d8.g2c.ggi.ace
    
    $tacembly . <<EOF
      pparse d8.g2c.gsi.ace
      pparse d8.g2c.pgi.ace
      pparse d8.g2c.tgi.ace
      pparse d8.g2c.mri.ace
      pparse d8.g2c.ggi.ace
      query find tg to_be_fused_with
      edit -D to_be_fused_with
      query find tg Antisens_to
      edit -D Antisens_to
      query find tg Overlaps
      edit -D Overlaps
      query find tg Shedded_from
      edit -D Shedded_from
      query find sequence Matching_transcribed_gene
      edit -D Matching_transcribed_gene
      query find sequence Matching_mRNA  
      edit -D  Matching_mRNA  
      find tg
      acembly
        cdna_21
        cdna_50
        quit
      save
      quit
EOF

    # $gene2gene . 0 # obsolete, replaced by cdna_21 cdna_50

    touch d8.gene2gene.done
  endif

  if (-e database && ! -e database/lock.wrm && ! -e d8.shedded.done) then

   # gene overlaps

    $tacembly . << EOF
      read-models
      query find clone strategy
      kill
      pparse $ici/strategy.RZH.ace
      edit -D NoKantorInfo   
      query find gene
      kill
      find tg
      acembly
        Tag_shedded_genes
        quit
      query find sequence ! Ref_Seq  && ! is_am && colour
      edit -D colour      
      query find sequence NM_*
      edit colour palecyan
      query find sequence is_am
      edit colour palemagenta
      query find est forward && areverse || reverse && aforward 
      edit colour paleyellow
      save
      quit
EOF

    touch d8.shedded.done
  endif


# find the relevant geneid and export the coords of the future genebox

  if (-e database && ! -e database/lock.wrm && -e  d8.shedded.done && ! -e d8.done) then

    $tacembly  . << EOF
      query find sequence from_gene && geneid
      follow geneid
      spush
      query find predicted_gene
      follow geneid_pg
      sor
      spop
      list -a -f  d8.gid.list
      table -o d8.tg2genebox.txt -f $ici/tables/d8.tg2genebox.def // exclude shedded tg
      save
      quit
EOF

# construct the geneboxes
    gawk -F '\t' -f $ici/bin/d8.tg2genebox.awk  d8.tg2genebox.txt >! d8.tg2genebox.ace


# parse the genebox and the geneid objects
# flag the shedded genes 
# and reexport the geneid<->genebox assiociation
# and the product <->genebox assiociation
    $tacembly  . << EOF
      read-models
      pparse d8.geneid.ace
      pparse d8.tg2genebox.ace
      table -o d8.tgshedded2tg2gg.txt  -f $ici/tables/d8.tgshedded2tg2gg.def
      save
      quit
EOF

# hook the shedded tg to the parent genebox
    gawk -F '\t' '/^\"/{printf("Gene %s\nTranscribed_gene %s\n\n", $3, $1);}' d8.tgshedded2tg2gg.txt >! d8.tgshedded2tg2gg.ace

# table export the read/tg/mrna/product tags that should appear in the genebox
    $tacembly  . << EOF
      pparse d8.tgshedded2tg2gg.ace // hook shedded tg to parent genebox
      table -o d8.gene2shedtg2coords.txt  -f $ici/tables/d8.gene2shedtg2coords.def
      table -o d8.geneid2seq2tg2gg.txt  -f $ici/tables/d8.geneid2seq2tg2gg.def 
      table -o d8.tg2genebox2product.txt  -f $ici/tables/d8.tg2genebox2product.def
      table -o d8.pg2tg2gg.txt  -f $ici/tables/d8.pg2tg2gg.def
      find predicted_gene
      select -o pg2gg2.txt pg,gg from pg in @,tg in pg->Matching_transcribed_gene, gg in tg->gene where gg
      save
      quit
EOF
    gawk -F '\t' '/^\"/{g=$1;c=$3;a1=$4;a2=$5;if(g!=old){if(old) printf (" %d %d\n\n", b1,b2);printf("Sequence %s\nGenes %s ",c,g);old=g;b1=a1;b2=a2;}if(a1<a2){if(a1<b1)b1=a1;if(a2>b2)b2=a2;}else{if(a1>b1)b1=a1;if(a2<b2)b2=a2;}}END{if(g) printf (" %d %d\n\n", b1,b2);}' d8.gene2shedtg2coords.txt >! d8.gene2shedtg2coords.ace


    $tacembly  . << EOF
      pparse d8.gene2shedtg2coords.ace // include sheds in genebox
      save
      quit
EOF

# Usual coordinate assignments
    echo "gene2chrom"
    $gene2chrom -any -gg -i . >! d8.g2c.ggi.ace

# create the geneId and product and genefinder tags tag in the relevant geneboxes

    gawk -F '\t' '/\"/{printf ("GeneId %s\nGene %s\nOther_gene %s\n\n", $1, $2, $2);}' d8.geneid2seq2tg2gg.txt >! d8.geneid2seq2tg2gg.ace
    gawk  -F '\t' '/\"/ {printf("Gene %s\nProduct %s\n\n", $2, $3); }' d8.tg2genebox2product.txt >! d8.tg2genebox2product.ace
    gawk  -F '\t' '/\"/ {printf("Gene %s\nGeneId %s\nGeneFinder %s\n\n", $4, $3, $1); }' d8.pg2tg2gg.txt >! d8.pg2tg2gg.ace
    cat d8.pg2gg2.txt | gawk -F '\t' '{printf("Gene %s\nGeneFinder %s\n\n", $2,$1); }' > d8.pg2gg2.ace


    $tacembly . << EOF
      read-models
      query find gene geneid
      edit -D geneid
      pparse d8.pg2tg2gg.ace // parse the contact geneid 
      query find gene geneid
      kstore contacts
      pparse  d8.tg2genebox2product.ace
      pparse  d8.g2c.ggi.ace
      pparse  d8.geneid2seq2tg2gg.ace
      kget contacts
      edit -D geneid // remove the gid from aligned sequence, they survive in Other_geneId
      pparse d8.pg2tg2gg.ace // restore the contact geneid 
      query find geneid IntMap  // should not have been created
      edit -D IntMap
      table -o d8.geneid2WrongGene.txt -f $ici/tables/d8.geneid2WrongGene.def
      save
      quit
EOF

    gawk  -F '\t' '/\"/ {printf("Geneid %s\n-D Gene %s\n\n",$1,$2);}' d8.geneid2WrongGene.txt >! d8.geneid2WrongGene.ace

    $tacembly . << EOF
      pparse  d8.geneid2WrongGene.ace
      query find geneid gene ; ! (COUNT {>Predicted_gene;Pseudogene}>0 && COUNT {>gene ; >Genefinder ; ! pseudogene} > 0) // avoid to transfer title of silly pseudogenes
      show -a -f d8.geneid2gene.preace
      save
      quit
EOF


# Transfer the data from the geneid into the genebox
# in particular we must correctly send each geneid in each gene
# the same awk script is reused in phase d14
# Then recompute genes with several geneid
    gawk  -F '\t' -f $ici/bin/d8.geneid2gene.awk  d8.geneid2gene.preace >!  d8.geneid2gene.data.ace

    $tacembly . << EOF
      pparse  d8.geneid2gene.data.ace
      table -o d8.glisse.$chrom.txt  -f $ici/tables/d8.glisse.def // grab likely errors
      save
      quit
EOF

    touch  d8.done
  endif
  cd $ici
end

foreach  chrom ($chromSet)
  if (! -e ZH$chrom/d8.multigeneid.done) then
    pushd ZH$chrom
    $tacembly . << EOF
      query find gene COUNT geneid > 1 ; > transcribed_gene
      acembly
        cdna_73
        quit
      save
      quit
EOF
    touch d8.multigeneid.done
    popd
  endif
end

foreach  chrom ($chromSet)
  cd $ici/ZH$chrom
  if (0 && ! -e d8.predump.done) then
    $tacembly . << EOF
      find gene
      spush
MA      query find tg ! shedded_from 
      sor
      find mrna
      sor
      query find product best_product && good_product
      sor
      query find cdna_clone anomalous_clone
      sor
      spop
      show -a -f d8.predump.ZH$chrom.1.ace
      query find est NCBI
      show -a -f d8.predump.ZH$chrom.2.ace NCBI
      query find est forward && areverse || reverse && aforward 
      show -a -f d8.predump.ZH$chrom.3.ace aPrioriStrand
      show -a -f d8.predump.ZH$chrom.5.ace Strand
      find clone
      list -a -f d8.predump.done
      quit
EOF
  endif
  cd $ici
end

   
foreach  chrom ($chromSet)
  if (! -e ZH$chrom/d8.gene2intron.done) then
    pushd ZH$chrom
    $tacembly . << EOF
       // table -o $ici/CapInfo/cap.sl0.$chrom.txt -f $ici/CapInfo/cap.sl0.def
       find intron
       kill
       read-models
       // pparse s2.solexa.ace
       // parse $ici/PREVIOUS/ZH$chrom/x5.export_mRNA_as_AV.ace
       find predicted_gene
       spush
       find gene
       sor
       spop
       acembly
         gene_intron
         quit
       save
       query find intron
       show -a -f d8.gene2intron.$chrom.ace
       quit
EOF
    touch  d8.gene2intron.done
    popd
  endif
end

if (-d LocusLinkInfo && ! -e d8.gid.done) then
  pushd ZH$chrom
    $tacembly  . << EOF
      query find geneid
      list -a -f  d8.gid.list
      quit
EOF

# export relevant geneid object
    $tacembly  $ici/LocusLinkInfo << EOF
      keyset-read   d8.gid.list
      spush
      follow omim
      sor
      spop
      show -a -f  d8.gid.ace
      quit
EOF


# parse the geneid metadata
    $tacembly  . << EOF
      read-models
      pparse d8.gid.ace
      save
      quit
EOF
    touch d8.gid.done
  popd
endif


cd $ici

echo 'the glisse tables are usually detecting gene-id and coordinate bugs'
foreach  chrom ($chromSet)
 wc ZH$chrom/d8.glisse.$chrom.txt
end

echo -n 'End of phase d8 '
date

goto phaseLoop

############################################################
## d88 rattrapage des gene box
phased88:
goto phaseLoop
cd $ici
foreach  chrom ($chromSet)
  if (! -e $ici/ZH$chrom/d88.done) then
    cd ZH$chrom
    $tacembly . <<EOF
      table -o d88.pg2tg2gg.txt  -f $ici/tables/d8.pg2tg2gg.def
      quit
EOF

    gawk  -F '\t' '/\"/ {printf("Gene %s\nGeneId %s\nGeneFinder %s\n\n", $4, $3, $1); }' d88.pg2tg2gg.txt >! d88.pg2tg2gg.ace

    $tacembly . << EOF
      pparse  d88.pg2tg2gg.ace
      keyset-read $ici/LocusLinkInfo/a5.sequence2gid.list
      query from_gene
      follow geneid
      spush
      query find predicted_gene
      follow geneid_pg
      sor
      spop
      list -a -f  d88.gid.list
      save
      quit
EOF
 
    $tacembly  $ici/LocusLinkInfo << EOF
      keyset-read   d88.gid.list
      show -a -f  d88.geneid.ace
      quit
EOF

    $tacembly . << EOF
      pparse $ici/main_clone_ncbi.ace 
      pparse  d88.geneid.ace
      query find gene geneid
      acem
        cdna_kantor
        quit
      query find gene geneid
      show -a -f d88.gg2title.ace title
      query find gene genefinder
      show -a -f d88.gg2genefinder.ace genefinder
      query find gene geneid
      show -a -f d88.gg2geneid.ace geneid
      save
      quit
EOF

    touch $ici/ZH$chrom/d88.done
  endif # d88.done
  cd $ici
end
goto phaseLoop

############################################################
## uORF : useless, now done in sections

phased9:

echo -n 'Start of phase d9  uORF: '
date
goto phaseLoop

foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm ) then
    echo "d10 uORF $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom


        touch d9.uorf.done
      cd $ici
    endif
  endif
end

goto phaseLoop

############################################################
## kantor to kill, bug rename all genes to zorg name

phased10k:
goto phaseLoop
echo -n 'Start of phase d10 truquee'
date

foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm && ! -e $ici/ZH$chrom/d10.truc.done) then
    echo "d10 truc $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom
      touch  d10.truc.zorg
        $tacembly . <<EOF >! d10.truc.log
          find gene
          acem
            cdna_rename  -c $chrom -g // will cause ZORG names
            quit
          save
          quit
EOF
        touch d10.truc.done
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
     endif
   endif
end

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## a: linear, get newname off the predicted gene

phased11a:

if (! -d $ici/PREVIOUS && ! -e  $ici/NOPREVIOUS) then
  echo 'please create a PREVIOUS link to the previous build or a NOPREVIOUS file'
endif

echo -n 'Start of phase d11a pseudo.word newName: '
date

if (-e acedata/reserved_names) then
  echo "There should not be a file acedata/reserved_names"
  exit 1
endif

touch acedata/reserved_names

cd $ici
foreach  chrom ($chromSet)
  if (! -e  ZH$chrom/database/lock.wrm && ! -e ZH$chrom/d11a.newname.done) then
    echo "d11a pseudoword newname $chrom"
    touch  d11.log
    if (-d ZH$chrom) then
      cd ZH$chrom
        $tacembly . <<EOF | tee -a d11.log
	  read-models
          query find locuslink NA
          kill
          keyset-read $ici/acedata/jap.est.$species.list
          query ! japanese
          edit japanese
          query find est !japanese && transpliced_to
          edit japanese
	  query find gene ! transcribed_gene
          kill
          query find gene newname
          edit -D newname
          find gene
          acembly
            cdna_rename -c 1 -f $ici/acedata/reserved_names // -c => justFromPg
            quit
          save
	  find newname
          list -a -f d11a.list
          quit
EOF
        if (-e d11a.list) then
          touch d11a.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
       exit 1
     endif
   endif
end

\cp  acedata/reserved_names acedata/reserved_names.d11a

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## b linear, get newname off the cdna->locuslink

phased11b:

echo -n 'Start of phase d11b pseudo.word newName: '
date

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

cd $ici
foreach  chrom ($chromSet)
  if (-e  ZH1/d11a.newname.done && ! -e ZH$chrom/database/lock.wrm && ! -e ZH$chrom/d11b.newname.done) then
    echo "d11 pseudoword newname $chrom"
    if (-d ZH$chrom) then
      cd ZH$chrom
        touch  d11.log
        $tacembly . <<EOF | tee -a d11.log
	  read-models
          query find gene NOT newname
          acembly
            cdna_rename -c 2 -f $ici/acedata/reserved_names // -c => justFromPg
            quit
          save
	  find newname
          list -a -f d11b.list
          quit
EOF
        if (-e d11b.list) then
          touch d11b.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
       exit 1
     endif
   endif
end

\cp  acedata/reserved_names acedata/reserved_names.d11b

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## export names used in PREVIOUS build

phased11c:

if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11c.newname.done
  goto phaseLoop
endif

echo -n 'Start of phase d11c pseudo.word newName: '
date

if (-e $ici/PREVIOUS && ! -d $ici/PreviousNameInfo) then
    echo 'construct PreviousNameInfo database'
    mkdir $ici/PreviousNameInfo
    cd $ici/PreviousNameInfo
    mkdir database
    ln -s ../acedata/wspec
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . <<EOF
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
     cd $ici
endif

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-d  $ici/PREVIOUS && -d $ici/PREVIOUS/ZH$chrom && ! -e $ici/PreviousNameInfo/d11c.$chrom.done) then
    echo "d11c.pfam2gene2cl $chrom"
    if (! -d  $ici/PREVIOUS || ! -d  $ici/PREVIOUS/ZH$chrom) then
      echo missing PREVIOUS/ZH$chrom
      exit 1
    endif
    cd $ici/PREVIOUS/ZH$chrom
    $tacembly . <<EOF
      table -o $ici/PreviousNameInfo/d11c.previous.pfam2gene2r.$chrom.txt $ici/tables/d11c.pfam2gene2r.def
      table -o $ici/PreviousNameInfo/d11c.previous.any2gene2r.$chrom.txt $ici/tables/d11c.any2gene2r.def
      quit
EOF
    cd $ici/PreviousNameInfo
    gawk -F '\t' '/\"/ {gsub(/\.[1-9]\"/,"\"",$3);printf("Sequence %s\nPrevious_NewName %s pfam %s\n\n", $3, $2, $4);}' d11c.previous.pfam2gene2r.$chrom.txt >! d11c.previous.ZH$chrom.pfam2gene2r.$chrom.ace
    gawk -F '\t' '/\"/ {aa=$1;gsub(/\"[a-z]*\"/,"",aa) ; if (aa != "") next ; gsub(/\.[1-9]\"/,"\"",$2);printf("Sequence %s\nPrevious_NewName %s pseudo %s // %s\n\n", $2, $1, $3, aa);}' d11c.previous.any2gene2r.$chrom.txt >! d11c.previous.ZH$chrom.any2gene2r.$chrom.ace

    $tacembly . <<EOF | tee -a d11.log
      read-models
      pparse d11c.previous.ZH$chrom.pfam2gene2r.$chrom.ace
      pparse d11c.previous.ZH$chrom.any2gene2r.$chrom.ace
      save
      find method
      list -a -f d11c.test
      quit
EOF
    if (-e d11c.test) then
      mv d11c.test d11c.$chrom.done
    endif
    cd $ici
  endif
end

\cp  acedata/reserved_names acedata/reserved_names.d11c

goto phaseLoop


############################################################
## select a newName using the  pseudoword system
## import names used in PREVIOUS build

phased11d:

echo -n 'Start of phase d11d previous newName: '
date

cd $ici
if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11d.newname.done
  goto phaseLoop
endif

if (! -d $ici/PREVIOUS) goto phaseLoop

if (-e $ici/PREVIOUS && ! -d PreviousNameInfo) then
  echo please run phase 11c
  exit 1
endif


foreach  chrom ($chromSet)
  if (-e  PreviousNameInfo/d11c.1.done && ! -e  ZH$chrom/database/lock.wrm  && ! -e ZH$chrom/d11d.newname.done ) then
    echo "d11d.import.previous.names $chrom"
    cd $ici/ZH$chrom
    $tacembly . <<EOF
      query find mrna ; {Mrna_covered_by  ; > Mrna_covered_by} SETOR {! Mrna_covered_by  ; >cdna_clone ; >Read}
      query find tg ; >Read
      list -a -f d11d.coveringread.list
      quit
EOF
 
    $tacembly $ici/PreviousNameInfo <<EOF
      keyset-read  d11d.coveringread.list
      show -a -f $ici/ZH$chrom/d11d.coveringread.name.ace Previous_NewName 
      quit
EOF

    $tacembly . <<EOF
      read-models
      pparse d11d.coveringread.name.ace
      save
      find model
      list -a -f d11d.test.list
      quit
EOF

    if (-e d11d.test.list) touch d11d.newname.done
    cd $ici
  endif #d11d,done
end # chromSet

foreach  chrom ($chromSet)
  if (-e ZH$chrom/d11d.newname.done && ! -e  ZH$chrom/database/lock.wrm  && ! -e ZH$chrom/d11dbis.newname.done ) then
    echo "d11d.import.previous.name_31 $chrom"
    cd $ici/ZH$chrom

    foreach ii (X Y 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20)
      if (-d $ici/EstMarkInfo$ii) then
        $tacembly $ici/EstMarkInfo$ii <<EOF
          keyset-read  d11d.coveringread.list
          show -a -f $ici/ZH$chrom/d11dbis.$ii.name_31.ace Previous_NewName_31
          quit
EOF

        $tacembly . <<EOF
          read-models
          pparse d11dbis.$ii.name_31.ace
          save
          quit
EOF
      endif  # EstMarkInfo$ii
    end # $ii
    touch d11dbis.newname.done
    cd $ici
  endif # d11dbis.newname.done
end # chromSet

if (! -e acedata/reserved_names.d11e) then
  \cp  acedata/reserved_names acedata/reserved_names.d11d
endif

goto phaseLoop


############################################################
## select a newName using the  pseudoword system
## e linear, recover justified previous pfam name

phased11e:

echo -n 'Start of phase d11e justified pfam names: '
date

cd $ici

if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11e.newname.done
  goto phaseLoop
endif

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-e ZH1/d11d.newname.done && ! -e  ZH$chrom/database/lock.wrm && ! -e ZH$chrom/d11e.newname.done) then
    echo "d11e pseudoword newname $chrom"
    if (-d ZH$chrom) then
      cd ZH$chrom
        $tacembly . <<EOF | tee -a d11.log
	  read-models
          query find pfam IS Pox_polyA_pol
          kill
	  query find gene newname
          show -a -f d11e.newnamebefore.ace newname
	  find newname
          list -a -f d11e.list.before
          query find gene NOT newname
          acembly
            cdna_rename -c 3 -f $ici/acedata/reserved_names // -c => justified pfam names
            quit
          save
	  query find gene newname
          show -a -f d11e.newnameafter.ace newname
	  find newname
          list -a -f d11e.list
          quit
EOF
        if (-e d11e.list) then
          touch d11e.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
       exit 1
     endif
   endif
end

\cp  acedata/reserved_names acedata/reserved_names.d11e
goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## f reserve all old pfam names

phased11f:

echo -n 'Start of phase d11f justified pfam names: '
date

if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11f.newname.done
  goto phaseLoop
endif

if (! -d $ici/PreviousNameInfo) then
  echo please run phase 11c
  exit 1
endif

cd $ici/PreviousNameInfo
if (-e $ici/ZH1/d11e.newname.done  && ! -e $ici/ZH1/d11f.newname.done) then 
  $tacembly . <<EOF  | tee -a $ici/ZH1/d11f.newname.log
    find cdna_clone
    acembly
      cdna_rename -c 4 -f $ici/acedata/reserved_names // -c => justified pfam names
      quit
    save
    find model
    list -a -f $ici/ZH1/d11f.list
    quit
EOF
  if (-e $ici/ZH1/d11f.list)  touch $ici/ZH1/d11f.newname.done
endif
cd $ici

echo "phase d11f done: "
date

\cp  acedata/reserved_names acedata/reserved_names.d11f

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## g linear, create new pfam names

phased11g:

echo -n 'Start of phase d11g new pfam names: '
date

cd $ici
if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-e $ici/ZH1/d11f.newname.done && ! -e $ici/ZH$chrom/database/lock.wrm && ! -e $ici/ZH$chrom/d11g.newname.done) then
    echo "d11g pseudoword newname $chrom"
    if (-d ZH$chrom) then
      cd ZH$chrom
        $tacembly . <<EOF  | tee -a d11.log
	  read-models
          query find gene NOT newname
          acembly
            cdna_rename -c 5 -f $ici/acedata/reserved_names // -c => new pfam names
            quit
          save
	  find newname
          list -a -f d11g.list
          quit
EOF
      if (-e d11g.list) then
        touch d11g.newname.done
      endif
      cd $ici
    else
      echo "did not find $ici/ZH$chrom"
      exit 1
    endif
  endif
end

echo "phase d11g done: "
date

\cp  acedata/reserved_names acedata/reserved_names.d11g

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## h linear, recover justified previous pseudo name

phased11h:

echo -n 'Start of phase d11h justified pseudo names: '
date

cd $ici
if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11h.newname.done
  goto phaseLoop
endif

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-e ZH1/d11g.newname.done && ! -e  ZH$chrom/database/lock.wrm && ! -e ZH$chrom/d11h.newname.done) then
    echo "d11h pseudoword newname $chrom"
    if (-d ZH$chrom) then
      cd ZH$chrom
        $tacembly . <<EOF  | tee -a d11.log
	  read-models
          query find gene NOT newname
          acembly
            cdna_rename -c 6 -f $ici/acedata/reserved_names // -c => justified pseudo names
            quit
          save
	  find newname
          list -a -f d11h.list
          quit
EOF
        if (-e d11h.list) then
          touch d11h.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
       exit 1
     endif
   endif
end

\cp  acedata/reserved_names acedata/reserved_names.d11h

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## h linear, recover justified previous pseudo name

phased11h31:

echo -n 'Start of phase d11h31 justified pseudo names: '
date

cd $ici
if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11h31.newname.done
  goto phaseLoop
endif

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-e ZH1/d11h.newname.done && ! -e  ZH$chrom/database/lock.wrm && ! -e ZH$chrom/d11h31.newname.done) then
    echo "d11h31 pseudoword newname $chrom"
    if (-d ZH$chrom) then
      cd ZH$chrom
        $tacembly . <<EOF  | tee -a d11.log
	  read-models
          query find gene NOT newname
          acembly
            cdna_rename -c 7 -f $ici/acedata/reserved_names // -c => justified pseudo names of build 31
            quit
          save
	  find newname
          list -a -f d11h31.list
          quit
EOF
        if (-e d11h31.list) then
          touch d11h31.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
       exit 1
     endif
   endif
end

\cp  acedata/reserved_names acedata/reserved_names.d11h31

goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## f reserve all old pseudo names

phased11i:

echo -n 'Start of phase d11i justified pseudo names: '
date

cd $ici
if (-e $ici/NOPREVIOUS) then
  touch $ici/ZH1/d11i.newname.done
  goto phaseLoop
endif

if (! -d $ici/PreviousNameInfo) then
  echo please run phase 11c
  exit 1
endif

cd $ici/PreviousNameInfo
if (-e $ici/ZH1/d11h.newname.done && ! -e $ici/ZH1/d11i.newname.done) then 
  $tacembly . <<EOF  | tee -a d11.log
    find cdna_clone
    acembly
      cdna_rename -c 8 -f $ici/acedata/reserved_names // -c => reserve all old pseudo names
      quit
    quit
EOF
  touch $ici/ZH1/d11i.newname.done
endif
cd $ici

echo "phase d11i done: "
date

\cp  acedata/reserved_names acedata/reserved_names.d11i
goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## j linear, create new pseudo names

phased11j:

echo -n 'Start of phase d11j justified pseudo names: '
date

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-e $ici/ZH1/d11i.newname.done && ! -e  $ici/ZH$chrom/database/lock.wrm && ! -e $ici/ZH$chrom/d11j.newname.done) then
    echo "d11j pseudoword newname $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom
        $tacembly . <<EOF  | tee -a d11.log
	  // read-models
          query find sequence from_gene && library = *riken*
          edit japanese
          query find newname IS pox_polyA_pol*
          kill
          query find pfam IS Pox_polyA_pol
          kill
          query find gene NOT newname
          acembly
            cdna_rename -c 9 -f $ici/acedata/reserved_names // -c => new pseudo names
            quit
          save
	  find newname
          list -a -f d11j.list
          quit
EOF
        if (-e d11j.list) then
          touch d11j.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
     endif
   endif
end

cp  acedata/reserved_names acedata/reserved_names.d11j
goto phaseLoop

############################################################
## select a newName using the  pseudoword system
## k contruct double LocusLink names

phased11k:

echo -n 'Start of phase d11k justified double LocusLink names: '
date

if (! -e acedata/reserved_names) then
  echo "missing acedata/reserved_names"
  exit 1
endif

foreach  chrom ($chromSet)
  if (-e $ici/ZH1/d11j.newname.done && ! -e  $ici/ZH$chrom/database/lock.wrm && ! -e $ici/ZH$chrom/d11k.newname.done) then
    echo "d11k double locuslink names $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom
        $tacembly . <<EOF  | tee -a d11.log
	  // read-models
          query find gene ! IS *_ // avoid genes already renamed by danielle
          kstore gg1
          query follow mrna ; geneid
          edit -D GeneId
	  kget gg1
          acembly
            cdna_rename -c 10 -f $ici/acedata/reserved_names // -c => double locuslink names
            quit
          save
	  find newname
          list -a -f d11k.list
          quit
EOF
        if (-e d11k.list) then
          touch d11k.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
     endif
   endif
end

cp  acedata/reserved_names acedata/reserved_names.d11k
goto phaseLoop

############################################################
## actually rename recompute the genes

phased12:

echo -n 'Start of phase d12 rename recompute: '
date

goto d12_plusbas
# zuplabu PCA3 ATENTION
# koby hack by hand,     slynar on ZH12
# open ZHX
tbly ZHX <<EOF 
 query find est IS BC029540 OR IS AI184725 OR IS NM_001080140 ; >from_gene ; > gene ; 
 list -a -f kobygene.list // we expect 11 genes
 quit
EOF
tbly ZH12 <<EOF 
 query find est IS CR615184 ; >from_gene ; > gene ; 
 list -a -f slynargene.list // we expect 1 gene
 quit
EOF

gawk 'BEGIN {ii=11;}/^Gene/ {printf ("Gene %s\nNewName koby%d\n\n", $2, ii) ; ii--;}' kobygene.list >! koby.fixnewname.ace
gawk '/^Gene/ {printf ("Gene %s\nNewName slynar\n\n", $2);}' slynargene.list >! slynar.fixnewname.ace
echo 'parse  koby.fixnewname.ace' | tbly -noprompt ZHX
echo 'parse  slynar.fixnewname.ace' | tbly -noprompt ZH12
# kill by hand any other gene that would be called koby

# fixnewname hack, to be done by hand
# grep -E 'and.*and.*and' acedata/reserved_names | gawk '{printf ("-R newname \"%s\" ""\n\n", $1);}' >! fixNewName.ace
# grep -E '\--.*--.*--' acedata/reserved_names | gawk '{printf ("-R newname \"%s\" ""\n\n", $1);}' >! fixNewName.ace
# grep -E '[\.\-]' acedata/reserved_names | gawk '{printf ("-R newname \"%s\" ""\n\n", $1);}' >> fixNewName.ace
# emacs fixNewName.ace  -> danielle
# verify there is no doublet
gawk '/^-R/{print $4}' fixNewName.ace | sort 
gawk '/^-R/{print $4}' fixNewName.ace | sort | wc
gawk '/^-R/{print $4}' fixNewName.ace | sort -u | wc


d12_plusbas:

if (! -e $ici/fixNewName.ace) then
  echo 'cannot find file ici/fixNewName.ace with the hand aliases of the loong newnames'
  exit 1
endif


foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm && -e $ici/ZH$chrom/d11j.newname.done && ! -e $ici/ZH$chrom/d12.newname.done) then
    echo "d12 rename recompute $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom
        if (-e d12.liste)  \rm d12.liste
        $tacembly . <<EOF
          read-models
          find newname
          show -a -f d12.nn2gene.ace gene
	  find gene
          edit -D GO_m_pfam
          edit -D GO_b_pfam
          edit -D GO_c_pfam
          edit -D GO_m_ace
          edit -D GO_b_ace
          edit -D GO_c_ace
          pparse $ici/main_clone_ncbi.ace
          pparse $ici/fixNewName.ace
          query find mrna NOT from_gene || (NOT best_in_gene && COUNT cdna_clone < 10)
          spush
          follow RefSeqMaker
          sor
          undo
          follow product
          sor
          spop
          spush
          follow dna
          sor
          undo
          follow peptide
          sor
          spop
          kill       
          query find gene !transcribed_gene && ! genefinder
          kill
          find gene
          acem
            cdna_rename -g // -c $chrom would cause ZORG names
            quit
          save
          // query find gene COUNT {>transcribed_gene;! shedded_from && NOT gt_ag && NOT gc_ag;>mrna; COUNT cdna_clone > 6 && tiling_error>10}>0
          // edit pseudogene  // 1800 genes, commented out 2007_05_30, we should count in AM error supported by several clones
          query find pfam IS Pox_polyA_pol
          kill
          query find gene type
          edit -D type
          query find gene cloud_gene
          edit -D cloud_gene
          query find gene balise
          edit -D balise
          query find mrna ; gc_ag || gt_ag || cdna_clone = nm_*  || cdna_clone = nr_* 
          follow from_gene
          follow gene
          spush
          query find gene omim || geneId
          sor
          spop
          edit Balise
          query find gene !balise
          spush
          query find product good_product
	  follow genebox 
          sminus
          spop
          spush
          query COUNT {>transcribed_gene ; >cdna_clone} > 5
          sminus
          query COUNT {>transcribed_gene ; >cdna_clone} > 30
          kstore tg30
          spop
          edit cloud_gene

          kget tg30
          edit -D cloud_gene
          edit Single_exon_gene

          query find gene cloud_gene && NOT type
          edit cloud

	  query find sequence RefSeq && IS NM_* ; follow from_gene ; follow gene
          edit Has_NM
          query find mrna COUNT cds_covered_by == 1 || COUNT mrna_covered_by == 1
          edit well_supported

          query find clone strategy
          edit -D NoKantorInfo
          edit -D name_by_section
          edit name_by_gene
          save
          list -a -f d12.list
          quit
EOF
        if (-e d12.list) then
          touch d12.newname.done
        endif
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
     endif
   endif
end

goto phaseLoop

############################################################
## recover additional locuslink/omim after renaming

phased13:

echo -n 'Start of phase d13  additional locuslink/omim: '
date


date
foreach  chrom ($chromSet)
  if (-d $ici/MaggieInfo/AllMrna/AceViewMrna && ! -e  $ici/MaggieInfo/AllMrna/AceViewMrna/allMrna.$chrom.fasta) then
    $tacembly ZH$chrom <<EOF
      find mrna
      dna  $ici/MaggieInfo/AllMrna/AceViewMrna/allMrna.$chrom.fasta
      show -a -f  $ici/MaggieInfo/AllMrna/AceViewMrna/allMrna2tg.$chrom.ace
      quit
EOF
  endif
end


foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm && -e $ici/ZH$chrom/d11b.newname.done && ! -e $ici/ZH$chrom/d13.omim.done) then
    echo "d13  get omim info $chrom"
    cd $ici/ZH$chrom
    if (-e d13.liste)  \rm d13.liste
    $tacembly . <<EOF
          read-models
          pparse $ici/main_clone_ncbi.ace
	  find geneid
          spush
          find omim
          sor
          spop
          list -a -f d13.gid_omim.list
          quit
EOF
    $tacembly $ici/LocusLinkInfo <<EOF
          keyset-read d13.gid_omim.list
          spush
          follow extern
          sor
          spop
          show -a -f  $ici/ZH$chrom/d13.gid_omim.ace
          quit
EOF

    $tacembly . <<EOF
            read-models
            pparse d13.gid_omim.ace
            find clone
            list -a -f $ici/ZH$chrom/d13.omim.done
            quit
            save
            quit
EOF
    cd $ici
  endif
end

goto phaseLoop

#######################################################################
## transfer the recovered locuslink biology and pfam XREF in the genes
# d14 truque needed in july 2003 because compare had been modified
phased14truquee:  

echo -n 'Start of phase d14 additional fixes: '
date

foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm) then
    echo "d14  phase truquee"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom
      if (! -e d14t.pg.ace) then 
        $tacembly . <<EOF
          query find sequence    Is_predicted_gene
          show -a -f d14t.pg.ace
          quit
EOF
      endif
      cd $ici
    endif
  endif
end

goto phaseLoop

#######################################################################
## transfer the recovered locuslink biology and pfam XREF in the genes

phased14:

echo -n 'Start of phase d14 additional fixes: '
date

foreach  chrom ($chromSet)
  if (! -e  $ici/ZH$chrom/database/lock.wrm && -e $ici/ZH$chrom/d11b.newname.done) then
    echo "d14  additional locuslink/omim $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom

      if (! -e d14.gid2gene.done) then 
        $tacembly . <<EOF
          find kantor
          show -a -f d14.kantor.ace
          query find geneid IntMap  // should not have been created
          edit -D IntMap
          query find geneid gene
          show -a -f d14.geneid2gene.preace
          save
          quit
EOF

        gawk  -F '\t' -f $ici/bin/d8.geneid2gene.awk  d14.geneid2gene.preace >! d14.geneid2gene.data.ace
	
        $tacembly . <<EOF
          read-models
          pparse d14.geneid2gene.data.ace
          find tg
          save
          quit
EOF

        touch d14.gid2gene.done
      endif # d14.gid2gene.done

      if (! -e d14.kantor.done) then 
        $tacembly . << EOF >! d14.kantor.log
          read-models
          pparse $ici/main_clone_ncbi.ace 
          Find pfam
          edit -D Accession
          edit -D Definition
          edit -D GO
          edit -D Interpro_comment
          edit -D Paper
          edit -D Pfam_comment
          edit -D Reference
          edit -D Run_date
          pparse $ici/acedata/pFamilyDesc.ace
          pparse $ici/acedata/go.obo.ace
          parse $ici/acedata/webtables.ace // table definition for the web display
          parse $ici/acedata/webviews.ace // view definition for the web display
          pparse  $ici/LocusLinkInfo/a5.omim.ace
          query find go_b "biological_process unknown"
          spush
          query find go_m "molecular_function unknown"
          sor
          query find go_c "cellular_component unknown"
          sor
          spop
          kill
          query find mrna
          acem
            cdna_kantor
            quit
          query find gene
          acem
            cdna_kantor
            quit
          query find mrna
          acem
            PolyAtag
            quit
          find gene
          acem
	    cDNA_Compare 
            quit
          query find product Mitochondrial_cleavage_site_domain
          edit -D Mitochondrial_cleavage_site_domain
          save
          find clone
          list -a -f d14.kantor.done
          quit
EOF

      endif # d14.kantor.done

      if (! -e d14.complex_locus.list) then 

        # gene2gene again because we allow multiple tg-mrna match 2006_11_24
        $tacembly . <<EOF
          find tg
          acembly
            cdna_21
            cdna_50
            quit
          save
          quit
EOF

        # attribute the geneid to pg->matching_mrna
        # needed nov06, should be integrated in cdna  
        $tacembly . <<EOF
          table -o d14.strand_bug.pretxt -f $ici/tables/d14.geneStrandBug.def
          table -o d14.geneid2pg2mrna.txt  -f $ici/tables/d14.geneid2pg2mrna.def
          quit
EOF

        # the file d14.strand_bug.txt should be empty
        sort -u d14.strand_bug.pretxt | gawk '/^\"/ {print}' >! d14.strand_bug.txt

        gawk -F '\t' '/\"/{printf("Mrna %s\nGeneId %s\n\n", $6, $4);}' d14.geneid2pg2mrna.txt >! d14.geneid2pg2mrna.ace

        $tacembly . <<EOF
          pparse d14.geneid2pg2mrna.ace
          table -o d14.complex_locus.txt -f $ici/tables/d14.complex_locus.def
          edit Complex_locus Two_geneid
          table -o d14.complex_locus_via_good_product.txt -f $ici/tables/d14.complex_locus_via_good_product.def
          edit Complex_locus Two_product
          save
          query find gene complex_locus
          list -a -f d14.complex_locus.list
          quit
EOF
      endif # d14.complex_locus.list

      if (0 && ! -e d14.title.done) then 
        if (-e d14.test) \rm d14.test
        echo d14:exporting gene/mrna/product titles
        $tacembly . <<EOF
          query find gene title
          show -a -f d14.title.gene.ace title
          query find mrna title
          show -a -f d14.title.mrna.ace title
          query find product title
          show -a -f d14.title.product.ace title
          find model
          list -a -f d14.test
          quit
EOF
        if (-e d14.test) then
          touch d14.title.done
          \rm d14.test
        endif
      endif # d14.title.done

      if (0 && ! -e d14.geneCloud.txt) then 
        $tacembly . <<EOF
          table -o  d14.geneCloud.txt -f $ici/tables/d14.geneCloud.def
          quit
EOF
      endif #  d14.geneCloud.txt

      if (0 && ! -e d14.gofix.done) then 
        $tacembly . <<EOF
          query find gene 
	  show -a -f d14.gofix.g.$chrom.ace genetic
	  show -a -f d14.gofix.m.$chrom.ace molecular
	  show -a -f d14.gofix.e.$chrom.ace expression
          quit
EOF
        touch d14.gofix.done
      endif #  d14.gofix.done

      cd $ici
    endif
  endif
end

goto phaseLoop

############################################################
##

phased15:
echo -n 'Start of phase d15: biblio '
date

foreach  chrom ($chromSet)
  cd $ici/ZH$chrom
  if (! -e database/lock.wrm && ! -e d15.pap2gene.done) then 
    if (-e d15.pap2gene.list) \rm d15.pap2gene.list
    echo "Transfer the papers from the ESTs to the genes"
    $tacembly .  <<EOF
      table -o $ici/ZH$chrom/d15.pap2gene.txt -f $ici/tables/d15.pap2gene.def
      quit
EOF
    gawk  -F '\t' '/\"/ {printf ("Gene %s\nReference %s\n\n", $4, $2);}' d15.pap2gene.txt >! d15.pap2gene.ace

    $tacembly . <<EOF
      parse d15.pap2gene.ace
      query find paper COUNT gene > 500
      edit -D gene
      query find paper COUNT sequence > 1000
      edit -D Sequence
      save
      list -a -f d15.pap2gene.list
      quit
EOF
    if (-e  d15.pap2gene.list) touch d15.pap2gene.done

  endif # d15.pap2gene.done  


  cd $ici
end

echo -n 'End of phase d15 tissue and biblio '
date

goto phaseLoop

############################################################
############################################################
############################################################
## Phase d16 : Change all gene names to positional names
## so that they can be used to order the gene tables 

phased16:

echo -n 'Start of phase d16 '
date

echo phase d16 chromSet="$chromSet"

foreach  chrom ($chromSet)
  cd $ici/ZH$chrom

  if (! -e d16.positionName.done) then # moved from q2c here, august 2005
    if (-e d16.positionName.predone) \rm d16.positionName.predone

    touch d16.positionName.start
    echo 'd16.1  Change all gene newnames to positional names'
    $tacembly . <<EOF
      query find gene newname
      show -a -f d16.newname_ok.ace newname
      table -o  d16.positionName.txt -f $ici/tables/d16.positionName.def
      quit
EOF

    echo 'd16.2 awk the file '
    cat <<EOF >! d16.positionName.awk
    /\"/ { gene=\$1; nn=\$2 "_" \$3 ; gsub(/\"/,"",nn) ; 
           printf("Gene %s\nNewName \"%s\"\n\n", gene, nn);
         }
EOF

    gawk -f d16.positionName.awk d16.positionName.txt >!  d16.positionName.ace

    echo 'd16:4.3 parse the fixed positional newnames'
    $tacembly . <<EOF
      pparse  d16.positionName.ace
      save
      find clone
      list -a -f d16.positionName.predone
      quit
EOF

    if (-e d16.positionName.predone) mv d16.positionName.predone d16.positionName.done
  endif #  d16.positionName.done

  if (! -e d16.product.list) then
    $tacembly . <<EOF
      query find product best_product || good_product
      list -a -f d16.product.list
      quit
EOF
  endif # d16.product.list

  if (-d /am/aceview/MEGA2/human.all/OLIGO && -e d16.product.list && ! -e d16.product.ace) then
    $tacembly /am/aceview/MEGA2/human.all/OLIGO <<EOF
      key d16.product.list
      show -a -f d16.product.ace
      quit
EOF
    $tacembly . <<EOF
      pparse  d16.product.ace
      save
      quit
EOF
  endif #  d16.product.ace
  cd $ici
end # foreach chrom

echo -n 'End of phase d16'
date

goto phaseLoop


############################################################
############################################################
############################################################
## export contructed mrnas as AX models (2008_04_12 for Jensen)

phasex5:

echo -n 'Start of phase x5: export mRNAs as AX models '
date

foreach  chrom ($chromSet)
  pushd $ici/ZH$chrom
  if (! -e x5..export_mRNA_as_AX.txt) then
    $tacembly . <<EOF
      table -o x5.export_mRNA_as_AX.txt  -f $ici/tables/x5.export_mRNA_as_AX.def
EOF
    gawk -F '\t' -f $ici/bin/x5.export_mRNA_as_AX.awk x5.export_mRNA_as_AX.txt >! x5.export_mRNA_as_AX.ace
  endif
  popd
end

echo -n 'End of phase x5 '
date

goto phaseLoop

############################################################
## gffdump [acedb_dir | host:port] [filter (default IS * && COUNT {>product ;peptide:2 >= 100} > 0]

phasex8:

echo -n 'Start of phase x8: intronsdump '
date

foreach  chrom ($chromSet)
  pushd $ici/ZH$chrom
  if (! -e x8.Tg2Introns.txt) then
    $tacembly . <<EOF
      table -o x8.Tg2Introns.txt -f $ici/tables/x8.Tg2Introns.def
      quit
EOF
  endif
  if (! -e x8.Tg2Introns.ace) then
    gawk -F '\t' -f $ici/bin/Tg2Introns.awk x8.Tg2Introns.txt >! x8.Tg2Introns.ace
    $tacembly . <<EOF
      read-models
      pparse  x8.Tg2Introns.ace
      save
      quit
EOF
  endif 
  if (! -e x8.tg2mrna.ace) then
    $tacembly . <<EOF
      table -o x8.Tg2Mrna.txt -f $ici/tables/x8.Tg2Mrna.def
      quit
EOF
  endif 
  if (! -e x8.IntronsClassFeet.ace) then
    $tacembly . <<EOF
      table -o x8.IntronsClassFeetUp.txt -f $ici/tables/x8.IntronsClassFeetUp.def
      table -o x8.IntronsClassFeetDown.txt -f $ici/tables/x8.IntronsClassFeetDown.def
      quit
EOF
    cat  x8.IntronsClassFeetUp.txt  x8.IntronsClassFeetDown.txt  >!  x8.IntronsClassFeet.txt
    gawk -F '\t' '/\"/{printf("Intron %s\n-D Motifs\nDonor %s\nAcceptor %s\nLeft_Motif %s\nRight_Motif %s\n\n", $1,$2,$3,$4,$5);}' x8.IntronsClassFeet.txt >! x8.IntronsClassFeet.ace
    $tacembly . <<EOF
      read-models
      pparse  x8.IntronsClassFeet.ace
      pparse 
      save
      quit
EOF
  endif 

  popd 
end
goto phaseLoop

foreach  chrom ($chromSet)
  if (! -e  $ici/nmifiable.$chrom.txt) then
    $tacembly ZH$chrom <<EOF
      table -o $ici/nmifiable.$chrom.txt -f $ici/tables/RefSeqExport/NMifiable.def
      quit
EOF
  endif  
  if (! -e  $ici/nmifiable.$chrom.dna) then
    $ici/bin/t2ks Mrna < $ici/nmifiable.$chrom.txt >! $ici/nmifiable.$chrom.list.ace
    $tacembly ZH$chrom <<EOF
      keyset-read $ici/nmifiable.$chrom.list.ace
      dna $ici/nmifiable.$chrom.dna
      quit
EOF
  endif
end

echo -n 'End of phase x1 truquee'
date

goto phaseLoop

###
phasex1: 

echo -n 'Start of phase x1: gffdump '
date
echo there is a problem, the mrnas are not called by date, we must dum from ZZ
goto phaseLoop

cd $ici

if (0) then
  # bouhassira mars, 2007
  date
  foreach  chrom ($chromSet)
    if (! -e  $ici/ZH$chrom/aceview.genetiling.36a.$chrom.txt) then
      $genetiling -db ZH$chrom >! ZH$chrom/aceview.genetiling.36a.$chrom.txt
    endif
    if (! -e  $ici/ZH$chrom/aceview.genetiling.36a.$chrom.noCloud.txt) then
      $genetiling -noCloud -db ZH$chrom >! ZH$chrom/aceview.genetiling.36a.$chrom.noCloud.txt
    endif
    if (! -e  $ici/ZH$chrom/aceview.genetiling.36a.$chrom.codingIgnored.mixStrands.txt) then
      $genetiling -codingIgnored -mixStrands -db ZH$chrom >! ZH$chrom/aceview.genetiling.36a.$chrom.codingIgnored.mixStrands.txt
    endif
    if (! -e  $ici/ZH$chrom/aceview.genetiling.36a.$chrom.codingIgnored.noCloud.mixStrands.txt) then
      $genetiling -codingIgnored -noCloud -mixStrands -db ZH$chrom >! ZH$chrom/aceview.genetiling.36a.$chrom.codingIgnored.noCloud.mixStrands.txt
    endif
  end
endif
 
echo hello x1
foreach  chrom ($chromSet)
  if (-d ZH$chrom ) then
    pushd ZH$chrom 
    echo -n "Phase x1: chromosome $chrom "
    date

    if (! -e x1.killbad.done) then
      echo "x1 kill bad"
      $tacembly . <<EOF
        key  ../ZZ/q2c.badcloud.list
        spush
        key  ../ZZ/q2c.badnoncloud.list
        sor
        spop
        spush
        follow transcribed_gene
        sor
        follow mrna
        sor
        follow product
        sor
        spop
        spush
        follow dna
        sor
        undo
        follow peptide
        sor
        spop
        kill
  
        query find mrna !from_gene
        spush
        follow refseqmaker
        sor
        undo
        follow product
        sor
        spop
        spush
        follow dna
        sor
        undo
        follow peptide
        sor
        spop
        kill  
        query find product ! mrna
        spush
        follow peptide
        sor
        spop
        kill
        query find tg !details && ! cdna_clone
        kill
  
        save
        quit
EOF
      touch x1.killbad.done
    endif
##### Pfam hits
    if (! -e x1.pfamhits.done) then
    echo "dumping x1.pfamhits.$chrom.txt"
      $tacembly . <<EOF
        table -title -o x1.pfamhits.txt -f /home/mieg/gall/tables/x1.pfamhits.def
        quit
EOF
      touch x1.pfamhits.done
    endif

##### genes gff
    if (! -e x1.gffdump.done) then
    echo "dumping x1.acemblygenes.gff"
      # use default gff filter: best_in_gene
      # the gff_qual files should be empty, please check and fix
      $gffdump . -no_cloud -qual >! x1.gene_qual.gff_qual
      $gffdump . -no_cloud | gawk '{if(index($1,"|")>1)next;print}' >! x1.genes_gff.gff
      touch x1.gffdump.done
    endif

##### good_mrnas
##### good_proteins
##### all_mrnas
##### all_peptides_for_mass_spec
      $tacembly . <<EOF

        quit
EOF

    if (! -e x1.fastadump.done) then
    echo "dumping x1.fasta files "
      # impose filter: best_in_gene == tue les jaunes PROTEIN FASTA DUMP
      $tacembly . <<EOF

        query find predicted_gene Model_of AND nm_id = n*
        dna  xx1.pg.fasta
        query find predicted_gene Model_of AND nm_id = n* // NOT pseudogene
        aql -active -o  xx1.pg.transcript2gene.txt select pg,g from pg in @active:1 , g in pg->Model_of
        query find predicted_gene Model_of AND nm_id = n*
        aql -active -o xx1.pgStructure.txt select pg,chrom,a1,a2,x1,x2 from pg in @active:1, chrom in pg->intmap, a1 in chrom[1], a2 in a1[1], x1 in pg->Source_Exons , x2 in x1[1]


        query find gene 
        query ! cloud && ! IS G_*
        query >transcribed_gene ; >mrna
        aql -active -o xx1.mrnaStructure.txt select mrna,chrom,m1,m2,a1,a2,x1,x2,type,feet,tg from mrna in @active:1, tg in mrna->From_gene, chrom in mrna->intmap, m1 in chrom[1], m2 in m1[1], a1 in mrna->Splicing , a2 in a1[1], x1 in a2[1], x2 in x1[1], type in x2[1], feet in type[1]


        query find gene NOT cloud ; >transcribed_gene ;  >mrna best_in_gene
        dna  -title x1.good_mrnas_dna.fasta
        query find mrna best_in_gene
        dna  -title x1.all_mrnas_dna.fasta
        query find product  very_good_product || ( good_product && best_product)
        peptide -title x1.good_proteins_peptide.fasta
        //dna x1.good_proteins_dna.fasta
        query find product
        peptide -title x1.all_peptides_for_mass_spec.fasta        
        //dna x1.all_peptides_dna.fasta   
        table -title -o x1.good_proteins_dna.txt -f /home/mieg/gall/tables/x1.gg2product2dna.def  "very_good_product || ( good_product && best_product)"
        table -title -o x1.all_peptides_dna.txt -f /home/mieg/gall/tables/x1.gg2product2dna.def  
     
EOF
      touch x1.fastadump.done
    endif

##################### auxiliary dumps 
##### gene 2 accession
    if (1 && ! -e x1.gene2accession.done) then
      echo "dumping x1.gene2accession.txt"
      $tacembly . <<EOF
        table -title -o x1.mRNA2GeneID2NM.txt -f /home/mieg/gall/tables/x1.mRNA2GeneID2NM.def
        table -title -o x1.gene2accession2tissue.main_genes.txt -f /home/mieg/gall/tables/x1.gene2accession.def "NOT cloud"
        table -title -o x1.gene2accession2tissue.cloud_genes.txt -f /home/mieg/gall/tables/x1.gene2accession.def cloud
        quit
EOF
      touch x1.gene2accession.done
    endif

######## Introns2dna
    echo "dumping x1.introns2dna"
    if (1 && ! -e x1.introns2dna.done) then
      # x1.introns2dna.def parameter is a filter on class tg
      # export all introns and their list of supporting clones
      $tacembly .  <<EOF
        table -title -o x1.introns2dna2support.pretxt -f /home/mieg/gall/tables/x1.introns2dna.def gene
        count 
        find tg
        table -title -o x1.gene2chromosome2coordinates.txt  -f /home/mieg/gall/tables/x1.tg2intmap.def
        find tg
        show -a -f x1.gene2assembled_from.ace assembled_from
        query find clone
        list -a -f x1.introns2dna.done
EOF
      if (-e x1.introns2dna.done) mv x1.introns2dna2support.pretxt x1.introns2dna2support.txt
    endif

######## Pierre de la Grange
    echo "dumping x1.pierre for Pierre de la Grange, 2006"
    if (1 && ! -e x1.pierre.ZH$chrom.txt) then
      $genecardexport -db . -pierre >! x1.geneStructureAndSupport.txt
    endif
##### done
  popd
  endif # ZH$chrom


cd $ici
end
echo -n 'End of phase x1 '
date

goto phaseLoop

############################################################
## gff dump tar/ftp

phasex2:

echo -n 'Start of phase x2 tar the gff dump'
date
cd $ici

foreach  chrom ($chromSet)
  if ($chrom == 'Y') then

    if (! -d Results) mkdir Results
    cd Results
    
    #if (! -d AceView.ncbi_36.good_proteins.ace) mkdir AceView.ncbi_36.good_proteins.ace
    #if (! -d AceView.ncbi_36.gene.support) mkdir AceView.ncbi_36.gene.support
    #if (! -d AceView.ncbi_36.cloud_gene.support) mkdir AceView.ncbi_36.cloud_gene.support
    #if (! -d AceView.ncbi_36.gene2accession) mkdir AceView.ncbi_36.gene2accession

    pushd ../ZH1
    ls x1.* | grep -v gff_qual | grep -v done | sed -e 's/x1.//' > ../Results/myx1
    popd
    foreach ff (`cat myx1`)
      if (! -e AceView.$release.$ff.gz) then
        cat ../ZH*/x1.$ff > AceView.$release.$ff
        gzip AceView.$release.$ff
      endif
    end
    \rm myx1
  endif # chrom == Y
end # foreach chrom

echo -n 'End of phase x2 '
date

cd $ici
goto phaseLoop

############################################################
## RefMaker for Donna/Kim. exports only best_in_gene mrna

phasex3:

echo -n 'Start of phase x3 RefMaker: '
date

setenv best 'best_in_gene &&  Score > 0 &&  Rating = A && RefSeqMaker'
setenv newrefseq 'RefSeq AND COUNT {FOLLOW from_gene ; cdna_clone = nm_* } = 0'
setenv allrefseq 'RefSeq'
setenv Aplus_alternative 'NOT Refseq'

if (! -d donna) mkdir donna
if (! -d donna/newrefseq) mkdir donna/newrefseq
if (! -d donna/allrefseq) mkdir donna/allrefseq
if (! -d donna/Aplus_alternative) mkdir donna/Aplus_alternative

foreach  chrom ($chromSet)
  if (! -e $ici/ZH$chrom/x3.done) then
    echo "x3 refmaker $chrom"
    if (-d $ici/ZH$chrom) then
      cd $ici/ZH$chrom
#goto x3.plusbas
        $tacembly . <<EOF
          table -o x3.newrefseq.$chrom.txt -f $ici/tables/RefSeqExport/refMaker.def  "$best && $newrefseq"
          query find mrna $best && $newrefseq
          follow RefSeqMaker
          dna x3.newrefseq.$chrom.dna
          table -o x3.allrefseq.$chrom.txt -f $ici/tables/RefSeqExport/refMaker.def  "$best && $allrefseq"
          query find mrna $best && $allrefseq
          follow RefSeqMaker
          dna x3.allrefseq.$chrom.dna
          table -o x3.Aplus_alternative.$chrom.txt -f $ici/tables/RefSeqExport/refMaker.def  "$best && $Aplus_alternative"
          query find mrna $best && $Aplus_alternative
          follow RefSeqMaker
          dna x3.Aplus_alternative.$chrom.dna
          quit
EOF

x3.plusbas:
        gawk -f $ici/bin/x3.txt2agp.awk x3.newrefseq.$chrom.txt >! $ici/donna/newrefseq/newrefseq.$chrom.agp
        gawk -f $ici/bin/x3.txt2agp.awk x3.allrefseq.$chrom.txt >! $ici/donna/allrefseq/allrefseq.$chrom.agp
        gawk -f $ici/bin/x3.txt2agp.awk x3.Aplus_alternative.$chrom.txt >! $ici/donna/Aplus_alternative/Aplus_alternative.$chrom.agp

	cp x3.newrefseq.$chrom.dna  $ici/donna/newrefseq/newrefseq.$chrom.fasta
	cp x3.allrefseq.$chrom.dna  $ici/donna/allrefseq/allrefseq.$chrom.fasta
	cp x3.Aplus_alternative.$chrom.dna  $ici/donna/Aplus_alternative/Aplus_alternative.$chrom.fasta

        touch x3.done
        cd $ici
     else
       echo "did not find $ici/ZH$chrom"
     endif
   endif
end

goto phaseLoop

############################################################
############################################################
## consolidate, export modified strand

phasec1:

echo -n 'Start of phase c1 '
date

if (! -d $ici/StrandInfo ) then
    mkdir  $ici/StrandInfo
    cd   $ici/StrandInfo
    mkdir database
    ln -s ../acedata/wspec 
    ln -s ../acedata/wgf
    ln -s ../acedata/whelp
    $tacembly . << EOF > /dev/null
y
      pparse ../acedata/methods.ace
      save
      quit
EOF
    cd $ici
endif

if (-e manual_operation) then
  cd $ici
  if (! -e StrandInfo/allburied.list) then
    cat $ici/ZH*/d2.buried.ace | gawk '/^Buried_est/{printf ("Sequence %s\n", $2);}' | sort -u > ! StrandInfo/allburied.list
  endif

  foreach ii (X 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
    tbly EstMarkInfo$ii <<EOF
      key StrandInfo/allburied.list
      query ! is_buried_under
      edit is_buried_under
      save
      quit
EOF
  end
endif

if (-e $ici/StrandInfo/_readall) \rm $ici/StrandInfo/_readall
touch $ici/StrandInfo/_readall
foreach  chrom ($chromSet)
  echo -n "Phase c1: consolidate strand $chrom "
  date

  if (! -e $ici/StrandInfo/strand.$chrom.done) then
    cd $ici/StrandInfo
    echo '// strandinfo' >>  _readall
    $tacembly $ici/ZH$chrom <<EOF
      query find est from_gene && Manual_internal_deletion
      show -a -f $ici/StrandInfo/Manual_internal_deletion.$chrom.preace    Manual_internal_deletion
      query find est from_gene && Manual_no_internal_deletion
      show -a -f $ici/StrandInfo/Manual_no_internal_deletion.$chrom.preace   Manual_no_internal_deletion  
      query find est from_gene && Manual_transpliced_to
      show -a -f $ici/StrandInfo/Manual_transpliced_to.$chrom.preace    Manual_transpliced_to
      query find est from_gene && Hand_Clipping
      show -a -f $ici/StrandInfo/Hand_Clipping.$chrom.preace    Hand_Clipping
      query find est from_gene && manualStrand // (forward && areverse) || (reverse && aforward)
      show -a -f $ici/StrandInfo/manualStrand.$chrom.preace manualStrand
      show -a -f $ici/StrandInfo/manualStrandStrand.$chrom.preace Strand
      query find est from_gene && real_5prime
      show -a -f $ici/StrandInfo/real_5prime.$chrom.preace real_5prime
      query find est from_gene && real_3prime
      show -a -f $ici/StrandInfo/real_3prime.$chrom.preace real_3prime
      query find est from_gene && Vector_clipping:3 = manual
      show -a -f $ici/StrandInfo/Vector_clipping3.$chrom.preace Vector_clipping
      // query find est from_gene && PolyA_after_base
      // show -a -f $ici/StrandInfo/PolyA_after_base.$chrom.preace PolyA_after_base
      query find est from_gene && manual_polyA
      show -a -f $ici/StrandInfo/manual_polyA.$chrom.preace manual_polyA
      // query find est from_gene && Number_of_terminal_A
      // show -a -f $ici/StrandInfo/Number_of_terminal_A.$chrom.preace Number_of_terminal_A
      query find est from_gene && Initial_polyA
      show -a -f $ici/StrandInfo/Initial_polyA.$chrom.preace Initial_polyA
      query find est from_gene && Initial_polyT
      show -a -f $ici/StrandInfo/Initial_polyT.$chrom.preace Initial_polyT
      query find cdna_clone comment
      show -a -f  $ici/StrandInfo/Clone_comment.$chrom.preace comment
      query find cdna_clone Fuse_to_clone
      show -a -f  $ici/StrandInfo/Fuse_to_clone.$chrom.preace Fuse_to_clone
      query find cdna_clone Ignore_this_clone
      show -a -f  $ici/StrandInfo/Ignore_this_clone.$chrom.preace  Ignore_this_clone
      query find est from_gene && ((forward && areverse) || (reverse && (!aPrioriStrand || aforward)))
      query forward
      list -a -f  $ici/StrandInfo/forward.$chrom.list
      undo
      query reverse
      list -a -f  $ici/StrandInfo/reverse.$chrom.list
      show -a -f $ici/StrandInfo/Strand.$chrom.preace1 Strand
      // DO NOT  save you stupid, i may have flipped the strands
      quit
EOF
    cat *.$chrom.preace >! info.$chrom.ace
    touch strand.$chrom.done
    cd $ici
  endif
end

cd  $ici/StrandInfo

if (! -e strand.read.done) then
  cat forward.*.list | grep Sequence >! allforward.list
  cat reverse.*.list | grep Sequence >! allreverse.list

  cat *.preace >! all.manual.ace

  $tacembly . <<EOF 
    pparse  all.manual.ace
    list -a -f allest.list
   save
   quit
EOF
  touch strand.read.done
endif


# force the correct strand in all the MarkInfo dbs
if (! -e strand.forced.done) then
  foreach dd (`ls -d $ici/EstMarkInfo*`)
    $tacembly $dd <<EOF
      key all.reverse.list
      query !reverse && !mForward && ! Ref_Seq
      edit reverse
      key all.forward.list
      query !forward && !mReverse
      edit forward
      key allest.list
      list -a -f myest.list
      save
      quit
EOF

    $tacembly . <<EOF
      key myest.list
      spush
      follow cdna_clone
      sor
      spop
      show -a -f mydata.ace
      quit
EOF

    $tacembly $dd <<EOF
      pparse mydata.ace
      save
      quit
EOF

 end
  touch strand.forced.done
endif
 
  cd $ici


echo -n 'End of phase c1 '
date

goto phaseLoop

############################################################
## consolidate, export mapping

phasec3:

echo -n 'Start of phase c3 '
date

 
if (! -d $ici/StrandInfo ) then
    echo "Run phase c1 before phase c3"
    exit 1
endif

  echo -n "Phase c3: consolidate mapping "
  date

  if (! -e $ici/ZZ/chrom2est.done) then
    $tacembly  $ici/ZZ <<EOF
      table -o  $ici/StrandInfo/chrom2est.txt -f $ici/tables/chrom2est.def
      quit
EOF

    gawk '{est=$2; map=substr($1,6,2) ; gsub(/_/,"",map) ; printf ("Sequence %s\nIntMap %s\n\n",est,map);}'  \
         $ici/StrandInfo/chrom2est.txt >!  $ici/StrandInfo/chrom2est.ace
    touch $ici/ZZ/chrom2est.done
  endif

echo -n 'End of phase c3 '
date

goto phaseLoop

############################################################
############################################################
############################################################
############################################################
## Phase q1a : prepare the genomic dna

phaseq1a:

echo -n 'Start of phase q1a, obsolete, done in phase 4 '
date

foreach chrom ($chromSet)
  if (-e ZH$chrom/q1a.done) continue
  pushd ZH$chrom
    $tacembly . << EOF  > /dev/null
      query find sequence is_cosmid OR junction OR Is_gene_tile
      query Is_gene_tile
      dna q1a.genomic2.dna
      query find sequence YBR_contig ; follow source
      show -a -f q1a.ybr_source.ace
      quit
EOF
  touch q1a.done
  popd
end
    
echo -n 'End of phase q1a '
date

goto phaseLoop

############################################################
## Phase q1b : export the genes validated in d2

# topical rescue
foreach  chrom ($chromSet) 
  if (! -e $ici/ZH$chrom/s3.rescued) then
    $tacembly  $ici/ZH$chrom <<EOF 
      pparse $ici/ZH$chrom/q1b.dumpgenes.ace
      save
      quit
EOF
    touch  $ici/ZH$chrom/s3.rescued
  endif
end
goto phaseLoop

phaseq1b:

echo -n 'Start of phase q1b '
date
 

foreach  chrom ($chromSet)
  if (! -e $ici/ZH$chrom/q1b.dumpgenes.ace) then
    echo "q1b : $chrom exporting validated genes"
    if (-e $ici/ZH$chrom/q1b.test) \rm $ici/ZH$chrom/q1b.test
    $tacembly_no_save  $ici/ZH$chrom <<EOF 
      pparse $ici/main_clone_ncbi.ace 
      query find sequence IS *v && genes && ! genomic
      edit is_gene_tile
      save
          query find mrna
          acem
            cdna_kantor
            quit
          query find gene
          acem
            cdna_kantor
            quit
          save
      query find kantor domain
      edit -D Domain Mitochondrial_cleavage_site_domain
          query find product ! best_product && ! good_product && ! uorf_candidate
          spush
          follow peptide
          sor
          spop
          kill    // do NOT save after dumping   
      query find sequence Reference
      edit -D Reference
      query find mrna from_gene
      spush
      follow dna
      sor
      undo
      follow from_gene
      sor
      follow Genomic_sequence
      sor
      undo
      follow cdna_clone
      sor
      follow read
      sor
      follow dna
      sor
      query find mrna from_gene
      follow product
      sor
      follow peptide
      sor
      undo
      follow kantor
      sor
      follow peptide
      sor
      query find sequence YBR_contig
      sor
      query find gene  // gene boxes provide the link with biology
      sor 
      query find sequence IS $chrom || IS "$chrom|$species_pmd*" // gives global chromosome coordinates
      sor
      query find sequence Is_predicted_gene
      sor
      query find sequence YBR_contig // to grab the coords of the gene tiles
      sor
      spop
      show -a -f $ici/ZH$chrom/q1b.dumpgenes.preace
      find model
      list -a -f $ici/ZH$chrom/q1b.test
      quit // DO NOT save, i killed the ! good_product
EOF
    if (-e $ici/ZH$chrom/q1b.test) mv $ici/ZH$chrom/q1b.dumpgenes.preace $ici/ZH$chrom/q1b.dumpgenes.ace
  endif


if (! -e $ici/ZH$chrom/q1b.am.dna.done) then
    $tacembly  $ici/ZH$chrom <<EOF 
      query find sequence refseqmaker
      edit colour palemagenta
      spush
      follow dna
      sor
      spop
      show -a -f  $ici/ZH$chrom/q1b.am.preace
      save
      find model
      list -a -f $ici/ZH$chrom/q1b.test
      quit
EOF
  if (-e $ici/ZH$chrom/q1b.test)  then
    mv $ici/ZH$chrom/q1b.am.preace  $ici/ZH$chrom/q1b.am.ace
    touch $ici/ZH$chrom/q1b.am.dna.done
  endif
endif

if (! -e $ici/ZH$chrom/q1b.locuslink.done) then
    $tacembly  $ici/ZH$chrom <<EOF 
      query find locuslink
      show -a -f  $ici/ZH$chrom/q1b.locuslink.ace
      query find geneid
      show -a -f  $ici/ZH$chrom/q1b.geneid.ace
      quit
EOF
  touch $ici/ZH$chrom/q1b.locuslink.done
endif

if (! -e $ici/ZH$chrom/q1b.pg.ace) then
    $tacembly  $ici/ZH$chrom <<EOF 
      query find sequence Is_predicted_gene
      show -a -f  $ici/ZH$chrom/q1b.pg.preace
      quit
EOF
  mv $ici/ZH$chrom/q1b.pg.preace $ici/ZH$chrom/q1b.pg.ace
endif

# hack, normally this is already part of the est dump
if (0 && ! -e $ici/ZH$chrom/q1b.tissue.done) then
    $tacembly  $ici/ZH$chrom <<EOF 
      query find sequence tissue
      show -a -f  $ici/ZH$chrom/q1b.tissue.ace tissue
      quit
EOF
  touch $ici/ZH$chrom/q1b.tissue.done
endif

end # each chrom


cd $ici

echo -n 'End of phase q1b '
date

goto phaseLoop

############################################################
## Phase q2a : read in ZZ the genomic dna exported in phase d0/q1a

phaseq2a:

echo -n 'Start of phase q2a '
date
 
if ! (-d  $ici/ZZ) then
 mkdir $ici/ZZ
 cd  $ici/ZZ
 mkdir database

 ln -s ../acedata/wspec 
 ln -s ../acedata/wgf
 ln -s ../acedata/whelp
 ln -s ../font
 $tacembly . <<EOF
y
   pparse ../acedata/methods.ace
   query find clone strategy
   kill
   pparse ../strategy.RZH.ace
   pparse ../main_clone_ncbi.ace 
   edit name_by_gene
   pparse ../acedata/tabledef.aceview.ace
   pparse  $ici/acedata/pFamilyDesc.ace
   pparse  $ici/acedata/go.obo.ace
   save
   quit
EOF
endif

cd $ici/ZZ

if (-e _readallchr) \rm _readallchr
  
# d1.genomic.fasta contains the double-tiles dna 
foreach  chrom ($chromSetAll)
  echo "q2a : reading chrom $chrom"
  if (! -e read$chrom.done && -e ../tmp/CH$chrom/dumpgenomic.ace) then
    touch _readallchr
      echo "pparse   ../tmp/CH$chrom/dumpgenomic.ace" >> _readallchr
      echo "pparse   ../tmp/CH$chrom/dumpgenomicdna.ace" >> _readallchr
      echo "pparse   ../XmInfo/a6.ncbi_models.$chrom.ace" >> _readallchr
      echo "pparse  ZH$chrom/q1a.genomic.dna" >> _r
      echo "pparse  ZH$chrom/q1a.genomic2.dna" >> _r
      echo "pparse  ZH$chrom/q1a.ybr_source.ace" >> _r
  touch read$chrom.done
  endif
end

if (-e _readallchr) then
  echo 'status' >> _readallchr
  echo 'save' >> _readallchr
  echo 'quit' >> _readallchr

  $tacembly . < _readallchr >! readallchr.log
  echo "gene2chrom"
  $gene2chrom -any -gs -i . >! g2c.gsi.ace
 echo "pparse g2c.gsi.ace" | $tacembly . 

endif

cd $ici

echo -n 'End of phase q2a '
date

goto phaseLoop

############################################################
## Phase q2b : read in ZZ the validated genes exported in q1b

 phaseq2b:

echo -n 'Start of phase q2b '
date

cd $ici/ZZ

if (0) then
    $tacembly . <<EOF 
      //read-models
      save
    quit
EOF
endif


setenv chromSet "$chromSetAll"
foreach  chrom ($chromSet)
  if (! -e q2b.readgenes$chrom.done && -e $ici/ZH$chrom/q1b.dumpgenes.ace) then
    echo "q2b : reading genes $chrom "
    date
    touch q2b.log
    if (-e q2b.readgenes$chrom.test) \rm q2b.readgenes$chrom.test
    $tacembly . <<EOF | tee -a q2b.log
      read-models
      query find paper COUNT gene > 500
      edit -D gene
      query find paper COUNT sequence > 1000
      edit -D Sequence
      query find paper ! IS pm* && ! title
      kill
      pparse $ici/main_clone_ncbi.ace
      pparse $ici/acedata/webtables.ace
      pparse  $ici/ZH$chrom/q1b.dumpgenes.ace
      pparse  $ici/ZH$chrom/q1b.am.ace
      // pparse  $ici/ZH$chrom/d15.pap2cit.ace
      pparse  $ici/ZH$chrom/q1b.locuslink.ace
      pparse  $ici/ZH$chrom/q1b.geneid.ace
      // pparse  $ici/ZH$chrom/q1b.tissue.ace
      pparse  $ici/ZH$chrom/g2c.pgi.ace
      pparse  $ici/ZH$chrom/d2.buried.ace
      query find sequence junction OR Is_Cosmid
      edit -D dna  // conflicts with DNA is the tiles
      save
      find model
      list -a -f q2b.readgenes$chrom.test
      quit
EOF
    if (-e q2b.readgenes$chrom.test) then
      \rm q2b.readgenes$chrom.test
      touch q2b.readgenes$chrom.done
    endif
  endif

end # each chrom

cd $ici

echo -n 'End of phase q2b '
date

goto phaseLoop

############################################################
## Phase q2c : read in ZZ the standard mrnas

phaseq2c:

echo -n 'Start of phase q2c '
date
 echo "tax_common_ancestor = $species_tax_common_ancestor   :: conserved outside self"  
 echo "tax_common_ancestor2 = $species_tax_common_ancestor2 :: ancient, outside selected ancestral node, eutheria for human,rat,mouse"

if (! $?species_tax_common_ancestor2) then
  echo "missing species_tax_common_ancestor2, should be Eutheria for mouse/rat/human, see wfiche/taxtree.h"
  exit 1
endif
if ! (-d  $ici/ZZ) then
 echo "ZZ dir missing"
  exit 1 
endif

cd $ici/ZZ

## 1: some trivialities

if (! -e readmrna.done) then
  echo 'q2c:1:trivialities'

# very often a5.extern.ace is completed at a late stage and needs to be refreshed
  $tacembly $ici/LocusLinkInfo <<EOF 
    query find extern
    show $ici/LocusLinkInfo/a5.extern.ace
    quit
EOF


  $tacembly . <<EOF 
    pparse  $ici/acedata/methods.ace
    pparse  $ici/acedata/webpfamg.ace
    pparse  $ici/acedata/webtables.ace
    pparse  $ici/acedata/webviews.ace
    pparse  $ici/acedata/psort_domain_list.ace
    pparse  $ici/acedata/pFamilyDesc.ace
    pparse  $ici/acedata/go.obo.ace
    pparse  $ici/LocusLinkInfo/a5.extern.ace
    pparse  $ici/MeshInfo/meshdisease.ace
    query find go_b "biological_process unknown"
    kill
    query find go_m "molecular_function unknown"
    kill
    query find go_c "cellular_component unknown"
    kill
    query find go_b "biological_process"
    kill
    query find go_m "molecular_function"
    kill
    query find go_c "cellular_component"
    kill 
    query find clone strategy
    edit -D NoKantorInfo   
    save
    quit
EOF
  touch readmrna.done
endif

if (! -e README.mesh.done) then
  echo "Please run bin/README.mesh by hand"
  exit 1
endif

# MAXIM INFO ?

## 2: BIBLIO
##  transform pmid papers to complete citation, stick them in the gene
### 2.a: first read the papers known in LocusLinkInfo

if (! -e q2c.pap2cit.a5.done) then
  echo 'q2c:2a1:export list of papers'
  $tacembly . <<EOF
    query find extern gad && gene && reference
    aql -active -o q2c.gad2pap2gene.txt select p,g from gad in @active:1, p in gad->reference, g in gad->gene
    quit
EOF

  gawk  -F '\t' '/\"/{printf ("Gene %s\nReference %s\n\n", $2,$1);}' q2c.gad2pap2gene.txt >! q2c.gad2pap2gene.ace

  $tacembly . <<EOF
    pparse q2c.gad2pap2gene.ace
    query find paper gene AND IS pm* AND NOT citation
    list -a -f q2c.papnocit.a5.list
    save
    quit
EOF
 
  echo 'q2c:2a2:recover them in LocusLinkInfo'
  $tacembly $ici/LocusLinkInfo <<EOF
    keyset-read q2c.papnocit.a5.list
    spush
    follow abstract
    sor
    spop
    show -a -f  q2c.papnocit.a5.ace
    quit
EOF
 
  echo 'q2c:2a3:parse the recovered papers'
  $tacembly . <<EOF
    pparse   q2c.papnocit.a5.ace
    save
    quit
EOF
  touch q2c.pap2cit.a5.done
endif # q2c.pap2cit.a5.done

### 2:b Import from pubmed
#### 2:b1 get the list
if (! -e q2c.pap2cit.done) then 
  echo 'q2c:2b1:kill non gene papers and list the still missing paper'
  $tacembly . <<EOF
    query find paper NOT (IS pm*) && Gene
    edit -D Gene
    query find gene ! transcribed_gene
    kill
    query find paper NOT gene
    spush
    follow abstract
    sor
    spop
    kill
    save 
    query find paper IS pm* && gene && NOT citation
    list -a -f q2c.pap2cit.list
    quit
EOF
  if (-e q2c.pap2cit.list) touch q2c.pap2cit.done

endif # q2c.pap2cit.done

#### 2:c import from pubmed
if (-d $ici/LocusLinkInfo/BIBLIO/PmImport && ! -e database/lock.wrm && -e q2c.pap2cit.done && ! -e q2c.medline2ace.done) then

# get the paper from the medline server
  echo 'q2c:2c1: collecting paper from medline server '
  perl $ici/LocusLinkInfo/BIBLIO/PmImport/medlineGet.pl < q2c.pap2cit.list > ! q2c.medline2ace.preace

# .ace them
  echo 'q2c:2c2: ace them'
  perl $ici/LocusLinkInfo/BIBLIO/PmImport/medline2ace.pl < q2c.medline2ace.preace > ! q2c.medline2ace.ace

# parse the results
  echo 'q2c:2c3: parse the papers recovered from medline'
  $tacembly . <<EOF
    pparse q2c.medline2ace.ace
    query find paper citation
    query find paper COUNT gene > 500
    edit -D gene
    save
    list -a -f q2c.medline2ace.ok
    quit
EOF
  touch q2c.medline2ace.done
endif # q2c.medline2ace.done

### 3: cytogenetic should be unique
if (! -e q2c.cytogenetic.done) then
  echo 'q2c:3.1 export ambiguous cytogenetic positions'
  $tacembly . <<EOF
    query find gene COUNT cytogenetic > 1
    show -a -f q2c.cytogenetic.preace cytogenetic
    quit
EOF

  echo 'q2c:3.2 awk ambiguous cytogenetic positions'
gawk '/^Cytogenetic/ {printf("-D Cytogenetic\n");} {print}' q2c.cytogenetic.preace >!  q2c.cytogenetic.ace

  echo 'q2c:3.3 clean up ambiguous cytogenetic positions'
  $tacembly . <<EOF
    query find map IS "-"
    kill
    query find product Mitochondrial_cleavage_site_domain
    edit -D Mitochondrial_cleavage_site_domain
    pparse  q2c.cytogenetic.ace
    list -a -f q2c.cytogenetic.ok
    save
    quit
EOF


if (-e  q2c.cytogenetic.ok) touch q2c.cytogenetic.done
endif # q2c.cytogenetic.done

## 4: Change all gene names to positional names so that they can be used to order the gene tables
## now done in each chromosome in phase q2a

## 5:recover the names of the previous release and stick them in the gene
if (1 && ! -e q2c.previousName.done) then
  if (-e q2c.previousName.predone) \rm q2c.previousName.predone

  echo 'q2c:5.1 transfer previous names from clones to genes'
  $tacembly . << EOF
    table -o  q2c.previousName.txt -f ../tables/q2c.previousName.def
    quit
EOF

cat << EOF >! q2c.previousName.awk
/\"/ { gene=\$4; nn=\$2; printf("Gene %s\nNewNameOld %s\n\n", gene, nn);}
EOF

  echo 'q2c:5.2 awk'
  gawk -f q2c.previousName.awk q2c.previousName.txt >!  q2c.previousName.ace

  echo 'q2c:5.3 parse previous names into genes'
  $tacembly . <<EOF
    pparse  q2c.previousName.ace
    save
    find clone
    list -a -f q2c.previousName.predone
    quit
EOF

  if (-e q2c.previousName.predone) touch q2c.previousName.done
endif # q2c.previousName.done

## 6:parse the gnomons 

if (! -e q2c.gnomons.done) then

  echo 'q2c:6 parse the gnomons'

  echo ' ' >! q2c.allgnomons.ace
  cat $ici/ZH*/q1b.pg.ace >> q2c.allgnomons.ace
  cat $ici/XmInfo/a6.ncbi_models.*.ace  >> q2c.allgnomons.ace
  cat $ici/ZH*/d7.xm.ybr*.ace >>  q2c.allgnomons.ace
  $tacembly . <<EOF
    pparse  q2c.allgnomons.ace
    save
    find clone
    list -a -f q2c.gnomons.predone
    quit
EOF
  if (-e q2c.gnomons.predone) mv q2c.gnomons.predone q2c.gnomons.done
endif # q2c.gnomons.done


## 7: discard long cloud genes (jan 2004) and junk
if (! -e q2c.badcloud.done) then

  echo 'q2c:7 discard long cloud genes and discard junk data'
  $tacembly . <<EOF
    query find sequence Possible_genomic_error 
    edit -D Possible_genomic_error
    query find gene cloud_gene && COUNT {>transcribed_gene ; fuzzy || other} > 0
    list -a -f q2c.badcloud.list
    show -a -f q2c.badcloud.preace intmap
    query find gene puta && !Pfam && !geneid && ! COUNT {>transcribed_gene;>mrna ; DNA:2 > 1000 && COUNT {>cdna_clone ; > read ; from_gene:6 < 7 } > 0 } > 0
    show -a -f q2c.badnoncloud.preace intmap
    quit
EOF

  gawk '/^Gene/{g=$2;}/IntMap/{a=$3;b=$4;if (a-b>10000 || b-a > 10000)printf("Gene %s // %d\n",g,b-a);}' q2c.badnoncloud.preace > ! q2c.badnoncloud.list

  $tacembly . <<EOF
    key  q2c.badcloud.list
    spush
    key  q2c.badnoncloud.list
    sor
    spop
    spush
    follow transcribed_gene
    sor
    follow mrna
    sor
    follow product
    sor
    spop
    spush
    follow dna
    sor
    undo
    follow peptide
    sor
    spop
    kill
    query find mrna !from_gene
    spush
    follow refseqmaker
    sor
    undo
    follow product
    sor
    spop
    spush
    follow dna
    sor
    undo
    follow peptide
    sor
    spop
    kill  
    query find product ! mrna
    spush
    follow peptide
    sor
    spop
   kill
    query find tg !details && ! cdna_clone
   kill
  
    webquery precompute -1  // gene2newname force
    query find tg Intron_boundaries
    acem
      gene_intron 
      quit
    save
    find clone
    list -a -f q2c.badcloud.predone
    quit
EOF


  if (-e q2c.badcloud.predone) touch q2c.badcloud.done
endif # q2c.badcloud.done

# export gene2accesion for the web
  if (0 && ! -e  $ici/ZZ/x1.gene2accession.txt) then
      $tacembly $ici/ZZ <<EOF
        table -title -o $ici/ZZ/x1.gene2accession.txt -f $ici/tables/x1.gene2accession.def
        quit
EOF
  endif
echo hello
cd $ici/ZZ
# Interactions, must be done in ZZ, in XH* we do not have all genes available
  $tacembly . <<EOF
    table -o d14.geneid2gene_interacts.txt -f $ici/tables/d14.geneid2gene_interacts.def
    quit
EOF

   gawk  -F '\t' '/\"/{printf("Gene %s\nwith_gene %s", $2, $6); if($4 != NULL) { printf(" %s", $4) ; if($5 != NULL) printf(" %s", $5)  ;} printf("\n\n");}' d14.geneid2gene_interacts.txt >! d14.geneid2gene_interacts.ace

  $tacembly . <<EOF
    pparse d14.geneid2gene_interacts.ace
    save
    quit
EOF


cd $ici/ZZ
# set the 'pastilles' form the gene-locator display
# synchromize with makemrna.c: mrnaSaveGenePastilles 
echo q2c set the pastilles for the gene-locator display

  if (! -e  q2c.pastilles.done) then
      $tacembly . <<EOF
        read-models
        query find product ! mrna
        kill
        query find mrna ! from_gene && ! from_prediction
        kill
        query find transcribed_gene !mrna
        kill
        query find intron NOT From_gene && NOT From_genefinder
        kill
        query find mrna complete
        spush
	  query find mrna found3p && found5p
          sminus
          query ! complete
          edit complete
        spop
        query from_gene   // if from_prediction, complete is herited
        edit -D complete
        query find paper mesh && COUNT {>extern antigad} > 0
        edit -D mesh
        query find gene (! Complex_locus || ! transcribed_gene)  && pastille_regulation_complex_locus
        edit -D pastille_regulation_complex_locus
        query find gene Complex_locus && transcribed_gene
        edit pastille_regulation_complex_locus 
        query find gene pastille_regulation_structure
        spush
          query find gene nsce
          spush
            query find gene noce
            sor
            query find gene nCitroenIntrons
            sor
            query find gene nOverlappingCentralExons
            sor
          spop
          query transcribed_gene
          sminus
          query  ! pastille_regulation_structure
          edit pastille_regulation_structure
          query find gene ! pastille_regulation_structure && (nNonOverlappingAltLastExons > 1 || nNonOverlappingAltFirstExons > 1) 
          query transcribed_gene
          sminus
          edit pastille_regulation_structure
        spop
        edit -D pastille_regulation_structure
        query find gene pastille_regulation_RNA_editing
        spush
          query find gene RNA_editing
          query transcribed_gene
          sminus
          query NOT pastille_regulation_RNA_editing
          edit  pastille_regulation_RNA_editing
        spop
        edit -D pastille_regulation_RNA_editing
        query find gene pastille_regulation_NMD
        spush
          query find mrna NMD
          query >from_gene ; > gene
          query transcribed_gene
          sminus
          query NOT  pastille_regulation_NMD
          edit pastille_regulation_NMD
        spop
        edit -D pastille_regulation_NMD
        query find gene pastille_regulation_Valid3p
        spush
          query find mrna  COUNT Valid3p > 1
          query >from_gene ; > gene
          query transcribed_gene
          sminus
          query NOT  pastille_regulation_Valid3p
          edit  pastille_regulation_Valid3p
        spop
        edit -D pastille_regulation_Valid3p
        query find product uORF_candidate && (best_product || good_product)
	edit -D uORF_candidate
        query find product uORF_candidate && !( COUNT {>mrna ; >product ; good_product;} > 0)
	edit -D  uORF_candidate
        query find gene pastille_regulation_uORF
        spush
	  query find product uORF_candidate
          query >mrna; COUNT {>product ; very_good_product} > 0 ; >from_gene ; > gene
          query transcribed_gene
          sminus
          query NOT  pastille_regulation_uORF
	  edit pastille_regulation_uORF
        spop
	edit -D pastille_regulation_uORF
        query find gene non_atg_start
        spush
	  query find product best_product && good_product && at_position_1  && First_Kozak=1 && (First_ATG > 1 || ! First_ATG)
          follow genebox
          query transcribed_gene
          sminus
          query NOT non_atg_start
	  edit non_atg_start
        spop
        edit -D non_atg_start
        query find gene  pastille_regulation_antisens
        spush
          query find transcribed_gene gt_ag && Antisens_to
          aql -active -o q2c.pastille_regulation_antisens.tg.txt select tg, ag, a1 from tg in @active:1, ag in tg->Antisens_to  , a1 in ag[1] where a1 > 40
          follow gene 
          query nStandardIntrons
          query transcribed_gene
          sminus
	  query NOT pastille_regulation_antisens
          edit pastille_regulation_antisens
        spop
        edit -D pastille_regulation_antisens
        query find gene pastille_conserved_pfam
        spush
          query find PFam ; ! IS rvt_1 && ! IS transposase_* && ! IS ribosomal_* && ! IS  gag_* && ! IS  rve && ! IS  rvp && ! IS  dde && ! IS  gp36
          follow gene
          query transcribed_gene
          sminus
          query NOT pastille_conserved_pfam
          edit pastille_conserved_pfam
        spop
        edit -D pastille_conserved_pfam
        query find gene pastille_conserved_taxblast
        spush
          query find product  ((best_product && good_product) || very_good_product)
          query Tax_common_ancestor !=  $species_tax_common_ancestor && Tax_common_ancestor !=  $species_tax_common_ancestor2
          query follow genebox
          query transcribed_gene
          sminus
          query NOT pastille_conserved_taxblast  // i.e. ancient: older than selected parental node in taxtree.h
          edit pastille_conserved_taxblast 
        spop
        edit -D  pastille_conserved_taxblast
        query find gene Pastille_coding
        kstore pc
        query find gene Pastille_marginally_coding
        kstore pcm
        query find gene title = "*encoding tRNA."
        edit Non_protein_coding
        query find product good_product && best_product
        follow genebox
        query ! Non_protein_coding && transcribed_gene
        spush
          query [2* COUNT {>product;! From_prediction && best_product && good_product} - COUNT {>transcribed_gene;>mrna}] >= 0 OR  [4* COUNT {>product;! From_prediction &&  best_product && very_good_product} - COUNT {>transcribed_gene;>mrna}] >= 0
          edit Pastille_coding
          kstore pc1
          sminus
        spop
        query spliced_gene
        edit Pastille_marginally_coding 
        kstore pmc1
        kget pc
        spush
          kget pc1
          sminus
        spop
        edit -D Pastille_coding
        kget pmc
        spush
          kget pmc1
          sminus
        spop
        edit -D Pastille_marginally_coding
        query find gene Pastille_spliced_non_coding
        spush
          query find gene !pastille_coding && !Pastille_marginally_coding && nStandardIntrons
          query transcribed_gene
          sminus
          query ! Pastille_spliced_non_coding
          edit Pastille_spliced_non_coding
        spop
        edit -D Pastille_spliced_non_coding
        query  find gene Pastille_marginally_coding && Pastille_coding
        spush
        query [2* COUNT {>product; ! From_prediction && best_product && good_product} - COUNT {>transcribed_gene;>mrna}] >= 0 OR  [4* COUNT {>product;! From_prediction && best_product && very_good_product} - COUNT {>transcribed_gene;>mrna}] >= 0
        sminus
        edit -D  Pastille_marginally_coding
        spop
        edit -D  Pastille_coding
        query find gene pastille_coding && ! transcribed_gene
        edit -D  Pastille_coding
        query find gene Pastille_marginally_coding && ! transcribed_gene
        edit -D  Pastille_marginally_coding
        query find gene Pastille_spliced_non_coding && ! transcribed_gene
        edit -D  Pastille_spliced_non_coding
        query find gene pastille_disease
        spush
          query find gene
          query COUNT {{>disease} SETOR {>Mesh} SETOR {>Reference ; mesh && COUNT gene < 3 ; >Mesh  meshkey } SETOR  {>Extern;>Disease} SETOR  {>Extern ; KEGG_disease ; >pathway } SETOR  {>Extern  GAD AND NOT AntiGad ; >GAD_TITLE} SETOR  {>Extern ; OMIM_disease; >OMIM_title } ; {!Hidden_alias_of} SETOR  {>Hidden_alias_of} ; {! alias_of} SETOR  {>alias_of} ;  {IS *} SETMINUS {>meshkey ; >child ; >mesh} ; !meshkey || meshkey = C* || meshkey = F*} > 0
          query transcribed_gene
          sminus
          query ! pastille_disease
          edit pastille_disease
          query find gene locus_description || locus_phenotype || gene_id == phenotype || gene_id == essential*
          sminus
          query ! pastille_disease
          edit pastille_disease
        spop
        edit -D pastille_disease
        query find gene Spliced_gene
        spush
          query find gene ! cloud && nStandardIntrons && transcribed_gene
          sminus
          query NOT Spliced_gene
          edit  Spliced_gene
        spop
        edit  -D Spliced_gene
        query find gene  Single_exon_gene
        spush
          query find gene ! cloud && ! nStandardIntrons && transcribed_gene
          sminus
          query NOT  Single_exon_gene
          edit  Single_exon_gene
        spop
        edit  -D Single_exon_gene
        query find extern mgi
        save
        quit
EOF
    touch q2c.pastilles.done
  endif

cd $ici

echo -n 'End of phase q2c '
date

goto phaseLoop

############################################################
## Phase q2d : preindex in parallel

phaseq2d:

echo -n 'Start of phase q2d '
date

if ! (-d  $ici/ZZ) then
 echo "ZZ dir missing"
  exit 1 
endif

cd $ici/ZZ
setenv maskSet "$chromSet"
foreach  mask ($maskSet)
  if (! -e q2d.$mask.done) then 
    echo "q2d : reading genes $mask "
    date
    touch q2d.$mask.log
    if (-e q2d.$mask.test) \rm q2d.$mask.test
    $tacembly . <<EOF | tee -a q2d.$mask.log
      webquery precompute $mask q2d.$mask.ace
      find model
      list -a -f q2d.$mask.test 
      quit
EOF
    if (-e q2d.$mask.test) then
      \rm q2d.$mask.test
      touch q2d.$mask.done
    endif
  endif
  
end # each mask

cd $ici

echo -n 'End of phase q2d '
date

goto phaseLoop

############################################################
## Phase q2e : read the preindex results

phaseq2e:

echo -n 'Start of phase q2e '
date

if ! (-d  $ici/ZZ) then
 echo "ZZ dir missing"
  exit 1 
endif

cd $ici/ZZ

echo aaa
if (-e q2e._r) \rm q2e._r
touch q2e._r
setenv maskSet '1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64'
foreach  mask ($maskSet)
  if (-e q2d.$mask.done && -e q2d.$mask.ace ) then 
    echo "pparse q2d.$mask.ace" >> q2e._r
echo aaa.$mask
  endif
end # each mask
touch q2e._r
echo 'save' >>  q2e._r
echo 'find model' >>  q2e._r
echo 'list -a -f q2e.test' >>  q2e._r
echo 'quit' >>  q2e._r

echo -n "q2e : reading preindex results "
date
echo bbb
    $tacembly . < q2e._r | tee -a q2e.log
echo ccc
    if (-e q2e.test) then
      \rm q2e.test
      touch q2e.done 
    endif

cd $ici

echo -n 'End of phase q2e '
date

goto phaseLoop

############################################################
## Phase q2f : precompute the fiche in parallel

phaseq2f:

echo -n 'Start of phase q2f '
date

if ! (-d  $ici/ZZ) then
 echo "ZZ dir missing"
  exit 1 
endif

cd $ici/ZZ

setenv maskSet "$chromSet"
foreach  mask ($maskSet)
  if (! -e q2f.$mask.done) then 
    echo "q2f : precompute ficheschromosome $mask "
    date
    touch q2f.$mask.log
    if (-e q2f.$mask.ace) \rm q2f.$mask.ace
    # preview1 : store inside database
    # preview2 : export as a pipe
    # preview4 : export ace file  1,2,4 works as bit flags allowing combined operations
    # no preview: export in text or binary format compatible with the the web browser
   if (0) then
    $gifacembly1 . <<EOF >! q2f.$mask.log
      query find gene wbid OR geneid OR locuslink 
      // query IS >= F
      query IS < F
      date
      view -active  -v fgene -xml -preview1
      save
      date
      view -active  -v Genome -xml -preview1
      save
      date
      view -active  -v fmol  -xml -preview1   // preview1 store in database
      save
      date
      view -active  -v fexp  -xml -preview1
      save
      date
      view -active  -v ffunc -xml -preview1
      save
      quit
EOF
   endif

   if (1) then
    $gifacembly1 . <<EOF >! q2f.$mask.log
      query find gene wbid OR geneid OR locuslink 
      view -active  -v fgene -xml -preview4  -mask $mask  -o q2f.gene.$mask.preace  // preview4 do not store, export as acefile
      view -active  -v Genome -xml -preview4  -mask $mask  -o q2f.gene.$mask.preace  // preview4 do not store, export as acefile
      view -active  -v fmol  -xml -preview4  -mask $mask  -o q2f.mol.$mask.preace
      view -active  -v fexp  -xml -preview4  -mask $mask  -o q2f.exp.$mask.preace
      view -active  -v ffunc -xml -preview4  -mask $mask  -o q2f.func.$mask.preace

      find model
      list -a -f q2f.$mask.test 
      quit
EOF
    if (-e q2f.$mask.test) then
      \rm q2f.$mask.test
      foreach uu (gene mol exp func vgene)
        if (-e q2f.$uu.$mask.preace) mv  q2f.$uu.$mask.preace q2f.$uu.$mask.ace
      end
    endif
   endif
  endif
  
end # each mask

cd $ici

echo -n 'End of phase q2f '
date

goto phaseLoop

## worm case

 view -active  -v fgene -xml -preview
 view -active  -v fmol  -xml -preview
 view -active  -v fexp  -xml -preview
 view -active  -v ffunc -xml -preview4 -o ffunc.ace
 view -active -v DtGLOC -flash -preview
 view -active -v DtGLOCBIG -flash -preview
 view -active -v DtHseq -flash -preview
 view -active -v DtVGene -flash -preview4 -o verticalgene.ace
 view -active -v DtHseq -flash -preview
   
############################################################
## Phase q2g : read the precomputed ficheview 

phaseq2g:

echo -n 'Start of phase q2g '
date

if ! (-d  $ici/ZZ) then
 echo "ZZ dir missing"
  exit 1 
endif

cd $ici/ZZ

echo aaa
if (-e q2g._r) \rm q2g._r
touch q2g._r
foreach  ff (`ls q2f.*.ace`)
  echo "pparse $ff" >> q2g._r
end
touch q2g._r
echo 'save' >>  q2g._r
echo 'find model' >>  q2g._r
echo 'list -a -f q2g.test' >>  q2g._r
echo 'quit' >>  q2g._r

echo -n "q2g : reading preindex results "
date
echo bbb
    $tacembly . < q2g._r | tee -a q2g.log
echo ccc
    if (-e q2g.test) then
      \rm q2g.test
      touch q2g.done 
    endif

cd $ici

echo -n 'End of phase q2g '
date

goto phaseLoop

############################################################
## Phase j1 : export the genes validated in d2

phasej1:

echo -n 'Start of phase j1 '
date
 

foreach  chrom ($chromSet)
  if (! -e $ici/ZH$chrom/j1.zdump.$chrom.tar.gz) then
    echo "j1 : $chrom dumping"
    cd ZH$chrom
    mkdir dumpdir.$chrom
    $tacembly  $ici/ZH$chrom <<EOF 
      // dump -s dumpdir.$chrom
      find tg
      show -a -f j1.tg.$chrom.ace
      quit
EOF
    tar cf j1.dump.$chrom.tar dumpdir.ZH$chrom
    gzip j1.dump.$chrom.tar
    \rm -rf dumpdir.ZH$chrom
  endif
  cd $ici
end

echo -n 'End of phase j1 '
date

goto phaseLoop

############################################################
############################################################
## clean up the kantor blast result

phasekk:

echo -n 'Start of phase kk '
date
echo 'clean up erroneous kantor blast result (kantorMegapparse modified)'

foreach  chrom ($chromSet)
  echo -n "Phase kk: chromosome $chrom "
  date

  if (-d $ici/ZH$chrom ) then
     $tacembly  $ici/ZH$chrom << EOF
       query find kantor
       edit -D pfam
       edit -D blastp
       edit -D psort
       edit -D expasy
       find product
       edit -D Tax_tree
       edit -D Tax_count
       save
       quit
EOF
   endif
end # foreach chrom
echo -n 'End of phase kk '
date

goto phaseLoop

###########################################################################
###########################################################################
## phase k123: Kanor, new scripts copied from MAGIC

phasek0:
phasek1:
phasek2:
phasek9:
 
if (! -d RESULTS) mkdir RESULTS
if (! -e report.done) then
  perl bin/report.pl > RESULTS/report.`date +%F`.txt
  foreach chrom ($chromSetAll)
    scripts/submit blystats.$chrom "blystats -db ZH$chrom -p 99 > RESULTS/blystats2.ZH$chrom.`date +%F`.txt"
  end
  touch report.done
endif

echo -n "Export/Import the Kantor phase $phase : start "
 date

if (! -d ~/MEGA3) then
  echo "Kantorizing the proteins only works inside ncbi"
  goto phaseLoop
else

  if (! -d Kantor) mkdir Kantor
  foreach chrom ($chromSet)
    if (! -e ZH$chrom/d8.gid.done) continue
    if (! -d Kantor/$chrom) mkdir Kantor/$chrom
    if (! -d Kantor/$chrom/tmp) mkdir Kantor/$chrom/tmp
#     if (! -d Kantor/$chrom/tmp/$species_kantor.data) mkdir Kantor/$chrom/tmp/$species_kantor.data
#     if (! -d Kantor/$chrom/tmp/$species_kantor.data/$chrom) mkdir Kantor/$chrom/tmp/$species_kantor.data/$chrom

    scripts/Kantor.tcsh $phase $chrom ZH$chrom
  end
endif

goto phaseLoop

############################################################
############################################################
## Phase k1 : recover the available kantor

phasek1old:

echo -n 'Start of phase k1 '
date

if (! -e report.done) then
  perl bin/report.pl > report.`date +%F`.txt
  blystats -db ZHchr1 -p 99 > blystats.ZHchr1.`date +%F`.txt
  touch report.done
endif

if (-d ~/MEGA3/tmp/$species_kantor.data) then
  if (! -d tmp/$species_kantor.data) mkdir tmp/$species_kantor.data
else
  echo "Missing directory ~/MEGA3/tmp/$species_kantor.data"
  exit 1
endif

echo phase k1 chromSet="$chromSet"
if (! -d tmp/$species_kantor.data) mkdir tmp/$species_kantor.data

foreach chrom ($chromSet)
  if (-e ZH$chrom/k1.done) continue
  if (! -d tmp/$species_kantor.data/$chrom) then
    mkdir tmp/$species_kantor.data/$chrom
    touch  ZH$chrom/k1.done
  endif
  echo 'read-models' >  tmp/$species_kantor.data/$chrom/_r
  set ok=0
  set n=0
  foreach ff (`ls tmp/$species_kantor.data/$chrom/*/ace.*`)
    set n=`grep $ff ZH$chrom/database/log.wrm | grep Parsing | wc -l`
    if ($n == 0)   echo "pparse $ff" >>  tmp/$species_kantor.data/$chrom/_r
    set ok=1
  end
  echo save >> tmp/$species_kantor.data/$chrom/_r
  echo quit >> tmp/$species_kantor.data/$chrom/_r
  if ($ok == 1 && -e ZH$chrom/database/log.wrm && ! -e ZH$chrom/database/lock.wrm) then
    if (-e ZH$chrom/k2.done) \rm  ZH$chrom/k2.done
    tacembly ZH$chrom <  tmp/$species_kantor.data/$chrom/_r | tee  tmp/$species_kantor.data/$chrom/parse.log
    touch  ZH$chrom/k1.done
  endif
end

echo -n 'End of phase k1'
date

goto phaseLoop

############################################################
############################################################
## Phase k2 : recover the available kantor

phasek2old:

echo -n 'Start of phase k2 '
date

echo phase k2 chromSet="$chromSet"

foreach  chrom ($chromSet)
  if (! -e ZH$chrom/k1.done) continue
  if (-e ZH$chrom/k2.done) continue

  echo phase k2 chrom="$chrom"

  setenv Gchrom G_t$chrom'_'
  echo $Gchrom

  if (-d $ici/ZH$chrom) cd $ici/ZH$chrom
pwd

  if (0 && ! -e _k2.pfamdescr2.done) then
    $tacembly . <<EOF
      Find pfam
      edit -D Accession
      edit -D Definition
      edit -D GO
      edit -D Interpro_comment
      edit -D Paper
      edit -D Pfam_comment
      edit -D Reference
      edit -D Run_date
      save
      quit
EOF
    touch _k2.pfamdescr2.done
  endif

  if (-d database && ! -e database/lock.wrm && ! -e k2.done) then
    echo "k2 : $chrom kantorizing"
    if (-e k2.log) \rm k2.log
    $tacembly . <<EOF >! k2.prelog
      read-models
      pparse $ici/main_clone_ncbi.ace 
      query find mrna  ZZZZZ_I_donot_want_to_edit_away
      edit -D Title 
      query find product ZZZZZ_I_donot_want_to_edit_away
      edit -D Title 
      edit -D Title_hints
      edit -D Blastp_title
      edit -D Pfam_title 
      save
      query find clone strategy
      kill
      pparse $ici/main_clone_ncbi.ace
      pparse $ici/strategy.RZH.ace
      edit -D NoKantorInfo   
      query find mrna 
      acembly
        cdna_kantor // kantorizes active mrna set
        quit
      // dna mmMrna.$chrom.dna
      save
      find model
      list -a -f k2.done
      quit
EOF
    if (-e k2.done) then
       mv k2.prelog k2.log
       touch k9.test
       \rm k9.*
    endif
  endif
  cd $ici
end

echo -n 'End of phase k2'
date

goto phaseLoop

############################################################
############################################################
## Phase k9 : megaRun this chromosome

#to change the kantor because of the model change
foreach  chrom ($chromSet)
echo phase k9 chrom="$chrom"
  cd $ici/ZH$chrom
        $tacembly . <<EOF 
  find kantor
  show -a -f kk.$chrom.ace
  kill
  parse kk.$chrom.ace
  save
  quit
EOF
end
goto phaseLoop

phasek9old:

echo -n 'Start of phase k9 '
date

echo phase k9 megaRun chromSet="$chromSet"
if (! -d tmp/$species_kantor.data) mkdir tmp/$species_kantor.data

foreach  chrom1 ($chromSet)
  # setenv chrom is used by megaRun
  setenv chrom $chrom1
  if (-e ZH$chrom/k9.megaRun.done) continue

    touch  ZH$chrom/k9.megaRun.log
    set megaDb=ZH$chrom
      if (! -d tmp/$species_kantor.data) mkdir tmp/$species_kantor.data
      setenv megaRun ~/MEGA3/scripts/megaRun
      echo -n 'starting MEGA3/scripts/megaRun'
      date
      $megaRun $megaDb  psort $species_kantor -nowrite >>  $ici/ZH$chrom/k9.megaRunNew.log
      # $megaRun $megaDb  acekog $species_kantor  -nowrite >>  $ici/ZH$chrom/k9.megaRunNew.log
      # $megaRun $megaDb   pfam $species_kantor -nowrite  >>  $ici/ZH$chrom/k9.megaRunNew.log
      # $megaRun $megaDb blastp $species_kantor  -nowrite >>  $ici/ZH$chrom/k9.megaRunNew.log
      # $megaRun $megaDb oligo $species_kantor  -nowrite >>  $ici/ZH$chrom/k9.megaRunNew.log
      # $megaRun $megaDb acekog_n $species_kantor  -nowrite >>  $ici/ZH$chrom/k9.megaRunNew.log
      date

#   $taceclient a:localhost:$port <<EOF >>   $ici/ZH$chrom/k9.megaRun.log
#    shutdown now
#EOF
  pushd ZH$chrom
    touch  k9.megaRun.done
    if (-e k1.done) \rm k1.done
    if (-e k2.done) \rm k2.done
  popd
end

echo -n 'End of phase k9'
date

goto phaseLoop

############################################################
############################################################
## Phase r1 : recover names

phaser1:

foreach ii ($chromSet)
  if (-d $ici/EstMarkInfo$ii && ! -e $ici/EstMarkInfo$ii/est.list) then
    echo export EstMarkInfo$ii.dna
    cd $ici/EstMarkInfo$ii
    $tacembly . <<EOF 
          query find sequence is_read
          list -a -f est.list
          dna est.dna
          quit
EOF
  endif
end

goto phaseLoop

############################################################
## Phase r2 : recover names

phaser2:

foreach ii (X Y 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16)
  foreach  chrom ($chromSet)
    if (-d $ici/EstMarkInfo$ii && ! -e $ici/EstMarkInfo$ii/ncbi_36a.$chrom.r2g.txt) then
      echo phase r1 chrom="$chrom"
      cd $ici/EstMarkInfo$ii
      $tacembly $ici/PREVIOUS/ZH$chrom <<EOF >! ncbi_36a.$chrom.r2g.log
        key est.list
        aql -o ncbi_36a.$chrom.r2g.txt select s,g from s in @active:1, tg in s->from_gene, g in tg->gene where exists g
        quit
EOF
    endif
    if (! -e ncbi_36a.$chrom.newname.ace) then
      gawk -F '\t' '{m=$2;n=tolower(m);if(m==n)printf("Sequence %s\nPrevious_newname_36a %s pseudo  %s\n\n", $1, $2, chrom);}' chrom=$chrom  ncbi_36a.$chrom.r2g.txt >! ncbi_36a.$chrom.newname.ace
    endif
  end
end

goto phaseLoop

############################################################
## Phase r3 : recover names

phaser3:
cd $ici
foreach ii ($chromSet)
  echo "r3_new_$ii"
  if (! -e EstMarkInfo$ii/ncbi_36a.newname.ace) then
    pushd EstMarkInfo$ii
    cat ncbi_36a.*.newname.ace >!  ncbi_36a.newname.ace
    $tacembly . <<EOF
      read-models
      parse ncbi_36a.newname.ace
      save
      quit
EOF
    popd
  endif
end
  
echo -n 'End of phase r3'
date

goto phaseLoop
 
foreach ff (`ls -d EstMarkInfo*`)
  tbly $ff << EOF
    key totomreverse.list
    query ! mreverse
    edit mreverse
    key totomforward.list
    query ! mforward
    edit mforward
    key totoreverse.list
    kstore rr
    query ! reverse && ! mforward
    edit reverse
    query find sequence reverse
    spush
    kget rr
    sminus
    spop
    query ! areverse && ! mreverse
    edit forward
    query find sequence ref_seq && !mreverse && !mforward
    edit mforward
    query find sequence ref_seq && !mreverse && !aforward
    edit aforward
    query find sequence mforward && reverse
    edit forward
    query find sequence forward && mreverse
    edit reverse
    save
    quit
EOF
end


############################################################
## Phase clean: clean the disk without loosing the data

phaseclean:
cd $ici
foreach ii ($chromSet)
  if (-d $ici/CH$ii/ACE) then
    pushd  $ici/CH$ii/ACE
    foreach gs (`ls -d S*`)
      echo "gs=$gs"
      ls -ls $gs/database
      if ( -d $gs/database) echo 'found database'
      if ( ! -e $gs/dumpdir) echo 'found no dumpdir'
      if ( -d $gs/database && ! -e $gs/dumpdir)  echo 'found both'
      if ( -d $gs/database && ! -e $gs/dumpdir) then
        pushd $gs
        echo -n "clean $gs  du "
        du -ks database
        mkdir dumpdir
        if (-e test.txt) \rm test.txt
        $tacembly . <<EOF
          dump -s dumpdir
          find model 
          list -a -f test.txt
          quit
EOF
        if (-e test.txt) then
          \rm -rf database 
          \rm test.txt
        endif
        du -ks dumpdir
        popd
      endif
    end
    popd
  endif
end
  
echo -n 'End of phase clean'
date

goto phaseLoop

############################################################

phaseLoop:
echo phaseLoop
cd $ici

end

#if (! $?BSUB  || $BSUB < 2) \rm $tacembly
exit 0
############################################################
############################################################

date >! genetilingstats.txt
foreach chrom ($chromSetAll)
    gawk -F '\t' '{if(nn==0 && chrom=="1")printf("Chromosome\tIntergenic\tPremessenger\tmRNA\tExonic\tCoding\tChromosome\n");nn++;if($5=="Type")next; n[$5]+=$4-$3+1;}END{printf("%s\t%d\t%d\t%d\t%d\t%d\t%d\n", chrom,n["Intergenic"],n["Premessenger"],n["Exonic"]+n["Coding"],n["Exonic"],n["Coding"],n["Intergenic"]+n["Premessenger"]+n["Exonic"]+n["Coding"]);}' chrom=$chrom  ZH$chrom/aceview.genetiling.36a.$chrom.txt >> genetilingstats.txt
end

date >! genetilingstats.noCloud.txt
foreach chrom  ($chromSetAll)
    gawk -F '\t' '{if(nn==0 && chrom=="1")printf("Chromosome\tIntergenic\tPremessenger\tmRNA\tExonic\tCoding\tChromosome\n");nn++;if($5=="Type")next; n[$5]+=$4-$3+1;}END{printf("%s\t%d\t%d\t%d\t%d\t%d\t%d\n", chrom,n["Intergenic"],n["Premessenger"],n["Exonic"]+n["Coding"],n["Exonic"],n["Coding"],n["Intergenic"]+n["Premessenger"]+n["Exonic"]+n["Coding"]);}' chrom=$chrom  ZH$chrom/aceview.genetiling.36a.$chrom.noCloud.txt >> genetilingstats.noCloud.txt
end

foreach ff (`ls ZH*/aceview.genetiling.36a.*mix*.txt`)
 gawk -F '\t' '{if($2!="0")next;if ($3 != old+1)print;old=$4}' $ff
end
############################################################
############################################################

cd $ici/ZZ
mkdir Q2Fimage
tbly $ici/ZZ <<EOF
  query find gene locuslink
  list -a -f $ici/ZZ/Q2Fimage/gg1.list
EOF

setenv port 2310136

set ii=0
foreach ff (`gawk '{print $2}' gg1.list`)
  @ ii = $ii + 1
  if ($ii % 1000 == 0) echo 'save' | tacl a:deuce:$port
  echo "view -c Gene -n $ff -v fgene -xml -preview" | tacl a:deuce:$port
  echo "view -c Gene -n $ff -v ffunc -xml -preview" | tacl a:deuce:$port
  echo "view -c Gene -n $ff -v DtGLOC -flash -preview" | tacl a:deuce:$port
  echo "view -c Gene -n $ff -v DtGLOCBIG -flash -preview" | tacl a:deuce:$port
  echo "view -c Gene -n $ff -v DtHseq -flash -preview" | tacl a:deuce:$port
end


exit 0

